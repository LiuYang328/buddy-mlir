#map = affine_map<(d0, d1) -> (0, d1)>
#map1 = affine_map<(d0, d1) -> (d0, d1)>
#map2 = affine_map<(d0, d1, d2) -> (d0, d1)>
#map3 = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
#map4 = affine_map<(d0) -> (d0)>
#map5 = affine_map<(d0, d1, d2) -> (d1)>
#map6 = affine_map<(d0, d1, d2) -> (d0, d2)>
#map7 = affine_map<(d0, d1, d2, d3) -> (0, 0, 0, d3)>
#map8 = affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>
#map9 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map10 = affine_map<(d0) -> (0)>
#map11 = affine_map<(d0, d1, d2) -> (0, 0, 0)>
#map12 = affine_map<(d0, d1, d2) -> (0, d1, 0)>
#map13 = affine_map<(d0, d1, d2) -> (0, d1, d2)>
#map14 = affine_map<(d0, d1, d2) -> (0, 0, d2)>
#map15 = affine_map<(d0, d1) -> (d1, d0)>
#map16 = affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>
#map17 = affine_map<(d0, d1, d2) -> (d0, 0, d1, d2)>
#map18 = affine_map<(d0, d1) -> (0, d0, d1)>
#map19 = affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>
#map20 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>
#map21 = affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>
module {
  memref.global "private" constant @__constant_1x40xi64 : memref<1x40xi64> = dense<[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_40xi64_0 : memref<40xi64> = dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]> {alignment = 64 : i64}
  memref.global "private" constant @__constant_40x40xf32 : memref<40x40xf32> = dense<-3.40282347E+38> {alignment = 64 : i64}
  memref.global "private" constant @__constant_40xi64 : memref<40xi64> = dense<1> {alignment = 64 : i64}
  memref.global "private" constant @__constant_1x1x1x40xi1 : memref<1x1x1x40xi1> = dense<true> {alignment = 64 : i64}
  memref.global "private" constant @__constant_1x1x40x40xi1 : memref<1x1x40x40xi1> = dense<false> {alignment = 64 : i64}
  memref.global "private" constant @__constant_1x1x40x40xf32 : memref<1x1x40x40xf32> = dense<1.000000e+00> {alignment = 64 : i64}
  memref.global "private" constant @__constant_1xf32 : memref<1xf32> = dense<4.096000e+03> {alignment = 64 : i64}
  memref.global "private" constant @__constant_1x40x1xf32 : memref<1x40x1xf32> = dense<9.99999974E-6> {alignment = 64 : i64}
  memref.global "private" constant @__constant_40x4096xf32 : memref<40x4096xf32> = dense<0.000000e+00> {alignment = 64 : i64}
  memref.global "private" constant @__constant_1x32x40x40xf32 : memref<1x32x40x40xf32> = dense<11.3137083> {alignment = 64 : i64}
  memref.global "private" constant @__constant_40x11008xf32 : memref<40x11008xf32> = dense<0.000000e+00> {alignment = 64 : i64}
  memref.global "private" constant @__constant_40x32000xf32 : memref<40x32000xf32> = dense<0.000000e+00> {alignment = 64 : i64}
  func.func @subgraph0(%arg0: tensor<32000x4096xf32>, %arg1: tensor<1x40xi64>, %arg2: tensor<4096xf32>, %arg3: tensor<4096x4096xf32>, %arg4: tensor<4096x4096xf32>, %arg5: tensor<4096x4096xf32>, %arg6: tensor<1x1x2048x128xf32>, %arg7: tensor<1x1x2048x128xf32>, %arg8: tensor<4096x4096xf32>, %arg9: tensor<4096xf32>, %arg10: tensor<11008x4096xf32>, %arg11: tensor<11008x4096xf32>, %arg12: tensor<4096x11008xf32>, %arg13: tensor<4096xf32>, %arg14: tensor<4096x4096xf32>, %arg15: tensor<4096x4096xf32>, %arg16: tensor<4096x4096xf32>, %arg17: tensor<1x1x2048x128xf32>, %arg18: tensor<1x1x2048x128xf32>, %arg19: tensor<4096x4096xf32>, %arg20: tensor<4096xf32>, %arg21: tensor<11008x4096xf32>, %arg22: tensor<11008x4096xf32>, %arg23: tensor<4096x11008xf32>, %arg24: tensor<4096xf32>, %arg25: tensor<4096x4096xf32>, %arg26: tensor<4096x4096xf32>, %arg27: tensor<4096x4096xf32>, %arg28: tensor<1x1x2048x128xf32>, %arg29: tensor<1x1x2048x128xf32>, %arg30: tensor<4096x4096xf32>, %arg31: tensor<4096xf32>, %arg32: tensor<11008x4096xf32>, %arg33: tensor<11008x4096xf32>, %arg34: tensor<4096x11008xf32>, %arg35: tensor<4096xf32>, %arg36: tensor<4096x4096xf32>, %arg37: tensor<4096x4096xf32>, %arg38: tensor<4096x4096xf32>, %arg39: tensor<1x1x2048x128xf32>, %arg40: tensor<1x1x2048x128xf32>, %arg41: tensor<4096x4096xf32>, %arg42: tensor<4096xf32>, %arg43: tensor<11008x4096xf32>, %arg44: tensor<11008x4096xf32>, %arg45: tensor<4096x11008xf32>, %arg46: tensor<4096xf32>, %arg47: tensor<4096x4096xf32>, %arg48: tensor<4096x4096xf32>, %arg49: tensor<4096x4096xf32>, %arg50: tensor<1x1x2048x128xf32>, %arg51: tensor<1x1x2048x128xf32>, %arg52: tensor<4096x4096xf32>, %arg53: tensor<4096xf32>, %arg54: tensor<11008x4096xf32>, %arg55: tensor<11008x4096xf32>, %arg56: tensor<4096x11008xf32>, %arg57: tensor<4096xf32>, %arg58: tensor<4096x4096xf32>, %arg59: tensor<4096x4096xf32>, %arg60: tensor<4096x4096xf32>, %arg61: tensor<1x1x2048x128xf32>, %arg62: tensor<1x1x2048x128xf32>, %arg63: tensor<4096x4096xf32>, %arg64: tensor<4096xf32>, %arg65: tensor<11008x4096xf32>, %arg66: tensor<11008x4096xf32>, %arg67: tensor<4096x11008xf32>, %arg68: tensor<4096xf32>, %arg69: tensor<4096x4096xf32>, %arg70: tensor<4096x4096xf32>, %arg71: tensor<4096x4096xf32>, %arg72: tensor<1x1x2048x128xf32>, %arg73: tensor<1x1x2048x128xf32>, %arg74: tensor<4096x4096xf32>, %arg75: tensor<4096xf32>, %arg76: tensor<11008x4096xf32>, %arg77: tensor<11008x4096xf32>, %arg78: tensor<4096x11008xf32>, %arg79: tensor<4096xf32>, %arg80: tensor<4096x4096xf32>, %arg81: tensor<4096x4096xf32>, %arg82: tensor<4096x4096xf32>, %arg83: tensor<1x1x2048x128xf32>, %arg84: tensor<1x1x2048x128xf32>, %arg85: tensor<4096x4096xf32>, %arg86: tensor<4096xf32>, %arg87: tensor<11008x4096xf32>, %arg88: tensor<11008x4096xf32>, %arg89: tensor<4096x11008xf32>, %arg90: tensor<4096xf32>, %arg91: tensor<4096x4096xf32>, %arg92: tensor<4096x4096xf32>, %arg93: tensor<4096x4096xf32>, %arg94: tensor<1x1x2048x128xf32>, %arg95: tensor<1x1x2048x128xf32>, %arg96: tensor<4096x4096xf32>, %arg97: tensor<4096xf32>, %arg98: tensor<11008x4096xf32>, %arg99: tensor<11008x4096xf32>, %arg100: tensor<4096x11008xf32>, %arg101: tensor<4096xf32>, %arg102: tensor<4096x4096xf32>, %arg103: tensor<4096x4096xf32>, %arg104: tensor<4096x4096xf32>, %arg105: tensor<1x1x2048x128xf32>, %arg106: tensor<1x1x2048x128xf32>, %arg107: tensor<4096x4096xf32>, %arg108: tensor<4096xf32>, %arg109: tensor<11008x4096xf32>, %arg110: tensor<11008x4096xf32>, %arg111: tensor<4096x11008xf32>, %arg112: tensor<4096xf32>, %arg113: tensor<4096x4096xf32>, %arg114: tensor<4096x4096xf32>, %arg115: tensor<4096x4096xf32>, %arg116: tensor<1x1x2048x128xf32>, %arg117: tensor<1x1x2048x128xf32>, %arg118: tensor<4096x4096xf32>, %arg119: tensor<4096xf32>, %arg120: tensor<11008x4096xf32>, %arg121: tensor<11008x4096xf32>, %arg122: tensor<4096x11008xf32>, %arg123: tensor<4096xf32>, %arg124: tensor<4096x4096xf32>, %arg125: tensor<4096x4096xf32>, %arg126: tensor<4096x4096xf32>, %arg127: tensor<1x1x2048x128xf32>, %arg128: tensor<1x1x2048x128xf32>, %arg129: tensor<4096x4096xf32>, %arg130: tensor<4096xf32>, %arg131: tensor<11008x4096xf32>, %arg132: tensor<11008x4096xf32>, %arg133: tensor<4096x11008xf32>, %arg134: tensor<4096xf32>, %arg135: tensor<4096x4096xf32>, %arg136: tensor<4096x4096xf32>, %arg137: tensor<4096x4096xf32>, %arg138: tensor<1x1x2048x128xf32>, %arg139: tensor<1x1x2048x128xf32>, %arg140: tensor<4096x4096xf32>, %arg141: tensor<4096xf32>, %arg142: tensor<11008x4096xf32>, %arg143: tensor<11008x4096xf32>, %arg144: tensor<4096x11008xf32>, %arg145: tensor<4096xf32>, %arg146: tensor<4096x4096xf32>, %arg147: tensor<4096x4096xf32>, %arg148: tensor<4096x4096xf32>, %arg149: tensor<1x1x2048x128xf32>, %arg150: tensor<1x1x2048x128xf32>, %arg151: tensor<4096x4096xf32>, %arg152: tensor<4096xf32>, %arg153: tensor<11008x4096xf32>, %arg154: tensor<11008x4096xf32>, %arg155: tensor<4096x11008xf32>, %arg156: tensor<4096xf32>, %arg157: tensor<4096x4096xf32>, %arg158: tensor<4096x4096xf32>, %arg159: tensor<4096x4096xf32>, %arg160: tensor<1x1x2048x128xf32>, %arg161: tensor<1x1x2048x128xf32>, %arg162: tensor<4096x4096xf32>, %arg163: tensor<4096xf32>, %arg164: tensor<11008x4096xf32>, %arg165: tensor<11008x4096xf32>, %arg166: tensor<4096x11008xf32>, %arg167: tensor<4096xf32>, %arg168: tensor<4096x4096xf32>, %arg169: tensor<4096x4096xf32>, %arg170: tensor<4096x4096xf32>, %arg171: tensor<1x1x2048x128xf32>, %arg172: tensor<1x1x2048x128xf32>, %arg173: tensor<4096x4096xf32>, %arg174: tensor<4096xf32>, %arg175: tensor<11008x4096xf32>, %arg176: tensor<11008x4096xf32>, %arg177: tensor<4096x11008xf32>, %arg178: tensor<4096xf32>, %arg179: tensor<4096x4096xf32>, %arg180: tensor<4096x4096xf32>, %arg181: tensor<4096x4096xf32>, %arg182: tensor<1x1x2048x128xf32>, %arg183: tensor<1x1x2048x128xf32>, %arg184: tensor<4096x4096xf32>, %arg185: tensor<4096xf32>, %arg186: tensor<11008x4096xf32>, %arg187: tensor<11008x4096xf32>, %arg188: tensor<4096x11008xf32>, %arg189: tensor<4096xf32>, %arg190: tensor<4096x4096xf32>, %arg191: tensor<4096x4096xf32>, %arg192: tensor<4096x4096xf32>, %arg193: tensor<1x1x2048x128xf32>, %arg194: tensor<1x1x2048x128xf32>, %arg195: tensor<4096x4096xf32>, %arg196: tensor<4096xf32>, %arg197: tensor<11008x4096xf32>, %arg198: tensor<11008x4096xf32>, %arg199: tensor<4096x11008xf32>, %arg200: tensor<4096xf32>, %arg201: tensor<4096x4096xf32>, %arg202: tensor<4096x4096xf32>, %arg203: tensor<4096x4096xf32>, %arg204: tensor<1x1x2048x128xf32>, %arg205: tensor<1x1x2048x128xf32>, %arg206: tensor<4096x4096xf32>, %arg207: tensor<4096xf32>, %arg208: tensor<11008x4096xf32>, %arg209: tensor<11008x4096xf32>, %arg210: tensor<4096x11008xf32>, %arg211: tensor<4096xf32>, %arg212: tensor<4096x4096xf32>, %arg213: tensor<4096x4096xf32>, %arg214: tensor<4096x4096xf32>, %arg215: tensor<1x1x2048x128xf32>, %arg216: tensor<1x1x2048x128xf32>, %arg217: tensor<4096x4096xf32>, %arg218: tensor<4096xf32>, %arg219: tensor<11008x4096xf32>, %arg220: tensor<11008x4096xf32>, %arg221: tensor<4096x11008xf32>, %arg222: tensor<4096xf32>, %arg223: tensor<4096x4096xf32>, %arg224: tensor<4096x4096xf32>, %arg225: tensor<4096x4096xf32>, %arg226: tensor<1x1x2048x128xf32>, %arg227: tensor<1x1x2048x128xf32>, %arg228: tensor<4096x4096xf32>, %arg229: tensor<4096xf32>, %arg230: tensor<11008x4096xf32>, %arg231: tensor<11008x4096xf32>, %arg232: tensor<4096x11008xf32>, %arg233: tensor<4096xf32>, %arg234: tensor<4096x4096xf32>, %arg235: tensor<4096x4096xf32>, %arg236: tensor<4096x4096xf32>, %arg237: tensor<1x1x2048x128xf32>, %arg238: tensor<1x1x2048x128xf32>, %arg239: tensor<4096x4096xf32>, %arg240: tensor<4096xf32>, %arg241: tensor<11008x4096xf32>, %arg242: tensor<11008x4096xf32>, %arg243: tensor<4096x11008xf32>, %arg244: tensor<4096xf32>, %arg245: tensor<4096x4096xf32>, %arg246: tensor<4096x4096xf32>, %arg247: tensor<4096x4096xf32>, %arg248: tensor<1x1x2048x128xf32>, %arg249: tensor<1x1x2048x128xf32>, %arg250: tensor<4096x4096xf32>, %arg251: tensor<4096xf32>, %arg252: tensor<11008x4096xf32>, %arg253: tensor<11008x4096xf32>, %arg254: tensor<4096x11008xf32>, %arg255: tensor<4096xf32>, %arg256: tensor<4096x4096xf32>, %arg257: tensor<4096x4096xf32>, %arg258: tensor<4096x4096xf32>, %arg259: tensor<1x1x2048x128xf32>, %arg260: tensor<1x1x2048x128xf32>, %arg261: tensor<4096x4096xf32>, %arg262: tensor<4096xf32>, %arg263: tensor<11008x4096xf32>, %arg264: tensor<11008x4096xf32>, %arg265: tensor<4096x11008xf32>, %arg266: tensor<4096xf32>, %arg267: tensor<4096x4096xf32>, %arg268: tensor<4096x4096xf32>, %arg269: tensor<4096x4096xf32>, %arg270: tensor<1x1x2048x128xf32>, %arg271: tensor<1x1x2048x128xf32>, %arg272: tensor<4096x4096xf32>, %arg273: tensor<4096xf32>, %arg274: tensor<11008x4096xf32>, %arg275: tensor<11008x4096xf32>, %arg276: tensor<4096x11008xf32>, %arg277: tensor<4096xf32>, %arg278: tensor<4096x4096xf32>, %arg279: tensor<4096x4096xf32>, %arg280: tensor<4096x4096xf32>, %arg281: tensor<1x1x2048x128xf32>, %arg282: tensor<1x1x2048x128xf32>, %arg283: tensor<4096x4096xf32>, %arg284: tensor<4096xf32>, %arg285: tensor<11008x4096xf32>, %arg286: tensor<11008x4096xf32>, %arg287: tensor<4096x11008xf32>, %arg288: tensor<4096xf32>, %arg289: tensor<4096x4096xf32>, %arg290: tensor<4096x4096xf32>, %arg291: tensor<4096x4096xf32>, %arg292: tensor<1x1x2048x128xf32>, %arg293: tensor<1x1x2048x128xf32>, %arg294: tensor<4096x4096xf32>, %arg295: tensor<4096xf32>, %arg296: tensor<11008x4096xf32>, %arg297: tensor<11008x4096xf32>, %arg298: tensor<4096x11008xf32>, %arg299: tensor<4096xf32>, %arg300: tensor<4096x4096xf32>, %arg301: tensor<4096x4096xf32>, %arg302: tensor<4096x4096xf32>, %arg303: tensor<1x1x2048x128xf32>, %arg304: tensor<1x1x2048x128xf32>, %arg305: tensor<4096x4096xf32>, %arg306: tensor<4096xf32>, %arg307: tensor<11008x4096xf32>, %arg308: tensor<11008x4096xf32>, %arg309: tensor<4096x11008xf32>, %arg310: tensor<4096xf32>, %arg311: tensor<4096x4096xf32>, %arg312: tensor<4096x4096xf32>, %arg313: tensor<4096x4096xf32>, %arg314: tensor<1x1x2048x128xf32>, %arg315: tensor<1x1x2048x128xf32>, %arg316: tensor<4096x4096xf32>, %arg317: tensor<4096xf32>, %arg318: tensor<11008x4096xf32>, %arg319: tensor<11008x4096xf32>, %arg320: tensor<4096x11008xf32>, %arg321: tensor<4096xf32>, %arg322: tensor<4096x4096xf32>, %arg323: tensor<4096x4096xf32>, %arg324: tensor<4096x4096xf32>, %arg325: tensor<1x1x2048x128xf32>, %arg326: tensor<1x1x2048x128xf32>, %arg327: tensor<4096x4096xf32>, %arg328: tensor<4096xf32>, %arg329: tensor<11008x4096xf32>, %arg330: tensor<11008x4096xf32>, %arg331: tensor<4096x11008xf32>, %arg332: tensor<4096xf32>, %arg333: tensor<4096x4096xf32>, %arg334: tensor<4096x4096xf32>, %arg335: tensor<4096x4096xf32>, %arg336: tensor<1x1x2048x128xf32>, %arg337: tensor<1x1x2048x128xf32>, %arg338: tensor<4096x4096xf32>, %arg339: tensor<4096xf32>, %arg340: tensor<11008x4096xf32>, %arg341: tensor<11008x4096xf32>, %arg342: tensor<4096x11008xf32>, %arg343: tensor<4096xf32>, %arg344: tensor<4096x4096xf32>, %arg345: tensor<4096x4096xf32>, %arg346: tensor<4096x4096xf32>, %arg347: tensor<1x1x2048x128xf32>, %arg348: tensor<1x1x2048x128xf32>, %arg349: tensor<4096x4096xf32>, %arg350: tensor<4096xf32>, %arg351: tensor<11008x4096xf32>, %arg352: tensor<11008x4096xf32>, %arg353: tensor<4096x11008xf32>, %arg354: tensor<4096xf32>, %arg355: tensor<32000x4096xf32>) -> (tensor<1x40x4096xf32>, tensor<1x40x32000xf32>) {
    %0 = bufferization.to_memref %arg355 : memref<32000x4096xf32, strided<[?, ?], offset: ?>>
    %1 = bufferization.to_memref %arg354 : memref<4096xf32, strided<[?], offset: ?>>
    %2 = bufferization.to_memref %arg353 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %3 = bufferization.to_memref %arg352 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %4 = bufferization.to_memref %arg351 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %5 = bufferization.to_memref %arg350 : memref<4096xf32, strided<[?], offset: ?>>
    %6 = bufferization.to_memref %arg349 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %7 = bufferization.to_memref %arg348 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %8 = bufferization.to_memref %arg347 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %9 = bufferization.to_memref %arg346 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %10 = bufferization.to_memref %arg345 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %11 = bufferization.to_memref %arg344 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %12 = bufferization.to_memref %arg343 : memref<4096xf32, strided<[?], offset: ?>>
    %13 = bufferization.to_memref %arg342 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %14 = bufferization.to_memref %arg341 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %15 = bufferization.to_memref %arg340 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %16 = bufferization.to_memref %arg339 : memref<4096xf32, strided<[?], offset: ?>>
    %17 = bufferization.to_memref %arg338 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %18 = bufferization.to_memref %arg337 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %19 = bufferization.to_memref %arg336 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %20 = bufferization.to_memref %arg335 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %21 = bufferization.to_memref %arg334 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %22 = bufferization.to_memref %arg333 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %23 = bufferization.to_memref %arg332 : memref<4096xf32, strided<[?], offset: ?>>
    %24 = bufferization.to_memref %arg331 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %25 = bufferization.to_memref %arg330 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %26 = bufferization.to_memref %arg329 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %27 = bufferization.to_memref %arg328 : memref<4096xf32, strided<[?], offset: ?>>
    %28 = bufferization.to_memref %arg327 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %29 = bufferization.to_memref %arg326 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %30 = bufferization.to_memref %arg325 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %31 = bufferization.to_memref %arg324 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %32 = bufferization.to_memref %arg323 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %33 = bufferization.to_memref %arg322 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %34 = bufferization.to_memref %arg321 : memref<4096xf32, strided<[?], offset: ?>>
    %35 = bufferization.to_memref %arg320 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %36 = bufferization.to_memref %arg319 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %37 = bufferization.to_memref %arg318 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %38 = bufferization.to_memref %arg317 : memref<4096xf32, strided<[?], offset: ?>>
    %39 = bufferization.to_memref %arg316 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %40 = bufferization.to_memref %arg315 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %41 = bufferization.to_memref %arg314 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %42 = bufferization.to_memref %arg313 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %43 = bufferization.to_memref %arg312 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %44 = bufferization.to_memref %arg311 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %45 = bufferization.to_memref %arg310 : memref<4096xf32, strided<[?], offset: ?>>
    %46 = bufferization.to_memref %arg309 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %47 = bufferization.to_memref %arg308 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %48 = bufferization.to_memref %arg307 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %49 = bufferization.to_memref %arg306 : memref<4096xf32, strided<[?], offset: ?>>
    %50 = bufferization.to_memref %arg305 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %51 = bufferization.to_memref %arg304 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %52 = bufferization.to_memref %arg303 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %53 = bufferization.to_memref %arg302 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %54 = bufferization.to_memref %arg301 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %55 = bufferization.to_memref %arg300 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %56 = bufferization.to_memref %arg299 : memref<4096xf32, strided<[?], offset: ?>>
    %57 = bufferization.to_memref %arg298 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %58 = bufferization.to_memref %arg297 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %59 = bufferization.to_memref %arg296 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %60 = bufferization.to_memref %arg295 : memref<4096xf32, strided<[?], offset: ?>>
    %61 = bufferization.to_memref %arg294 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %62 = bufferization.to_memref %arg293 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %63 = bufferization.to_memref %arg292 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %64 = bufferization.to_memref %arg291 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %65 = bufferization.to_memref %arg290 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %66 = bufferization.to_memref %arg289 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %67 = bufferization.to_memref %arg288 : memref<4096xf32, strided<[?], offset: ?>>
    %68 = bufferization.to_memref %arg287 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %69 = bufferization.to_memref %arg286 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %70 = bufferization.to_memref %arg285 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %71 = bufferization.to_memref %arg284 : memref<4096xf32, strided<[?], offset: ?>>
    %72 = bufferization.to_memref %arg283 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %73 = bufferization.to_memref %arg282 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %74 = bufferization.to_memref %arg281 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %75 = bufferization.to_memref %arg280 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %76 = bufferization.to_memref %arg279 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %77 = bufferization.to_memref %arg278 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %78 = bufferization.to_memref %arg277 : memref<4096xf32, strided<[?], offset: ?>>
    %79 = bufferization.to_memref %arg276 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %80 = bufferization.to_memref %arg275 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %81 = bufferization.to_memref %arg274 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %82 = bufferization.to_memref %arg273 : memref<4096xf32, strided<[?], offset: ?>>
    %83 = bufferization.to_memref %arg272 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %84 = bufferization.to_memref %arg271 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %85 = bufferization.to_memref %arg270 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %86 = bufferization.to_memref %arg269 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %87 = bufferization.to_memref %arg268 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %88 = bufferization.to_memref %arg267 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %89 = bufferization.to_memref %arg266 : memref<4096xf32, strided<[?], offset: ?>>
    %90 = bufferization.to_memref %arg265 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %91 = bufferization.to_memref %arg264 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %92 = bufferization.to_memref %arg263 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %93 = bufferization.to_memref %arg262 : memref<4096xf32, strided<[?], offset: ?>>
    %94 = bufferization.to_memref %arg261 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %95 = bufferization.to_memref %arg260 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %96 = bufferization.to_memref %arg259 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %97 = bufferization.to_memref %arg258 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %98 = bufferization.to_memref %arg257 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %99 = bufferization.to_memref %arg256 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %100 = bufferization.to_memref %arg255 : memref<4096xf32, strided<[?], offset: ?>>
    %101 = bufferization.to_memref %arg254 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %102 = bufferization.to_memref %arg253 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %103 = bufferization.to_memref %arg252 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %104 = bufferization.to_memref %arg251 : memref<4096xf32, strided<[?], offset: ?>>
    %105 = bufferization.to_memref %arg250 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %106 = bufferization.to_memref %arg249 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %107 = bufferization.to_memref %arg248 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %108 = bufferization.to_memref %arg247 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %109 = bufferization.to_memref %arg246 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %110 = bufferization.to_memref %arg245 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %111 = bufferization.to_memref %arg244 : memref<4096xf32, strided<[?], offset: ?>>
    %112 = bufferization.to_memref %arg243 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %113 = bufferization.to_memref %arg242 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %114 = bufferization.to_memref %arg241 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %115 = bufferization.to_memref %arg240 : memref<4096xf32, strided<[?], offset: ?>>
    %116 = bufferization.to_memref %arg239 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %117 = bufferization.to_memref %arg238 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %118 = bufferization.to_memref %arg237 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %119 = bufferization.to_memref %arg236 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %120 = bufferization.to_memref %arg235 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %121 = bufferization.to_memref %arg234 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %122 = bufferization.to_memref %arg233 : memref<4096xf32, strided<[?], offset: ?>>
    %123 = bufferization.to_memref %arg232 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %124 = bufferization.to_memref %arg231 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %125 = bufferization.to_memref %arg230 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %126 = bufferization.to_memref %arg229 : memref<4096xf32, strided<[?], offset: ?>>
    %127 = bufferization.to_memref %arg228 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %128 = bufferization.to_memref %arg227 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %129 = bufferization.to_memref %arg226 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %130 = bufferization.to_memref %arg225 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %131 = bufferization.to_memref %arg224 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %132 = bufferization.to_memref %arg223 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %133 = bufferization.to_memref %arg222 : memref<4096xf32, strided<[?], offset: ?>>
    %134 = bufferization.to_memref %arg221 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %135 = bufferization.to_memref %arg220 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %136 = bufferization.to_memref %arg219 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %137 = bufferization.to_memref %arg218 : memref<4096xf32, strided<[?], offset: ?>>
    %138 = bufferization.to_memref %arg217 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %139 = bufferization.to_memref %arg216 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %140 = bufferization.to_memref %arg215 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %141 = bufferization.to_memref %arg214 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %142 = bufferization.to_memref %arg213 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %143 = bufferization.to_memref %arg212 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %144 = bufferization.to_memref %arg211 : memref<4096xf32, strided<[?], offset: ?>>
    %145 = bufferization.to_memref %arg210 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %146 = bufferization.to_memref %arg209 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %147 = bufferization.to_memref %arg208 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %148 = bufferization.to_memref %arg207 : memref<4096xf32, strided<[?], offset: ?>>
    %149 = bufferization.to_memref %arg206 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %150 = bufferization.to_memref %arg205 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %151 = bufferization.to_memref %arg204 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %152 = bufferization.to_memref %arg203 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %153 = bufferization.to_memref %arg202 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %154 = bufferization.to_memref %arg201 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %155 = bufferization.to_memref %arg200 : memref<4096xf32, strided<[?], offset: ?>>
    %156 = bufferization.to_memref %arg199 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %157 = bufferization.to_memref %arg198 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %158 = bufferization.to_memref %arg197 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %159 = bufferization.to_memref %arg196 : memref<4096xf32, strided<[?], offset: ?>>
    %160 = bufferization.to_memref %arg195 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %161 = bufferization.to_memref %arg194 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %162 = bufferization.to_memref %arg193 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %163 = bufferization.to_memref %arg192 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %164 = bufferization.to_memref %arg191 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %165 = bufferization.to_memref %arg190 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %166 = bufferization.to_memref %arg189 : memref<4096xf32, strided<[?], offset: ?>>
    %167 = bufferization.to_memref %arg188 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %168 = bufferization.to_memref %arg187 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %169 = bufferization.to_memref %arg186 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %170 = bufferization.to_memref %arg185 : memref<4096xf32, strided<[?], offset: ?>>
    %171 = bufferization.to_memref %arg184 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %172 = bufferization.to_memref %arg183 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %173 = bufferization.to_memref %arg182 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %174 = bufferization.to_memref %arg181 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %175 = bufferization.to_memref %arg180 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %176 = bufferization.to_memref %arg179 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %177 = bufferization.to_memref %arg178 : memref<4096xf32, strided<[?], offset: ?>>
    %178 = bufferization.to_memref %arg177 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %179 = bufferization.to_memref %arg176 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %180 = bufferization.to_memref %arg175 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %181 = bufferization.to_memref %arg174 : memref<4096xf32, strided<[?], offset: ?>>
    %182 = bufferization.to_memref %arg173 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %183 = bufferization.to_memref %arg172 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %184 = bufferization.to_memref %arg171 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %185 = bufferization.to_memref %arg170 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %186 = bufferization.to_memref %arg169 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %187 = bufferization.to_memref %arg168 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %188 = bufferization.to_memref %arg167 : memref<4096xf32, strided<[?], offset: ?>>
    %189 = bufferization.to_memref %arg166 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %190 = bufferization.to_memref %arg165 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %191 = bufferization.to_memref %arg164 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %192 = bufferization.to_memref %arg163 : memref<4096xf32, strided<[?], offset: ?>>
    %193 = bufferization.to_memref %arg162 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %194 = bufferization.to_memref %arg161 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %195 = bufferization.to_memref %arg160 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %196 = bufferization.to_memref %arg159 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %197 = bufferization.to_memref %arg158 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %198 = bufferization.to_memref %arg157 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %199 = bufferization.to_memref %arg156 : memref<4096xf32, strided<[?], offset: ?>>
    %200 = bufferization.to_memref %arg155 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %201 = bufferization.to_memref %arg154 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %202 = bufferization.to_memref %arg153 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %203 = bufferization.to_memref %arg152 : memref<4096xf32, strided<[?], offset: ?>>
    %204 = bufferization.to_memref %arg151 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %205 = bufferization.to_memref %arg150 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %206 = bufferization.to_memref %arg149 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %207 = bufferization.to_memref %arg148 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %208 = bufferization.to_memref %arg147 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %209 = bufferization.to_memref %arg146 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %210 = bufferization.to_memref %arg145 : memref<4096xf32, strided<[?], offset: ?>>
    %211 = bufferization.to_memref %arg144 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %212 = bufferization.to_memref %arg143 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %213 = bufferization.to_memref %arg142 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %214 = bufferization.to_memref %arg141 : memref<4096xf32, strided<[?], offset: ?>>
    %215 = bufferization.to_memref %arg140 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %216 = bufferization.to_memref %arg139 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %217 = bufferization.to_memref %arg138 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %218 = bufferization.to_memref %arg137 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %219 = bufferization.to_memref %arg136 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %220 = bufferization.to_memref %arg135 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %221 = bufferization.to_memref %arg134 : memref<4096xf32, strided<[?], offset: ?>>
    %222 = bufferization.to_memref %arg133 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %223 = bufferization.to_memref %arg132 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %224 = bufferization.to_memref %arg131 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %225 = bufferization.to_memref %arg130 : memref<4096xf32, strided<[?], offset: ?>>
    %226 = bufferization.to_memref %arg129 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %227 = bufferization.to_memref %arg128 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %228 = bufferization.to_memref %arg127 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %229 = bufferization.to_memref %arg126 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %230 = bufferization.to_memref %arg125 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %231 = bufferization.to_memref %arg124 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %232 = bufferization.to_memref %arg123 : memref<4096xf32, strided<[?], offset: ?>>
    %233 = bufferization.to_memref %arg122 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %234 = bufferization.to_memref %arg121 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %235 = bufferization.to_memref %arg120 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %236 = bufferization.to_memref %arg119 : memref<4096xf32, strided<[?], offset: ?>>
    %237 = bufferization.to_memref %arg118 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %238 = bufferization.to_memref %arg117 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %239 = bufferization.to_memref %arg116 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %240 = bufferization.to_memref %arg115 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %241 = bufferization.to_memref %arg114 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %242 = bufferization.to_memref %arg113 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %243 = bufferization.to_memref %arg112 : memref<4096xf32, strided<[?], offset: ?>>
    %244 = bufferization.to_memref %arg111 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %245 = bufferization.to_memref %arg110 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %246 = bufferization.to_memref %arg109 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %247 = bufferization.to_memref %arg108 : memref<4096xf32, strided<[?], offset: ?>>
    %248 = bufferization.to_memref %arg107 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %249 = bufferization.to_memref %arg106 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %250 = bufferization.to_memref %arg105 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %251 = bufferization.to_memref %arg104 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %252 = bufferization.to_memref %arg103 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %253 = bufferization.to_memref %arg102 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %254 = bufferization.to_memref %arg101 : memref<4096xf32, strided<[?], offset: ?>>
    %255 = bufferization.to_memref %arg100 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %256 = bufferization.to_memref %arg99 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %257 = bufferization.to_memref %arg98 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %258 = bufferization.to_memref %arg97 : memref<4096xf32, strided<[?], offset: ?>>
    %259 = bufferization.to_memref %arg96 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %260 = bufferization.to_memref %arg95 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %261 = bufferization.to_memref %arg94 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %262 = bufferization.to_memref %arg93 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %263 = bufferization.to_memref %arg92 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %264 = bufferization.to_memref %arg91 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %265 = bufferization.to_memref %arg90 : memref<4096xf32, strided<[?], offset: ?>>
    %266 = bufferization.to_memref %arg89 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %267 = bufferization.to_memref %arg88 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %268 = bufferization.to_memref %arg87 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %269 = bufferization.to_memref %arg86 : memref<4096xf32, strided<[?], offset: ?>>
    %270 = bufferization.to_memref %arg85 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %271 = bufferization.to_memref %arg84 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %272 = bufferization.to_memref %arg83 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %273 = bufferization.to_memref %arg82 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %274 = bufferization.to_memref %arg81 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %275 = bufferization.to_memref %arg80 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %276 = bufferization.to_memref %arg79 : memref<4096xf32, strided<[?], offset: ?>>
    %277 = bufferization.to_memref %arg78 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %278 = bufferization.to_memref %arg77 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %279 = bufferization.to_memref %arg76 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %280 = bufferization.to_memref %arg75 : memref<4096xf32, strided<[?], offset: ?>>
    %281 = bufferization.to_memref %arg74 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %282 = bufferization.to_memref %arg73 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %283 = bufferization.to_memref %arg72 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %284 = bufferization.to_memref %arg71 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %285 = bufferization.to_memref %arg70 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %286 = bufferization.to_memref %arg69 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %287 = bufferization.to_memref %arg68 : memref<4096xf32, strided<[?], offset: ?>>
    %288 = bufferization.to_memref %arg67 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %289 = bufferization.to_memref %arg66 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %290 = bufferization.to_memref %arg65 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %291 = bufferization.to_memref %arg64 : memref<4096xf32, strided<[?], offset: ?>>
    %292 = bufferization.to_memref %arg63 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %293 = bufferization.to_memref %arg62 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %294 = bufferization.to_memref %arg61 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %295 = bufferization.to_memref %arg60 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %296 = bufferization.to_memref %arg59 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %297 = bufferization.to_memref %arg58 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %298 = bufferization.to_memref %arg57 : memref<4096xf32, strided<[?], offset: ?>>
    %299 = bufferization.to_memref %arg56 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %300 = bufferization.to_memref %arg55 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %301 = bufferization.to_memref %arg54 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %302 = bufferization.to_memref %arg53 : memref<4096xf32, strided<[?], offset: ?>>
    %303 = bufferization.to_memref %arg52 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %304 = bufferization.to_memref %arg51 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %305 = bufferization.to_memref %arg50 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %306 = bufferization.to_memref %arg49 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %307 = bufferization.to_memref %arg48 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %308 = bufferization.to_memref %arg47 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %309 = bufferization.to_memref %arg46 : memref<4096xf32, strided<[?], offset: ?>>
    %310 = bufferization.to_memref %arg45 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %311 = bufferization.to_memref %arg44 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %312 = bufferization.to_memref %arg43 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %313 = bufferization.to_memref %arg42 : memref<4096xf32, strided<[?], offset: ?>>
    %314 = bufferization.to_memref %arg41 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %315 = bufferization.to_memref %arg40 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %316 = bufferization.to_memref %arg39 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %317 = bufferization.to_memref %arg38 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %318 = bufferization.to_memref %arg37 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %319 = bufferization.to_memref %arg36 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %320 = bufferization.to_memref %arg35 : memref<4096xf32, strided<[?], offset: ?>>
    %321 = bufferization.to_memref %arg34 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %322 = bufferization.to_memref %arg33 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %323 = bufferization.to_memref %arg32 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %324 = bufferization.to_memref %arg31 : memref<4096xf32, strided<[?], offset: ?>>
    %325 = bufferization.to_memref %arg30 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %326 = bufferization.to_memref %arg29 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %327 = bufferization.to_memref %arg28 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %328 = bufferization.to_memref %arg27 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %329 = bufferization.to_memref %arg26 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %330 = bufferization.to_memref %arg25 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %331 = bufferization.to_memref %arg24 : memref<4096xf32, strided<[?], offset: ?>>
    %332 = bufferization.to_memref %arg23 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %333 = bufferization.to_memref %arg22 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %334 = bufferization.to_memref %arg21 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %335 = bufferization.to_memref %arg20 : memref<4096xf32, strided<[?], offset: ?>>
    %336 = bufferization.to_memref %arg19 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %337 = bufferization.to_memref %arg18 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %338 = bufferization.to_memref %arg17 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %339 = bufferization.to_memref %arg16 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %340 = bufferization.to_memref %arg15 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %341 = bufferization.to_memref %arg14 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %342 = bufferization.to_memref %arg13 : memref<4096xf32, strided<[?], offset: ?>>
    %343 = bufferization.to_memref %arg12 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>
    %344 = bufferization.to_memref %arg11 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %345 = bufferization.to_memref %arg10 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>
    %346 = bufferization.to_memref %arg9 : memref<4096xf32, strided<[?], offset: ?>>
    %347 = bufferization.to_memref %arg8 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %348 = bufferization.to_memref %arg7 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %349 = bufferization.to_memref %arg6 : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %350 = bufferization.to_memref %arg5 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %351 = bufferization.to_memref %arg4 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %352 = bufferization.to_memref %arg3 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>
    %353 = bufferization.to_memref %arg2 : memref<4096xf32, strided<[?], offset: ?>>
    %354 = bufferization.to_memref %arg0 : memref<32000x4096xf32, strided<[?, ?], offset: ?>>
    %355 = bufferization.to_memref %arg1 : memref<1x40xi64, strided<[?, ?], offset: ?>>
    %356 = memref.get_global @__constant_40x32000xf32 : memref<40x32000xf32>
    %357 = memref.get_global @__constant_40x11008xf32 : memref<40x11008xf32>
    %358 = memref.get_global @__constant_1x32x40x40xf32 : memref<1x32x40x40xf32>
    %359 = memref.get_global @__constant_40x4096xf32 : memref<40x4096xf32>
    %360 = memref.get_global @__constant_1x40x1xf32 : memref<1x40x1xf32>
    %cst = arith.constant 1.000000e+00 : f32
    %361 = memref.get_global @__constant_1xf32 : memref<1xf32>
    %c2_i32 = arith.constant 2 : i32
    %cst_0 = arith.constant -3.40282347E+38 : f32
    %362 = memref.get_global @__constant_1x1x40x40xf32 : memref<1x1x40x40xf32>
    %363 = memref.get_global @__constant_1x1x40x40xi1 : memref<1x1x40x40xi1>
    %364 = memref.get_global @__constant_1x1x1x40xi1 : memref<1x1x1x40xi1>
    %cst_1 = arith.constant 0.000000e+00 : f32
    %365 = memref.get_global @__constant_40xi64 : memref<40xi64>
    %366 = memref.get_global @__constant_40x40xf32 : memref<40x40xf32>
    %367 = memref.get_global @__constant_40xi64_0 : memref<40xi64>
    %368 = memref.get_global @__constant_1x40xi64 : memref<1x40xi64>
    %alloc = memref.alloc() {alignment = 64 : i64} : memref<1x40xi32>
    linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel"]} ins(%355 : memref<1x40xi64, strided<[?, ?], offset: ?>>) outs(%alloc : memref<1x40xi32>) {
    ^bb0(%in: i64, %out: i32):
      %371 = arith.trunci %in : i64 to i32
      linalg.yield %371 : i32
    }
    %expand_shape = memref.expand_shape %354 [[0, 1], [2]] : memref<32000x4096xf32, strided<[?, ?], offset: ?>> into memref<1x32000x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc : memref<1x40xi32>) outs(%alloc_2 : memref<1x40x4096xf32>) {
    ^bb0(%in: i32, %out: f32):
      %371 = linalg.index 0 : index
      %372 = arith.index_cast %in : i32 to index
      %373 = linalg.index 2 : index
      %374 = memref.load %expand_shape[%371, %372, %373] : memref<1x32000x4096xf32, strided<[?, ?, ?], offset: ?>>
      linalg.yield %374 : f32
    }
    %alloc_3 = memref.alloc() {alignment = 64 : i64} : memref<40xi64>
    linalg.generic {indexing_maps = [#map4, #map4, #map4], iterator_types = ["parallel"]} ins(%367, %365 : memref<40xi64>, memref<40xi64>) outs(%alloc_3 : memref<40xi64>) {
    ^bb0(%in: i64, %in_3451: i64, %out: i64):
      %371 = arith.addi %in, %in_3451 : i64
      linalg.yield %371 : i64
    }
    %expand_shape_4 = memref.expand_shape %alloc_3 [[0, 1]] : memref<40xi64> into memref<40x1xi64>
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<40x40xi1>
    linalg.generic {indexing_maps = [#map5, #map6, #map2], iterator_types = ["parallel", "parallel", "reduction"]} ins(%367, %expand_shape_4 : memref<40xi64>, memref<40x1xi64>) outs(%alloc_5 : memref<40x40xi1>) {
    ^bb0(%in: i64, %in_3451: i64, %out: i1):
      %371 = arith.cmpi slt, %in, %in_3451 : i64
      linalg.yield %371 : i1
    }
    %alloc_6 = memref.alloc() {alignment = 64 : i64} : memref<40x40xf32>
    linalg.generic {indexing_maps = [#map1, #map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_5, %366 : memref<40x40xi1>, memref<40x40xf32>) outs(%alloc_6 : memref<40x40xf32>) {
    ^bb0(%in: i1, %in_3451: f32, %out: f32):
      %371 = arith.select %in, %cst_1, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_7 = memref.alloc() {alignment = 64 : i64} : memref<1x1x40x40xi1>
    linalg.generic {indexing_maps = [#map7, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%364, %363 : memref<1x1x1x40xi1>, memref<1x1x40x40xi1>) outs(%alloc_7 : memref<1x1x40x40xi1>) {
    ^bb0(%in: i1, %in_3451: i1, %out: i1):
      %371 = arith.addi %in, %in_3451 : i1
      linalg.yield %371 : i1
    }
    %alloc_8 = memref.alloc() {alignment = 64 : i64} : memref<1x1x40x40xf32>
    linalg.generic {indexing_maps = [#map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_7 : memref<1x1x40x40xi1>) outs(%alloc_8 : memref<1x1x40x40xf32>) {
    ^bb0(%in: i1, %out: f32):
      %371 = arith.uitofp %in : i1 to f32
      linalg.yield %371 : f32
    }
    %alloc_9 = memref.alloc() {alignment = 64 : i64} : memref<1x1x40x40xf32>
    linalg.generic {indexing_maps = [#map8, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%362, %alloc_8 : memref<1x1x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_9 : memref<1x1x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_10 = memref.alloc() {alignment = 64 : i64} : memref<1x1x40x40xi1>
    linalg.generic {indexing_maps = [#map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_9 : memref<1x1x40x40xf32>) outs(%alloc_10 : memref<1x1x40x40xi1>) {
    ^bb0(%in: f32, %out: i1):
      %371 = arith.cmpf une, %in, %cst_1 : f32
      linalg.yield %371 : i1
    }
    %alloc_11 = memref.alloc() {alignment = 64 : i64} : memref<1x1x40x40xf32>
    linalg.generic {indexing_maps = [#map9, #map9, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_10, %alloc_9 : memref<1x1x40x40xi1>, memref<1x1x40x40xf32>) outs(%alloc_11 : memref<1x1x40x40xf32>) {
    ^bb0(%in: i1, %in_3451: f32, %out: f32):
      %371 = arith.select %in, %cst_0, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_12 = memref.expand_shape %alloc_6 [[0, 1, 2], [3]] : memref<40x40xf32> into memref<1x1x40x40xf32>
    %alloc_13 = memref.alloc() {alignment = 64 : i64} : memref<1x1x40x40xf32>
    linalg.generic {indexing_maps = [#map8, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_11, %expand_shape_12 : memref<1x1x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_13 : memref<1x1x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_14 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2 : memref<1x40x4096xf32>) outs(%alloc_14 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_15 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_15 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_14 : memref<1x40x4096xf32>) outs(%alloc_15 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_16 = memref.expand_shape %alloc_15 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_17 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_17 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_18 = memref.expand_shape %alloc_17 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_19 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_18, %expand_shape_16 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_19 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_20 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_19, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_20 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_21 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_20 : memref<1x40x1xf32>) outs(%alloc_21 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_22 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2, %alloc_21 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_22 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_23 = memref.expand_shape %353 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_24 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_23, %alloc_22 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_24 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_25 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%352 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_25 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape = memref.collapse_shape %alloc_24 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_26 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_26 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape, %alloc_25 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_26 : memref<40x4096xf32>)
    %alloc_27 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%351 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_27 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_28 = memref.collapse_shape %alloc_24 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_29 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_29 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_28, %alloc_27 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_29 : memref<40x4096xf32>)
    %alloc_30 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%350 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_30 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_31 = memref.collapse_shape %alloc_24 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_32 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_32 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_31, %alloc_30 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_32 : memref<40x4096xf32>)
    %expand_shape_33 = memref.expand_shape %alloc_26 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_34 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_33 : memref<1x40x32x128xf32>) outs(%alloc_34 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_35 = memref.expand_shape %alloc_29 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_36 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_35 : memref<1x40x32x128xf32>) outs(%alloc_36 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_37 = memref.expand_shape %alloc_32 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_38 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_37 : memref<1x40x32x128xf32>) outs(%alloc_38 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview = memref.subview %349[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_39 = memref.subview %348[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_40 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_40 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_41 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_40 : memref<1x40x128xf32>) outs(%alloc_41 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_42 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_39 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_42 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_43 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_42 : memref<1x40x128xf32>) outs(%alloc_43 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_44 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_44 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_41[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_45 = memref.expand_shape %alloc_44 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_46 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_46 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_43[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_47 = memref.expand_shape %alloc_46 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_48 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_34, %expand_shape_45 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_48 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_49 = memref.subview %alloc_34[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_50 = memref.subview %alloc_34[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_51 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_50 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_51 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_52 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_53 = memref.subview %alloc_52[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_51, %subview_53 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_54 = memref.subview %alloc_52[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_49, %subview_54 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_55 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_52, %expand_shape_47 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_55 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_56 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_48, %alloc_55 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_56 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_57 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_36, %expand_shape_45 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_57 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_58 = memref.subview %alloc_36[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_59 = memref.subview %alloc_36[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_60 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_59 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_60 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_61 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_62 = memref.subview %alloc_61[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_60, %subview_62 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_63 = memref.subview %alloc_61[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_58, %subview_63 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_64 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_61, %expand_shape_47 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_64 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_65 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_57, %alloc_64 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_65 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_66 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_65 : memref<1x32x40x128xf32>) outs(%alloc_66 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_67 = memref.collapse_shape %alloc_56 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_68 = memref.collapse_shape %alloc_66 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_69 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_69 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_67, %collapse_shape_68 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_69 : memref<32x40x40xf32>)
    %expand_shape_70 = memref.expand_shape %alloc_69 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_71 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_71 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_72 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_70, %alloc_71 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_72 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_73 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_72, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_73 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_74 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_74 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_73 : memref<1x32x40x40xf32>) outs(%alloc_74 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_75 = memref.expand_shape %alloc_74 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_76 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_73, %expand_shape_75 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_76 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_77 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_76 : memref<1x32x40x40xf32>) outs(%alloc_77 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_78 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_78 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_77 : memref<1x32x40x40xf32>) outs(%alloc_78 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_79 = memref.expand_shape %alloc_78 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_80 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_79 : memref<1x32x40x1xf32>) outs(%alloc_80 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_81 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_77, %alloc_80 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_81 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_82 = memref.collapse_shape %alloc_81 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_83 = memref.collapse_shape %alloc_38 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_84 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_84 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_82, %collapse_shape_83 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_84 : memref<32x40x128xf32>)
    %expand_shape_85 = memref.expand_shape %alloc_84 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_86 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_85 : memref<1x32x40x128xf32>) outs(%alloc_86 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_87 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%347 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_87 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_88 = memref.collapse_shape %alloc_86 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_89 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_89 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_88, %alloc_87 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_89 : memref<40x4096xf32>)
    %expand_shape_90 = memref.expand_shape %alloc_89 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_91 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2, %expand_shape_90 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_91 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_92 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_91 : memref<1x40x4096xf32>) outs(%alloc_92 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_93 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_93 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_92 : memref<1x40x4096xf32>) outs(%alloc_93 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_94 = memref.expand_shape %alloc_93 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_95 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_95 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_96 = memref.expand_shape %alloc_95 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_97 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_96, %expand_shape_94 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_97 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_98 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_97, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_98 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_99 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_98 : memref<1x40x1xf32>) outs(%alloc_99 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_100 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_91, %alloc_99 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_100 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_101 = memref.expand_shape %346 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_102 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_101, %alloc_100 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_102 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_103 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%345 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_103 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_104 = memref.collapse_shape %alloc_102 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_105 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_105 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_104, %alloc_103 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_105 : memref<40x11008xf32>)
    %expand_shape_106 = memref.expand_shape %alloc_105 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_107 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_106 : memref<1x40x11008xf32>) outs(%alloc_107 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_108 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_106, %alloc_107 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_108 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_109 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%344 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_109 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_110 = memref.collapse_shape %alloc_102 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_111 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_111 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_110, %alloc_109 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_111 : memref<40x11008xf32>)
    %expand_shape_112 = memref.expand_shape %alloc_111 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_113 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_108, %expand_shape_112 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_113 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_114 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%343 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_114 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_115 = memref.collapse_shape %alloc_113 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_116 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_116 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_115, %alloc_114 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_116 : memref<40x4096xf32>)
    %expand_shape_117 = memref.expand_shape %alloc_116 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_118 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_91, %expand_shape_117 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_118 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_119 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_118 : memref<1x40x4096xf32>) outs(%alloc_119 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_120 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_120 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_119 : memref<1x40x4096xf32>) outs(%alloc_120 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_121 = memref.expand_shape %alloc_120 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_122 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_122 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_123 = memref.expand_shape %alloc_122 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_124 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_123, %expand_shape_121 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_124 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_125 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_124, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_125 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_126 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_125 : memref<1x40x1xf32>) outs(%alloc_126 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_127 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_118, %alloc_126 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_127 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_128 = memref.expand_shape %342 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_129 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_128, %alloc_127 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_129 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_130 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%341 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_130 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_131 = memref.collapse_shape %alloc_129 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_132 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_132 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_131, %alloc_130 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_132 : memref<40x4096xf32>)
    %alloc_133 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%340 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_133 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_134 = memref.collapse_shape %alloc_129 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_135 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_135 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_134, %alloc_133 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_135 : memref<40x4096xf32>)
    %alloc_136 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%339 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_136 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_137 = memref.collapse_shape %alloc_129 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_138 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_138 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_137, %alloc_136 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_138 : memref<40x4096xf32>)
    %expand_shape_139 = memref.expand_shape %alloc_132 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_140 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_139 : memref<1x40x32x128xf32>) outs(%alloc_140 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_141 = memref.expand_shape %alloc_135 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_142 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_141 : memref<1x40x32x128xf32>) outs(%alloc_142 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_143 = memref.expand_shape %alloc_138 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_144 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_143 : memref<1x40x32x128xf32>) outs(%alloc_144 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_145 = memref.subview %338[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_146 = memref.subview %337[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_147 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_145 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_147 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_148 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_147 : memref<1x40x128xf32>) outs(%alloc_148 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_149 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_146 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_149 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_150 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_149 : memref<1x40x128xf32>) outs(%alloc_150 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_151 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_151 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_148[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_152 = memref.expand_shape %alloc_151 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_153 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_153 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_150[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_154 = memref.expand_shape %alloc_153 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_155 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_140, %expand_shape_152 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_155 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_156 = memref.subview %alloc_140[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_157 = memref.subview %alloc_140[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_158 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_157 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_158 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_159 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_160 = memref.subview %alloc_159[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_158, %subview_160 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_161 = memref.subview %alloc_159[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_156, %subview_161 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_162 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_159, %expand_shape_154 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_162 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_163 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_155, %alloc_162 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_163 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_164 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_142, %expand_shape_152 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_164 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_165 = memref.subview %alloc_142[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_166 = memref.subview %alloc_142[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_167 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_166 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_167 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_168 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_169 = memref.subview %alloc_168[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_167, %subview_169 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_170 = memref.subview %alloc_168[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_165, %subview_170 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_171 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_168, %expand_shape_154 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_171 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_172 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_164, %alloc_171 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_172 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_173 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_172 : memref<1x32x40x128xf32>) outs(%alloc_173 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_174 = memref.collapse_shape %alloc_163 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_175 = memref.collapse_shape %alloc_173 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_176 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_176 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_174, %collapse_shape_175 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_176 : memref<32x40x40xf32>)
    %expand_shape_177 = memref.expand_shape %alloc_176 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_178 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_178 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_179 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_177, %alloc_178 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_179 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_180 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_179, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_180 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_181 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_181 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_180 : memref<1x32x40x40xf32>) outs(%alloc_181 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_182 = memref.expand_shape %alloc_181 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_183 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_180, %expand_shape_182 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_183 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_184 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_183 : memref<1x32x40x40xf32>) outs(%alloc_184 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_185 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_185 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_184 : memref<1x32x40x40xf32>) outs(%alloc_185 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_186 = memref.expand_shape %alloc_185 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_187 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_186 : memref<1x32x40x1xf32>) outs(%alloc_187 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_188 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_184, %alloc_187 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_188 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_189 = memref.collapse_shape %alloc_188 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_190 = memref.collapse_shape %alloc_144 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_191 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_191 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_189, %collapse_shape_190 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_191 : memref<32x40x128xf32>)
    %expand_shape_192 = memref.expand_shape %alloc_191 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_193 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_192 : memref<1x32x40x128xf32>) outs(%alloc_193 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_194 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%336 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_194 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_195 = memref.collapse_shape %alloc_193 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_196 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_196 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_195, %alloc_194 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_196 : memref<40x4096xf32>)
    %expand_shape_197 = memref.expand_shape %alloc_196 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_198 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_118, %expand_shape_197 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_198 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_199 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_198 : memref<1x40x4096xf32>) outs(%alloc_199 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_200 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_200 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_199 : memref<1x40x4096xf32>) outs(%alloc_200 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_201 = memref.expand_shape %alloc_200 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_202 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_202 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_203 = memref.expand_shape %alloc_202 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_204 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_203, %expand_shape_201 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_204 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_205 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_204, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_205 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_206 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_205 : memref<1x40x1xf32>) outs(%alloc_206 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_207 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_198, %alloc_206 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_207 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_208 = memref.expand_shape %335 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_209 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_208, %alloc_207 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_209 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_210 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%334 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_210 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_211 = memref.collapse_shape %alloc_209 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_212 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_212 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_211, %alloc_210 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_212 : memref<40x11008xf32>)
    %expand_shape_213 = memref.expand_shape %alloc_212 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_214 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_213 : memref<1x40x11008xf32>) outs(%alloc_214 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_215 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_213, %alloc_214 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_215 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_216 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%333 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_216 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_217 = memref.collapse_shape %alloc_209 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_218 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_218 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_217, %alloc_216 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_218 : memref<40x11008xf32>)
    %expand_shape_219 = memref.expand_shape %alloc_218 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_220 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_215, %expand_shape_219 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_220 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_221 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%332 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_221 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_222 = memref.collapse_shape %alloc_220 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_223 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_223 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_222, %alloc_221 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_223 : memref<40x4096xf32>)
    %expand_shape_224 = memref.expand_shape %alloc_223 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_225 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_198, %expand_shape_224 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_225 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_226 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_225 : memref<1x40x4096xf32>) outs(%alloc_226 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_227 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_227 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_226 : memref<1x40x4096xf32>) outs(%alloc_227 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_228 = memref.expand_shape %alloc_227 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_229 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_229 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_230 = memref.expand_shape %alloc_229 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_231 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_230, %expand_shape_228 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_231 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_232 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_231, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_232 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_233 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_232 : memref<1x40x1xf32>) outs(%alloc_233 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_234 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_225, %alloc_233 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_234 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_235 = memref.expand_shape %331 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_236 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_235, %alloc_234 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_236 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_237 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%330 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_237 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_238 = memref.collapse_shape %alloc_236 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_239 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_239 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_238, %alloc_237 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_239 : memref<40x4096xf32>)
    %alloc_240 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%329 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_240 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_241 = memref.collapse_shape %alloc_236 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_242 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_242 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_241, %alloc_240 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_242 : memref<40x4096xf32>)
    %alloc_243 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%328 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_243 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_244 = memref.collapse_shape %alloc_236 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_245 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_245 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_244, %alloc_243 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_245 : memref<40x4096xf32>)
    %expand_shape_246 = memref.expand_shape %alloc_239 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_247 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_246 : memref<1x40x32x128xf32>) outs(%alloc_247 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_248 = memref.expand_shape %alloc_242 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_249 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_248 : memref<1x40x32x128xf32>) outs(%alloc_249 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_250 = memref.expand_shape %alloc_245 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_251 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_250 : memref<1x40x32x128xf32>) outs(%alloc_251 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_252 = memref.subview %327[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_253 = memref.subview %326[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_254 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_252 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_254 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_255 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_254 : memref<1x40x128xf32>) outs(%alloc_255 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_256 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_253 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_256 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_257 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_256 : memref<1x40x128xf32>) outs(%alloc_257 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_258 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_258 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_255[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_259 = memref.expand_shape %alloc_258 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_260 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_260 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_257[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_261 = memref.expand_shape %alloc_260 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_262 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_247, %expand_shape_259 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_262 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_263 = memref.subview %alloc_247[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_264 = memref.subview %alloc_247[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_265 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_264 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_265 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_266 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_267 = memref.subview %alloc_266[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_265, %subview_267 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_268 = memref.subview %alloc_266[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_263, %subview_268 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_269 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_266, %expand_shape_261 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_269 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_270 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_262, %alloc_269 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_270 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_271 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_249, %expand_shape_259 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_271 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_272 = memref.subview %alloc_249[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_273 = memref.subview %alloc_249[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_274 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_273 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_274 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_275 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_276 = memref.subview %alloc_275[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_274, %subview_276 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_277 = memref.subview %alloc_275[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_272, %subview_277 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_278 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_275, %expand_shape_261 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_278 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_279 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_271, %alloc_278 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_279 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_280 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_279 : memref<1x32x40x128xf32>) outs(%alloc_280 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_281 = memref.collapse_shape %alloc_270 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_282 = memref.collapse_shape %alloc_280 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_283 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_283 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_281, %collapse_shape_282 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_283 : memref<32x40x40xf32>)
    %expand_shape_284 = memref.expand_shape %alloc_283 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_285 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_285 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_286 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_284, %alloc_285 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_286 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_287 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_286, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_287 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_288 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_288 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_287 : memref<1x32x40x40xf32>) outs(%alloc_288 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_289 = memref.expand_shape %alloc_288 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_290 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_287, %expand_shape_289 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_290 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_291 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_290 : memref<1x32x40x40xf32>) outs(%alloc_291 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_292 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_292 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_291 : memref<1x32x40x40xf32>) outs(%alloc_292 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_293 = memref.expand_shape %alloc_292 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_294 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_293 : memref<1x32x40x1xf32>) outs(%alloc_294 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_295 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_291, %alloc_294 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_295 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_296 = memref.collapse_shape %alloc_295 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_297 = memref.collapse_shape %alloc_251 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_298 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_298 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_296, %collapse_shape_297 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_298 : memref<32x40x128xf32>)
    %expand_shape_299 = memref.expand_shape %alloc_298 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_300 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_299 : memref<1x32x40x128xf32>) outs(%alloc_300 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_301 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%325 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_301 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_302 = memref.collapse_shape %alloc_300 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_303 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_303 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_302, %alloc_301 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_303 : memref<40x4096xf32>)
    %expand_shape_304 = memref.expand_shape %alloc_303 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_305 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_225, %expand_shape_304 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_305 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_306 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_305 : memref<1x40x4096xf32>) outs(%alloc_306 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_307 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_307 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_306 : memref<1x40x4096xf32>) outs(%alloc_307 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_308 = memref.expand_shape %alloc_307 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_309 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_309 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_310 = memref.expand_shape %alloc_309 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_311 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_310, %expand_shape_308 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_311 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_312 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_311, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_312 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_313 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_312 : memref<1x40x1xf32>) outs(%alloc_313 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_314 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_305, %alloc_313 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_314 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_315 = memref.expand_shape %324 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_316 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_315, %alloc_314 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_316 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_317 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%323 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_317 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_318 = memref.collapse_shape %alloc_316 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_319 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_319 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_318, %alloc_317 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_319 : memref<40x11008xf32>)
    %expand_shape_320 = memref.expand_shape %alloc_319 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_321 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_320 : memref<1x40x11008xf32>) outs(%alloc_321 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_322 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_320, %alloc_321 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_322 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_323 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%322 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_323 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_324 = memref.collapse_shape %alloc_316 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_325 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_325 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_324, %alloc_323 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_325 : memref<40x11008xf32>)
    %expand_shape_326 = memref.expand_shape %alloc_325 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_327 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_322, %expand_shape_326 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_327 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_328 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%321 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_328 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_329 = memref.collapse_shape %alloc_327 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_330 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_330 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_329, %alloc_328 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_330 : memref<40x4096xf32>)
    %expand_shape_331 = memref.expand_shape %alloc_330 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_332 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_305, %expand_shape_331 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_332 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_333 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_332 : memref<1x40x4096xf32>) outs(%alloc_333 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_334 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_334 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_333 : memref<1x40x4096xf32>) outs(%alloc_334 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_335 = memref.expand_shape %alloc_334 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_336 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_336 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_337 = memref.expand_shape %alloc_336 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_338 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_337, %expand_shape_335 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_338 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_339 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_338, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_339 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_340 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_339 : memref<1x40x1xf32>) outs(%alloc_340 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_341 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_332, %alloc_340 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_341 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_342 = memref.expand_shape %320 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_343 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_342, %alloc_341 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_343 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_344 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%319 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_344 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_345 = memref.collapse_shape %alloc_343 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_346 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_346 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_345, %alloc_344 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_346 : memref<40x4096xf32>)
    %alloc_347 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%318 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_347 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_348 = memref.collapse_shape %alloc_343 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_349 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_349 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_348, %alloc_347 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_349 : memref<40x4096xf32>)
    %alloc_350 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%317 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_350 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_351 = memref.collapse_shape %alloc_343 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_352 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_352 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_351, %alloc_350 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_352 : memref<40x4096xf32>)
    %expand_shape_353 = memref.expand_shape %alloc_346 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_354 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_353 : memref<1x40x32x128xf32>) outs(%alloc_354 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_355 = memref.expand_shape %alloc_349 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_356 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_355 : memref<1x40x32x128xf32>) outs(%alloc_356 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_357 = memref.expand_shape %alloc_352 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_358 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_357 : memref<1x40x32x128xf32>) outs(%alloc_358 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_359 = memref.subview %316[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_360 = memref.subview %315[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_361 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_359 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_361 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_362 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_361 : memref<1x40x128xf32>) outs(%alloc_362 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_363 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_360 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_363 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_364 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_363 : memref<1x40x128xf32>) outs(%alloc_364 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_365 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_365 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_362[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_366 = memref.expand_shape %alloc_365 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_367 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_367 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_364[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_368 = memref.expand_shape %alloc_367 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_369 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_354, %expand_shape_366 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_369 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_370 = memref.subview %alloc_354[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_371 = memref.subview %alloc_354[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_372 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_371 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_372 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_373 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_374 = memref.subview %alloc_373[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_372, %subview_374 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_375 = memref.subview %alloc_373[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_370, %subview_375 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_376 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_373, %expand_shape_368 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_376 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_377 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_369, %alloc_376 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_377 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_378 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_356, %expand_shape_366 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_378 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_379 = memref.subview %alloc_356[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_380 = memref.subview %alloc_356[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_381 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_380 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_381 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_382 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_383 = memref.subview %alloc_382[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_381, %subview_383 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_384 = memref.subview %alloc_382[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_379, %subview_384 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_385 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_382, %expand_shape_368 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_385 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_386 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_378, %alloc_385 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_386 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_387 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_386 : memref<1x32x40x128xf32>) outs(%alloc_387 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_388 = memref.collapse_shape %alloc_377 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_389 = memref.collapse_shape %alloc_387 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_390 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_390 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_388, %collapse_shape_389 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_390 : memref<32x40x40xf32>)
    %expand_shape_391 = memref.expand_shape %alloc_390 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_392 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_392 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_393 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_391, %alloc_392 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_393 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_394 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_393, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_394 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_395 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_395 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_394 : memref<1x32x40x40xf32>) outs(%alloc_395 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_396 = memref.expand_shape %alloc_395 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_397 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_394, %expand_shape_396 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_397 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_398 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_397 : memref<1x32x40x40xf32>) outs(%alloc_398 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_399 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_399 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_398 : memref<1x32x40x40xf32>) outs(%alloc_399 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_400 = memref.expand_shape %alloc_399 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_401 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_400 : memref<1x32x40x1xf32>) outs(%alloc_401 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_402 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_398, %alloc_401 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_402 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_403 = memref.collapse_shape %alloc_402 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_404 = memref.collapse_shape %alloc_358 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_405 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_405 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_403, %collapse_shape_404 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_405 : memref<32x40x128xf32>)
    %expand_shape_406 = memref.expand_shape %alloc_405 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_407 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_406 : memref<1x32x40x128xf32>) outs(%alloc_407 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_408 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%314 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_408 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_409 = memref.collapse_shape %alloc_407 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_410 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_410 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_409, %alloc_408 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_410 : memref<40x4096xf32>)
    %expand_shape_411 = memref.expand_shape %alloc_410 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_412 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_332, %expand_shape_411 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_412 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_413 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_412 : memref<1x40x4096xf32>) outs(%alloc_413 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_414 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_414 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_413 : memref<1x40x4096xf32>) outs(%alloc_414 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_415 = memref.expand_shape %alloc_414 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_416 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_416 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_417 = memref.expand_shape %alloc_416 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_418 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_417, %expand_shape_415 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_418 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_419 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_418, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_419 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_420 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_419 : memref<1x40x1xf32>) outs(%alloc_420 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_421 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_412, %alloc_420 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_421 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_422 = memref.expand_shape %313 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_423 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_422, %alloc_421 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_423 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_424 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%312 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_424 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_425 = memref.collapse_shape %alloc_423 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_426 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_426 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_425, %alloc_424 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_426 : memref<40x11008xf32>)
    %expand_shape_427 = memref.expand_shape %alloc_426 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_428 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_427 : memref<1x40x11008xf32>) outs(%alloc_428 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_429 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_427, %alloc_428 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_429 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_430 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%311 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_430 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_431 = memref.collapse_shape %alloc_423 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_432 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_432 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_431, %alloc_430 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_432 : memref<40x11008xf32>)
    %expand_shape_433 = memref.expand_shape %alloc_432 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_434 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_429, %expand_shape_433 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_434 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_435 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%310 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_435 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_436 = memref.collapse_shape %alloc_434 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_437 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_437 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_436, %alloc_435 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_437 : memref<40x4096xf32>)
    %expand_shape_438 = memref.expand_shape %alloc_437 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_439 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_412, %expand_shape_438 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_439 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_440 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_439 : memref<1x40x4096xf32>) outs(%alloc_440 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_441 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_441 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_440 : memref<1x40x4096xf32>) outs(%alloc_441 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_442 = memref.expand_shape %alloc_441 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_443 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_443 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_444 = memref.expand_shape %alloc_443 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_445 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_444, %expand_shape_442 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_445 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_446 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_445, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_446 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_447 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_446 : memref<1x40x1xf32>) outs(%alloc_447 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_448 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_439, %alloc_447 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_448 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_449 = memref.expand_shape %309 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_450 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_449, %alloc_448 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_450 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_451 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%308 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_451 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_452 = memref.collapse_shape %alloc_450 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_453 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_453 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_452, %alloc_451 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_453 : memref<40x4096xf32>)
    %alloc_454 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%307 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_454 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_455 = memref.collapse_shape %alloc_450 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_456 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_456 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_455, %alloc_454 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_456 : memref<40x4096xf32>)
    %alloc_457 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%306 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_457 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_458 = memref.collapse_shape %alloc_450 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_459 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_459 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_458, %alloc_457 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_459 : memref<40x4096xf32>)
    %expand_shape_460 = memref.expand_shape %alloc_453 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_461 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_460 : memref<1x40x32x128xf32>) outs(%alloc_461 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_462 = memref.expand_shape %alloc_456 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_463 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_462 : memref<1x40x32x128xf32>) outs(%alloc_463 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_464 = memref.expand_shape %alloc_459 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_465 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_464 : memref<1x40x32x128xf32>) outs(%alloc_465 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_466 = memref.subview %305[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_467 = memref.subview %304[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_468 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_466 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_468 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_469 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_468 : memref<1x40x128xf32>) outs(%alloc_469 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_470 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_467 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_470 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_471 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_470 : memref<1x40x128xf32>) outs(%alloc_471 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_472 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_472 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_469[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_473 = memref.expand_shape %alloc_472 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_474 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_474 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_471[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_475 = memref.expand_shape %alloc_474 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_476 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_461, %expand_shape_473 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_476 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_477 = memref.subview %alloc_461[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_478 = memref.subview %alloc_461[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_479 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_478 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_479 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_480 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_481 = memref.subview %alloc_480[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_479, %subview_481 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_482 = memref.subview %alloc_480[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_477, %subview_482 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_483 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_480, %expand_shape_475 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_483 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_484 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_476, %alloc_483 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_484 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_485 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_463, %expand_shape_473 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_485 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_486 = memref.subview %alloc_463[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_487 = memref.subview %alloc_463[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_488 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_487 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_488 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_489 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_490 = memref.subview %alloc_489[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_488, %subview_490 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_491 = memref.subview %alloc_489[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_486, %subview_491 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_492 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_489, %expand_shape_475 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_492 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_493 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_485, %alloc_492 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_493 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_494 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_493 : memref<1x32x40x128xf32>) outs(%alloc_494 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_495 = memref.collapse_shape %alloc_484 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_496 = memref.collapse_shape %alloc_494 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_497 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_497 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_495, %collapse_shape_496 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_497 : memref<32x40x40xf32>)
    %expand_shape_498 = memref.expand_shape %alloc_497 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_499 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_499 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_500 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_498, %alloc_499 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_500 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_501 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_500, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_501 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_502 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_502 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_501 : memref<1x32x40x40xf32>) outs(%alloc_502 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_503 = memref.expand_shape %alloc_502 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_504 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_501, %expand_shape_503 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_504 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_505 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_504 : memref<1x32x40x40xf32>) outs(%alloc_505 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_506 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_506 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_505 : memref<1x32x40x40xf32>) outs(%alloc_506 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_507 = memref.expand_shape %alloc_506 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_508 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_507 : memref<1x32x40x1xf32>) outs(%alloc_508 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_509 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_505, %alloc_508 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_509 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_510 = memref.collapse_shape %alloc_509 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_511 = memref.collapse_shape %alloc_465 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_512 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_512 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_510, %collapse_shape_511 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_512 : memref<32x40x128xf32>)
    %expand_shape_513 = memref.expand_shape %alloc_512 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_514 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_513 : memref<1x32x40x128xf32>) outs(%alloc_514 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_515 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%303 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_515 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_516 = memref.collapse_shape %alloc_514 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_517 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_517 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_516, %alloc_515 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_517 : memref<40x4096xf32>)
    %expand_shape_518 = memref.expand_shape %alloc_517 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_519 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_439, %expand_shape_518 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_519 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_520 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_519 : memref<1x40x4096xf32>) outs(%alloc_520 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_521 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_521 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_520 : memref<1x40x4096xf32>) outs(%alloc_521 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_522 = memref.expand_shape %alloc_521 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_523 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_523 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_524 = memref.expand_shape %alloc_523 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_525 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_524, %expand_shape_522 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_525 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_526 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_525, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_526 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_527 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_526 : memref<1x40x1xf32>) outs(%alloc_527 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_528 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_519, %alloc_527 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_528 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_529 = memref.expand_shape %302 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_530 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_529, %alloc_528 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_530 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_531 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%301 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_531 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_532 = memref.collapse_shape %alloc_530 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_533 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_533 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_532, %alloc_531 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_533 : memref<40x11008xf32>)
    %expand_shape_534 = memref.expand_shape %alloc_533 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_535 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_534 : memref<1x40x11008xf32>) outs(%alloc_535 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_536 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_534, %alloc_535 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_536 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_537 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%300 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_537 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_538 = memref.collapse_shape %alloc_530 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_539 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_539 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_538, %alloc_537 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_539 : memref<40x11008xf32>)
    %expand_shape_540 = memref.expand_shape %alloc_539 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_541 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_536, %expand_shape_540 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_541 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_542 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%299 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_542 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_543 = memref.collapse_shape %alloc_541 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_544 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_544 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_543, %alloc_542 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_544 : memref<40x4096xf32>)
    %expand_shape_545 = memref.expand_shape %alloc_544 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_546 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_519, %expand_shape_545 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_546 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_547 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_546 : memref<1x40x4096xf32>) outs(%alloc_547 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_548 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_548 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_547 : memref<1x40x4096xf32>) outs(%alloc_548 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_549 = memref.expand_shape %alloc_548 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_550 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_550 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_551 = memref.expand_shape %alloc_550 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_552 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_551, %expand_shape_549 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_552 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_553 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_552, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_553 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_554 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_553 : memref<1x40x1xf32>) outs(%alloc_554 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_555 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_546, %alloc_554 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_555 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_556 = memref.expand_shape %298 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_557 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_556, %alloc_555 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_557 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_558 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%297 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_558 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_559 = memref.collapse_shape %alloc_557 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_560 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_560 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_559, %alloc_558 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_560 : memref<40x4096xf32>)
    %alloc_561 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%296 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_561 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_562 = memref.collapse_shape %alloc_557 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_563 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_563 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_562, %alloc_561 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_563 : memref<40x4096xf32>)
    %alloc_564 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%295 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_564 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_565 = memref.collapse_shape %alloc_557 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_566 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_566 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_565, %alloc_564 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_566 : memref<40x4096xf32>)
    %expand_shape_567 = memref.expand_shape %alloc_560 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_568 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_567 : memref<1x40x32x128xf32>) outs(%alloc_568 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_569 = memref.expand_shape %alloc_563 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_570 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_569 : memref<1x40x32x128xf32>) outs(%alloc_570 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_571 = memref.expand_shape %alloc_566 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_572 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_571 : memref<1x40x32x128xf32>) outs(%alloc_572 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_573 = memref.subview %294[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_574 = memref.subview %293[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_575 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_573 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_575 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_576 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_575 : memref<1x40x128xf32>) outs(%alloc_576 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_577 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_574 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_577 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_578 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_577 : memref<1x40x128xf32>) outs(%alloc_578 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_579 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_579 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_576[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_580 = memref.expand_shape %alloc_579 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_581 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_581 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_578[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_582 = memref.expand_shape %alloc_581 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_583 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_568, %expand_shape_580 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_583 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_584 = memref.subview %alloc_568[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_585 = memref.subview %alloc_568[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_586 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_585 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_586 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_587 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_588 = memref.subview %alloc_587[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_586, %subview_588 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_589 = memref.subview %alloc_587[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_584, %subview_589 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_590 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_587, %expand_shape_582 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_590 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_591 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_583, %alloc_590 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_591 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_592 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_570, %expand_shape_580 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_592 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_593 = memref.subview %alloc_570[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_594 = memref.subview %alloc_570[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_595 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_594 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_595 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_596 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_597 = memref.subview %alloc_596[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_595, %subview_597 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_598 = memref.subview %alloc_596[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_593, %subview_598 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_599 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_596, %expand_shape_582 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_599 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_600 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_592, %alloc_599 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_600 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_601 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_600 : memref<1x32x40x128xf32>) outs(%alloc_601 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_602 = memref.collapse_shape %alloc_591 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_603 = memref.collapse_shape %alloc_601 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_604 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_604 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_602, %collapse_shape_603 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_604 : memref<32x40x40xf32>)
    %expand_shape_605 = memref.expand_shape %alloc_604 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_606 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_606 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_607 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_605, %alloc_606 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_607 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_608 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_607, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_608 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_609 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_609 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_608 : memref<1x32x40x40xf32>) outs(%alloc_609 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_610 = memref.expand_shape %alloc_609 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_611 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_608, %expand_shape_610 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_611 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_612 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_611 : memref<1x32x40x40xf32>) outs(%alloc_612 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_613 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_613 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_612 : memref<1x32x40x40xf32>) outs(%alloc_613 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_614 = memref.expand_shape %alloc_613 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_615 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_614 : memref<1x32x40x1xf32>) outs(%alloc_615 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_616 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_612, %alloc_615 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_616 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_617 = memref.collapse_shape %alloc_616 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_618 = memref.collapse_shape %alloc_572 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_619 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_619 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_617, %collapse_shape_618 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_619 : memref<32x40x128xf32>)
    %expand_shape_620 = memref.expand_shape %alloc_619 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_621 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_620 : memref<1x32x40x128xf32>) outs(%alloc_621 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_622 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%292 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_622 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_623 = memref.collapse_shape %alloc_621 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_624 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_624 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_623, %alloc_622 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_624 : memref<40x4096xf32>)
    %expand_shape_625 = memref.expand_shape %alloc_624 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_626 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_546, %expand_shape_625 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_626 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_627 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_626 : memref<1x40x4096xf32>) outs(%alloc_627 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_628 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_628 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_627 : memref<1x40x4096xf32>) outs(%alloc_628 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_629 = memref.expand_shape %alloc_628 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_630 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_630 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_631 = memref.expand_shape %alloc_630 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_632 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_631, %expand_shape_629 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_632 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_633 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_632, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_633 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_634 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_633 : memref<1x40x1xf32>) outs(%alloc_634 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_635 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_626, %alloc_634 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_635 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_636 = memref.expand_shape %291 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_637 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_636, %alloc_635 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_637 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_638 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%290 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_638 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_639 = memref.collapse_shape %alloc_637 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_640 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_640 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_639, %alloc_638 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_640 : memref<40x11008xf32>)
    %expand_shape_641 = memref.expand_shape %alloc_640 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_642 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_641 : memref<1x40x11008xf32>) outs(%alloc_642 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_643 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_641, %alloc_642 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_643 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_644 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%289 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_644 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_645 = memref.collapse_shape %alloc_637 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_646 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_646 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_645, %alloc_644 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_646 : memref<40x11008xf32>)
    %expand_shape_647 = memref.expand_shape %alloc_646 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_648 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_643, %expand_shape_647 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_648 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_649 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%288 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_649 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_650 = memref.collapse_shape %alloc_648 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_651 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_651 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_650, %alloc_649 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_651 : memref<40x4096xf32>)
    %expand_shape_652 = memref.expand_shape %alloc_651 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_653 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_626, %expand_shape_652 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_653 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_654 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_653 : memref<1x40x4096xf32>) outs(%alloc_654 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_655 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_655 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_654 : memref<1x40x4096xf32>) outs(%alloc_655 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_656 = memref.expand_shape %alloc_655 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_657 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_657 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_658 = memref.expand_shape %alloc_657 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_659 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_658, %expand_shape_656 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_659 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_660 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_659, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_660 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_661 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_660 : memref<1x40x1xf32>) outs(%alloc_661 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_662 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_653, %alloc_661 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_662 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_663 = memref.expand_shape %287 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_664 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_663, %alloc_662 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_664 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_665 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%286 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_665 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_666 = memref.collapse_shape %alloc_664 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_667 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_667 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_666, %alloc_665 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_667 : memref<40x4096xf32>)
    %alloc_668 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%285 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_668 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_669 = memref.collapse_shape %alloc_664 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_670 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_670 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_669, %alloc_668 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_670 : memref<40x4096xf32>)
    %alloc_671 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%284 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_671 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_672 = memref.collapse_shape %alloc_664 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_673 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_673 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_672, %alloc_671 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_673 : memref<40x4096xf32>)
    %expand_shape_674 = memref.expand_shape %alloc_667 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_675 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_674 : memref<1x40x32x128xf32>) outs(%alloc_675 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_676 = memref.expand_shape %alloc_670 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_677 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_676 : memref<1x40x32x128xf32>) outs(%alloc_677 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_678 = memref.expand_shape %alloc_673 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_679 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_678 : memref<1x40x32x128xf32>) outs(%alloc_679 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_680 = memref.subview %283[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_681 = memref.subview %282[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_682 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_680 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_682 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_683 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_682 : memref<1x40x128xf32>) outs(%alloc_683 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_684 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_681 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_684 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_685 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_684 : memref<1x40x128xf32>) outs(%alloc_685 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_686 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_686 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_683[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_687 = memref.expand_shape %alloc_686 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_688 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_688 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_685[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_689 = memref.expand_shape %alloc_688 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_690 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_675, %expand_shape_687 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_690 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_691 = memref.subview %alloc_675[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_692 = memref.subview %alloc_675[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_693 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_692 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_693 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_694 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_695 = memref.subview %alloc_694[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_693, %subview_695 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_696 = memref.subview %alloc_694[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_691, %subview_696 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_697 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_694, %expand_shape_689 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_697 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_698 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_690, %alloc_697 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_698 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_699 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_677, %expand_shape_687 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_699 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_700 = memref.subview %alloc_677[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_701 = memref.subview %alloc_677[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_702 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_701 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_702 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_703 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_704 = memref.subview %alloc_703[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_702, %subview_704 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_705 = memref.subview %alloc_703[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_700, %subview_705 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_706 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_703, %expand_shape_689 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_706 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_707 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_699, %alloc_706 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_707 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_708 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_707 : memref<1x32x40x128xf32>) outs(%alloc_708 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_709 = memref.collapse_shape %alloc_698 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_710 = memref.collapse_shape %alloc_708 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_711 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_711 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_709, %collapse_shape_710 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_711 : memref<32x40x40xf32>)
    %expand_shape_712 = memref.expand_shape %alloc_711 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_713 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_713 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_714 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_712, %alloc_713 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_714 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_715 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_714, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_715 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_716 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_716 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_715 : memref<1x32x40x40xf32>) outs(%alloc_716 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_717 = memref.expand_shape %alloc_716 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_718 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_715, %expand_shape_717 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_718 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_719 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_718 : memref<1x32x40x40xf32>) outs(%alloc_719 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_720 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_720 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_719 : memref<1x32x40x40xf32>) outs(%alloc_720 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_721 = memref.expand_shape %alloc_720 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_722 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_721 : memref<1x32x40x1xf32>) outs(%alloc_722 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_723 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_719, %alloc_722 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_723 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_724 = memref.collapse_shape %alloc_723 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_725 = memref.collapse_shape %alloc_679 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_726 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_726 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_724, %collapse_shape_725 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_726 : memref<32x40x128xf32>)
    %expand_shape_727 = memref.expand_shape %alloc_726 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_728 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_727 : memref<1x32x40x128xf32>) outs(%alloc_728 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_729 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%281 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_729 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_730 = memref.collapse_shape %alloc_728 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_731 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_731 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_730, %alloc_729 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_731 : memref<40x4096xf32>)
    %expand_shape_732 = memref.expand_shape %alloc_731 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_733 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_653, %expand_shape_732 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_733 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_734 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_733 : memref<1x40x4096xf32>) outs(%alloc_734 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_735 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_735 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_734 : memref<1x40x4096xf32>) outs(%alloc_735 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_736 = memref.expand_shape %alloc_735 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_737 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_737 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_738 = memref.expand_shape %alloc_737 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_739 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_738, %expand_shape_736 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_739 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_740 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_739, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_740 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_741 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_740 : memref<1x40x1xf32>) outs(%alloc_741 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_742 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_733, %alloc_741 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_742 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_743 = memref.expand_shape %280 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_744 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_743, %alloc_742 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_744 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_745 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%279 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_745 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_746 = memref.collapse_shape %alloc_744 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_747 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_747 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_746, %alloc_745 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_747 : memref<40x11008xf32>)
    %expand_shape_748 = memref.expand_shape %alloc_747 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_749 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_748 : memref<1x40x11008xf32>) outs(%alloc_749 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_750 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_748, %alloc_749 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_750 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_751 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%278 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_751 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_752 = memref.collapse_shape %alloc_744 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_753 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_753 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_752, %alloc_751 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_753 : memref<40x11008xf32>)
    %expand_shape_754 = memref.expand_shape %alloc_753 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_755 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_750, %expand_shape_754 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_755 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_756 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%277 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_756 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_757 = memref.collapse_shape %alloc_755 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_758 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_758 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_757, %alloc_756 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_758 : memref<40x4096xf32>)
    %expand_shape_759 = memref.expand_shape %alloc_758 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_760 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_733, %expand_shape_759 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_760 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_761 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_760 : memref<1x40x4096xf32>) outs(%alloc_761 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_762 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_762 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_761 : memref<1x40x4096xf32>) outs(%alloc_762 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_763 = memref.expand_shape %alloc_762 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_764 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_764 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_765 = memref.expand_shape %alloc_764 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_766 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_765, %expand_shape_763 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_766 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_767 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_766, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_767 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_768 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_767 : memref<1x40x1xf32>) outs(%alloc_768 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_769 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_760, %alloc_768 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_769 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_770 = memref.expand_shape %276 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_771 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_770, %alloc_769 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_771 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_772 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%275 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_772 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_773 = memref.collapse_shape %alloc_771 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_774 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_774 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_773, %alloc_772 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_774 : memref<40x4096xf32>)
    %alloc_775 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%274 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_775 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_776 = memref.collapse_shape %alloc_771 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_777 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_777 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_776, %alloc_775 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_777 : memref<40x4096xf32>)
    %alloc_778 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%273 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_778 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_779 = memref.collapse_shape %alloc_771 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_780 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_780 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_779, %alloc_778 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_780 : memref<40x4096xf32>)
    %expand_shape_781 = memref.expand_shape %alloc_774 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_782 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_781 : memref<1x40x32x128xf32>) outs(%alloc_782 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_783 = memref.expand_shape %alloc_777 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_784 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_783 : memref<1x40x32x128xf32>) outs(%alloc_784 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_785 = memref.expand_shape %alloc_780 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_786 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_785 : memref<1x40x32x128xf32>) outs(%alloc_786 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_787 = memref.subview %272[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_788 = memref.subview %271[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_789 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_787 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_789 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_790 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_789 : memref<1x40x128xf32>) outs(%alloc_790 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_791 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_788 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_791 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_792 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_791 : memref<1x40x128xf32>) outs(%alloc_792 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_793 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_793 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_790[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_794 = memref.expand_shape %alloc_793 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_795 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_795 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_792[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_796 = memref.expand_shape %alloc_795 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_797 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_782, %expand_shape_794 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_797 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_798 = memref.subview %alloc_782[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_799 = memref.subview %alloc_782[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_800 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_799 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_800 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_801 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_802 = memref.subview %alloc_801[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_800, %subview_802 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_803 = memref.subview %alloc_801[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_798, %subview_803 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_804 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_801, %expand_shape_796 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_804 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_805 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_797, %alloc_804 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_805 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_806 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_784, %expand_shape_794 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_806 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_807 = memref.subview %alloc_784[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_808 = memref.subview %alloc_784[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_809 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_808 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_809 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_810 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_811 = memref.subview %alloc_810[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_809, %subview_811 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_812 = memref.subview %alloc_810[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_807, %subview_812 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_813 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_810, %expand_shape_796 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_813 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_814 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_806, %alloc_813 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_814 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_815 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_814 : memref<1x32x40x128xf32>) outs(%alloc_815 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_816 = memref.collapse_shape %alloc_805 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_817 = memref.collapse_shape %alloc_815 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_818 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_818 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_816, %collapse_shape_817 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_818 : memref<32x40x40xf32>)
    %expand_shape_819 = memref.expand_shape %alloc_818 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_820 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_820 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_821 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_819, %alloc_820 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_821 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_822 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_821, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_822 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_823 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_823 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_822 : memref<1x32x40x40xf32>) outs(%alloc_823 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_824 = memref.expand_shape %alloc_823 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_825 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_822, %expand_shape_824 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_825 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_826 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_825 : memref<1x32x40x40xf32>) outs(%alloc_826 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_827 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_827 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_826 : memref<1x32x40x40xf32>) outs(%alloc_827 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_828 = memref.expand_shape %alloc_827 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_829 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_828 : memref<1x32x40x1xf32>) outs(%alloc_829 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_830 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_826, %alloc_829 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_830 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_831 = memref.collapse_shape %alloc_830 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_832 = memref.collapse_shape %alloc_786 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_833 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_833 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_831, %collapse_shape_832 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_833 : memref<32x40x128xf32>)
    %expand_shape_834 = memref.expand_shape %alloc_833 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_835 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_834 : memref<1x32x40x128xf32>) outs(%alloc_835 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_836 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%270 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_836 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_837 = memref.collapse_shape %alloc_835 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_838 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_838 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_837, %alloc_836 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_838 : memref<40x4096xf32>)
    %expand_shape_839 = memref.expand_shape %alloc_838 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_840 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_760, %expand_shape_839 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_840 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_841 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_840 : memref<1x40x4096xf32>) outs(%alloc_841 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_842 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_842 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_841 : memref<1x40x4096xf32>) outs(%alloc_842 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_843 = memref.expand_shape %alloc_842 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_844 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_844 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_845 = memref.expand_shape %alloc_844 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_846 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_845, %expand_shape_843 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_846 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_847 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_846, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_847 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_848 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_847 : memref<1x40x1xf32>) outs(%alloc_848 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_849 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_840, %alloc_848 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_849 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_850 = memref.expand_shape %269 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_851 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_850, %alloc_849 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_851 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_852 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%268 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_852 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_853 = memref.collapse_shape %alloc_851 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_854 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_854 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_853, %alloc_852 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_854 : memref<40x11008xf32>)
    %expand_shape_855 = memref.expand_shape %alloc_854 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_856 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_855 : memref<1x40x11008xf32>) outs(%alloc_856 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_857 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_855, %alloc_856 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_857 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_858 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%267 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_858 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_859 = memref.collapse_shape %alloc_851 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_860 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_860 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_859, %alloc_858 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_860 : memref<40x11008xf32>)
    %expand_shape_861 = memref.expand_shape %alloc_860 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_862 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_857, %expand_shape_861 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_862 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_863 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%266 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_863 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_864 = memref.collapse_shape %alloc_862 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_865 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_865 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_864, %alloc_863 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_865 : memref<40x4096xf32>)
    %expand_shape_866 = memref.expand_shape %alloc_865 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_867 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_840, %expand_shape_866 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_867 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_868 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_867 : memref<1x40x4096xf32>) outs(%alloc_868 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_869 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_869 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_868 : memref<1x40x4096xf32>) outs(%alloc_869 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_870 = memref.expand_shape %alloc_869 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_871 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_871 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_872 = memref.expand_shape %alloc_871 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_873 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_872, %expand_shape_870 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_873 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_874 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_873, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_874 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_875 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_874 : memref<1x40x1xf32>) outs(%alloc_875 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_876 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_867, %alloc_875 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_876 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_877 = memref.expand_shape %265 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_878 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_877, %alloc_876 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_878 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_879 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%264 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_879 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_880 = memref.collapse_shape %alloc_878 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_881 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_881 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_880, %alloc_879 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_881 : memref<40x4096xf32>)
    %alloc_882 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%263 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_882 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_883 = memref.collapse_shape %alloc_878 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_884 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_884 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_883, %alloc_882 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_884 : memref<40x4096xf32>)
    %alloc_885 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%262 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_885 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_886 = memref.collapse_shape %alloc_878 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_887 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_887 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_886, %alloc_885 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_887 : memref<40x4096xf32>)
    %expand_shape_888 = memref.expand_shape %alloc_881 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_889 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_888 : memref<1x40x32x128xf32>) outs(%alloc_889 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_890 = memref.expand_shape %alloc_884 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_891 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_890 : memref<1x40x32x128xf32>) outs(%alloc_891 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_892 = memref.expand_shape %alloc_887 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_893 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_892 : memref<1x40x32x128xf32>) outs(%alloc_893 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_894 = memref.subview %261[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_895 = memref.subview %260[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_896 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_894 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_896 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_897 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_896 : memref<1x40x128xf32>) outs(%alloc_897 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_898 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_895 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_898 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_899 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_898 : memref<1x40x128xf32>) outs(%alloc_899 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_900 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_900 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_897[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_901 = memref.expand_shape %alloc_900 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_902 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_902 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_899[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_903 = memref.expand_shape %alloc_902 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_904 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_889, %expand_shape_901 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_904 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_905 = memref.subview %alloc_889[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_906 = memref.subview %alloc_889[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_907 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_906 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_907 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_908 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_909 = memref.subview %alloc_908[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_907, %subview_909 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_910 = memref.subview %alloc_908[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_905, %subview_910 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_911 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_908, %expand_shape_903 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_911 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_912 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_904, %alloc_911 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_912 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_913 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_891, %expand_shape_901 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_913 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_914 = memref.subview %alloc_891[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_915 = memref.subview %alloc_891[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_916 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_915 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_916 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_917 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_918 = memref.subview %alloc_917[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_916, %subview_918 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_919 = memref.subview %alloc_917[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_914, %subview_919 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_920 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_917, %expand_shape_903 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_920 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_921 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_913, %alloc_920 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_921 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_922 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_921 : memref<1x32x40x128xf32>) outs(%alloc_922 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_923 = memref.collapse_shape %alloc_912 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_924 = memref.collapse_shape %alloc_922 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_925 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_925 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_923, %collapse_shape_924 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_925 : memref<32x40x40xf32>)
    %expand_shape_926 = memref.expand_shape %alloc_925 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_927 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_927 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_928 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_926, %alloc_927 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_928 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_929 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_928, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_929 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_930 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_930 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_929 : memref<1x32x40x40xf32>) outs(%alloc_930 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_931 = memref.expand_shape %alloc_930 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_932 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_929, %expand_shape_931 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_932 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_933 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_932 : memref<1x32x40x40xf32>) outs(%alloc_933 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_934 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_934 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_933 : memref<1x32x40x40xf32>) outs(%alloc_934 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_935 = memref.expand_shape %alloc_934 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_936 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_935 : memref<1x32x40x1xf32>) outs(%alloc_936 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_937 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_933, %alloc_936 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_937 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_938 = memref.collapse_shape %alloc_937 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_939 = memref.collapse_shape %alloc_893 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_940 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_940 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_938, %collapse_shape_939 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_940 : memref<32x40x128xf32>)
    %expand_shape_941 = memref.expand_shape %alloc_940 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_942 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_941 : memref<1x32x40x128xf32>) outs(%alloc_942 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_943 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%259 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_943 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_944 = memref.collapse_shape %alloc_942 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_945 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_945 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_944, %alloc_943 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_945 : memref<40x4096xf32>)
    %expand_shape_946 = memref.expand_shape %alloc_945 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_947 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_867, %expand_shape_946 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_947 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_948 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_947 : memref<1x40x4096xf32>) outs(%alloc_948 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_949 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_949 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_948 : memref<1x40x4096xf32>) outs(%alloc_949 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_950 = memref.expand_shape %alloc_949 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_951 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_951 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_952 = memref.expand_shape %alloc_951 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_953 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_952, %expand_shape_950 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_953 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_954 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_953, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_954 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_955 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_954 : memref<1x40x1xf32>) outs(%alloc_955 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_956 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_947, %alloc_955 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_956 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_957 = memref.expand_shape %258 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_958 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_957, %alloc_956 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_958 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_959 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%257 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_959 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_960 = memref.collapse_shape %alloc_958 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_961 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_961 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_960, %alloc_959 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_961 : memref<40x11008xf32>)
    %expand_shape_962 = memref.expand_shape %alloc_961 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_963 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_962 : memref<1x40x11008xf32>) outs(%alloc_963 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_964 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_962, %alloc_963 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_964 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_965 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%256 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_965 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_966 = memref.collapse_shape %alloc_958 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_967 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_967 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_966, %alloc_965 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_967 : memref<40x11008xf32>)
    %expand_shape_968 = memref.expand_shape %alloc_967 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_969 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_964, %expand_shape_968 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_969 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_970 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%255 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_970 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_971 = memref.collapse_shape %alloc_969 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_972 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_972 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_971, %alloc_970 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_972 : memref<40x4096xf32>)
    %expand_shape_973 = memref.expand_shape %alloc_972 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_974 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_947, %expand_shape_973 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_974 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_975 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_974 : memref<1x40x4096xf32>) outs(%alloc_975 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_976 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_976 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_975 : memref<1x40x4096xf32>) outs(%alloc_976 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_977 = memref.expand_shape %alloc_976 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_978 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_978 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_979 = memref.expand_shape %alloc_978 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_980 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_979, %expand_shape_977 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_980 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_981 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_980, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_981 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_982 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_981 : memref<1x40x1xf32>) outs(%alloc_982 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_983 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_974, %alloc_982 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_983 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_984 = memref.expand_shape %254 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_985 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_984, %alloc_983 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_985 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_986 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%253 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_986 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_987 = memref.collapse_shape %alloc_985 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_988 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_988 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_987, %alloc_986 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_988 : memref<40x4096xf32>)
    %alloc_989 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%252 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_989 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_990 = memref.collapse_shape %alloc_985 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_991 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_991 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_990, %alloc_989 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_991 : memref<40x4096xf32>)
    %alloc_992 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%251 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_992 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_993 = memref.collapse_shape %alloc_985 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_994 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_994 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_993, %alloc_992 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_994 : memref<40x4096xf32>)
    %expand_shape_995 = memref.expand_shape %alloc_988 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_996 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_995 : memref<1x40x32x128xf32>) outs(%alloc_996 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_997 = memref.expand_shape %alloc_991 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_998 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_997 : memref<1x40x32x128xf32>) outs(%alloc_998 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_999 = memref.expand_shape %alloc_994 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1000 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_999 : memref<1x40x32x128xf32>) outs(%alloc_1000 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_1001 = memref.subview %250[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_1002 = memref.subview %249[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_1003 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1001 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1003 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1004 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1003 : memref<1x40x128xf32>) outs(%alloc_1004 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1005 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1002 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1005 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1006 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1005 : memref<1x40x128xf32>) outs(%alloc_1006 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1007 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1007 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1004[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1008 = memref.expand_shape %alloc_1007 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1009 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1009 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1006[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1010 = memref.expand_shape %alloc_1009 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1011 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_996, %expand_shape_1008 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1011 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1012 = memref.subview %alloc_996[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1013 = memref.subview %alloc_996[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1014 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1013 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1014 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1015 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1016 = memref.subview %alloc_1015[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1014, %subview_1016 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1017 = memref.subview %alloc_1015[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1012, %subview_1017 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1018 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1015, %expand_shape_1010 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1018 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1019 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1011, %alloc_1018 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1019 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1020 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_998, %expand_shape_1008 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1020 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1021 = memref.subview %alloc_998[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1022 = memref.subview %alloc_998[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1023 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1022 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1023 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1024 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1025 = memref.subview %alloc_1024[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1023, %subview_1025 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1026 = memref.subview %alloc_1024[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1021, %subview_1026 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1027 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1024, %expand_shape_1010 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1027 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1028 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1020, %alloc_1027 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1028 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1029 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1028 : memref<1x32x40x128xf32>) outs(%alloc_1029 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1030 = memref.collapse_shape %alloc_1019 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_1031 = memref.collapse_shape %alloc_1029 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_1032 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1032 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_1030, %collapse_shape_1031 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_1032 : memref<32x40x40xf32>)
    %expand_shape_1033 = memref.expand_shape %alloc_1032 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_1034 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_1034 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1035 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1033, %alloc_1034 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_1035 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1036 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1035, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_1036 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1037 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_1037 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1036 : memref<1x32x40x40xf32>) outs(%alloc_1037 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_1038 = memref.expand_shape %alloc_1037 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1039 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1036, %expand_shape_1038 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1039 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1040 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1039 : memref<1x32x40x40xf32>) outs(%alloc_1040 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1041 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1041 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1040 : memref<1x32x40x40xf32>) outs(%alloc_1041 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1042 = memref.expand_shape %alloc_1041 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1043 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1042 : memref<1x32x40x1xf32>) outs(%alloc_1043 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1044 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1040, %alloc_1043 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1044 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_1045 = memref.collapse_shape %alloc_1044 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_1046 = memref.collapse_shape %alloc_1000 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_1047 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1047 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_1045, %collapse_shape_1046 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_1047 : memref<32x40x128xf32>)
    %expand_shape_1048 = memref.expand_shape %alloc_1047 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_1049 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1048 : memref<1x32x40x128xf32>) outs(%alloc_1049 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1050 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%248 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1050 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1051 = memref.collapse_shape %alloc_1049 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_1052 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1052 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1051, %alloc_1050 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1052 : memref<40x4096xf32>)
    %expand_shape_1053 = memref.expand_shape %alloc_1052 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1054 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_974, %expand_shape_1053 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1054 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1055 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1054 : memref<1x40x4096xf32>) outs(%alloc_1055 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1056 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1056 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1055 : memref<1x40x4096xf32>) outs(%alloc_1056 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1057 = memref.expand_shape %alloc_1056 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1058 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1058 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1059 = memref.expand_shape %alloc_1058 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1060 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1059, %expand_shape_1057 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1060 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1061 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1060, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1061 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1062 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1061 : memref<1x40x1xf32>) outs(%alloc_1062 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1063 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1054, %alloc_1062 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1063 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1064 = memref.expand_shape %247 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1065 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1064, %alloc_1063 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1065 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1066 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%246 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1066 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1067 = memref.collapse_shape %alloc_1065 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1068 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1068 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1067, %alloc_1066 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1068 : memref<40x11008xf32>)
    %expand_shape_1069 = memref.expand_shape %alloc_1068 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1070 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1069 : memref<1x40x11008xf32>) outs(%alloc_1070 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_1071 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1069, %alloc_1070 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1071 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1072 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%245 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1072 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1073 = memref.collapse_shape %alloc_1065 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1074 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1074 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1073, %alloc_1072 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1074 : memref<40x11008xf32>)
    %expand_shape_1075 = memref.expand_shape %alloc_1074 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1076 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1071, %expand_shape_1075 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1076 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1077 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%244 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1077 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1078 = memref.collapse_shape %alloc_1076 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_1079 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1079 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1078, %alloc_1077 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_1079 : memref<40x4096xf32>)
    %expand_shape_1080 = memref.expand_shape %alloc_1079 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1081 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1054, %expand_shape_1080 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1081 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1082 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1081 : memref<1x40x4096xf32>) outs(%alloc_1082 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1083 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1083 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1082 : memref<1x40x4096xf32>) outs(%alloc_1083 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1084 = memref.expand_shape %alloc_1083 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1085 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1085 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1086 = memref.expand_shape %alloc_1085 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1087 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1086, %expand_shape_1084 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1087 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1088 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1087, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1088 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1089 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1088 : memref<1x40x1xf32>) outs(%alloc_1089 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1090 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1081, %alloc_1089 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1090 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1091 = memref.expand_shape %243 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1092 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1091, %alloc_1090 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1092 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1093 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%242 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1093 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1094 = memref.collapse_shape %alloc_1092 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1095 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1095 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1094, %alloc_1093 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1095 : memref<40x4096xf32>)
    %alloc_1096 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%241 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1096 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1097 = memref.collapse_shape %alloc_1092 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1098 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1098 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1097, %alloc_1096 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1098 : memref<40x4096xf32>)
    %alloc_1099 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%240 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1099 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1100 = memref.collapse_shape %alloc_1092 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1101 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1101 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1100, %alloc_1099 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1101 : memref<40x4096xf32>)
    %expand_shape_1102 = memref.expand_shape %alloc_1095 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1103 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1102 : memref<1x40x32x128xf32>) outs(%alloc_1103 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1104 = memref.expand_shape %alloc_1098 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1105 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1104 : memref<1x40x32x128xf32>) outs(%alloc_1105 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1106 = memref.expand_shape %alloc_1101 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1107 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1106 : memref<1x40x32x128xf32>) outs(%alloc_1107 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_1108 = memref.subview %239[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_1109 = memref.subview %238[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_1110 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1108 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1110 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1111 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1110 : memref<1x40x128xf32>) outs(%alloc_1111 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1112 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1109 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1112 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1113 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1112 : memref<1x40x128xf32>) outs(%alloc_1113 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1114 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1114 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1111[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1115 = memref.expand_shape %alloc_1114 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1116 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1116 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1113[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1117 = memref.expand_shape %alloc_1116 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1118 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1103, %expand_shape_1115 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1118 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1119 = memref.subview %alloc_1103[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1120 = memref.subview %alloc_1103[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1121 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1120 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1121 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1122 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1123 = memref.subview %alloc_1122[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1121, %subview_1123 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1124 = memref.subview %alloc_1122[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1119, %subview_1124 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1125 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1122, %expand_shape_1117 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1125 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1126 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1118, %alloc_1125 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1126 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1127 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1105, %expand_shape_1115 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1127 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1128 = memref.subview %alloc_1105[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1129 = memref.subview %alloc_1105[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1130 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1129 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1130 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1131 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1132 = memref.subview %alloc_1131[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1130, %subview_1132 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1133 = memref.subview %alloc_1131[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1128, %subview_1133 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1134 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1131, %expand_shape_1117 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1134 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1135 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1127, %alloc_1134 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1135 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1136 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1135 : memref<1x32x40x128xf32>) outs(%alloc_1136 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1137 = memref.collapse_shape %alloc_1126 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_1138 = memref.collapse_shape %alloc_1136 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_1139 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1139 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_1137, %collapse_shape_1138 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_1139 : memref<32x40x40xf32>)
    %expand_shape_1140 = memref.expand_shape %alloc_1139 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_1141 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_1141 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1142 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1140, %alloc_1141 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_1142 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1143 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1142, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_1143 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1144 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_1144 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1143 : memref<1x32x40x40xf32>) outs(%alloc_1144 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_1145 = memref.expand_shape %alloc_1144 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1146 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1143, %expand_shape_1145 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1146 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1147 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1146 : memref<1x32x40x40xf32>) outs(%alloc_1147 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1148 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1148 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1147 : memref<1x32x40x40xf32>) outs(%alloc_1148 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1149 = memref.expand_shape %alloc_1148 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1150 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1149 : memref<1x32x40x1xf32>) outs(%alloc_1150 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1151 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1147, %alloc_1150 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1151 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_1152 = memref.collapse_shape %alloc_1151 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_1153 = memref.collapse_shape %alloc_1107 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_1154 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1154 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_1152, %collapse_shape_1153 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_1154 : memref<32x40x128xf32>)
    %expand_shape_1155 = memref.expand_shape %alloc_1154 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_1156 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1155 : memref<1x32x40x128xf32>) outs(%alloc_1156 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1157 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%237 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1157 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1158 = memref.collapse_shape %alloc_1156 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_1159 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1159 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1158, %alloc_1157 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1159 : memref<40x4096xf32>)
    %expand_shape_1160 = memref.expand_shape %alloc_1159 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1161 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1081, %expand_shape_1160 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1161 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1162 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1161 : memref<1x40x4096xf32>) outs(%alloc_1162 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1163 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1163 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1162 : memref<1x40x4096xf32>) outs(%alloc_1163 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1164 = memref.expand_shape %alloc_1163 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1165 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1165 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1166 = memref.expand_shape %alloc_1165 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1167 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1166, %expand_shape_1164 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1167 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1168 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1167, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1168 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1169 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1168 : memref<1x40x1xf32>) outs(%alloc_1169 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1170 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1161, %alloc_1169 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1170 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1171 = memref.expand_shape %236 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1172 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1171, %alloc_1170 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1172 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1173 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%235 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1173 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1174 = memref.collapse_shape %alloc_1172 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1175 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1175 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1174, %alloc_1173 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1175 : memref<40x11008xf32>)
    %expand_shape_1176 = memref.expand_shape %alloc_1175 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1177 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1176 : memref<1x40x11008xf32>) outs(%alloc_1177 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_1178 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1176, %alloc_1177 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1178 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1179 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%234 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1179 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1180 = memref.collapse_shape %alloc_1172 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1181 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1181 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1180, %alloc_1179 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1181 : memref<40x11008xf32>)
    %expand_shape_1182 = memref.expand_shape %alloc_1181 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1183 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1178, %expand_shape_1182 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1183 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1184 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%233 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1184 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1185 = memref.collapse_shape %alloc_1183 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_1186 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1186 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1185, %alloc_1184 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_1186 : memref<40x4096xf32>)
    %expand_shape_1187 = memref.expand_shape %alloc_1186 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1188 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1161, %expand_shape_1187 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1188 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1189 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1188 : memref<1x40x4096xf32>) outs(%alloc_1189 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1190 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1190 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1189 : memref<1x40x4096xf32>) outs(%alloc_1190 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1191 = memref.expand_shape %alloc_1190 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1192 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1192 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1193 = memref.expand_shape %alloc_1192 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1194 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1193, %expand_shape_1191 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1194 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1195 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1194, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1195 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1196 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1195 : memref<1x40x1xf32>) outs(%alloc_1196 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1197 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1188, %alloc_1196 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1197 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1198 = memref.expand_shape %232 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1199 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1198, %alloc_1197 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1199 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1200 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%231 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1200 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1201 = memref.collapse_shape %alloc_1199 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1202 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1202 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1201, %alloc_1200 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1202 : memref<40x4096xf32>)
    %alloc_1203 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%230 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1203 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1204 = memref.collapse_shape %alloc_1199 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1205 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1205 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1204, %alloc_1203 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1205 : memref<40x4096xf32>)
    %alloc_1206 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%229 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1206 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1207 = memref.collapse_shape %alloc_1199 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1208 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1208 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1207, %alloc_1206 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1208 : memref<40x4096xf32>)
    %expand_shape_1209 = memref.expand_shape %alloc_1202 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1210 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1209 : memref<1x40x32x128xf32>) outs(%alloc_1210 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1211 = memref.expand_shape %alloc_1205 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1212 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1211 : memref<1x40x32x128xf32>) outs(%alloc_1212 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1213 = memref.expand_shape %alloc_1208 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1214 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1213 : memref<1x40x32x128xf32>) outs(%alloc_1214 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_1215 = memref.subview %228[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_1216 = memref.subview %227[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_1217 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1215 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1217 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1218 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1217 : memref<1x40x128xf32>) outs(%alloc_1218 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1219 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1216 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1219 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1220 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1219 : memref<1x40x128xf32>) outs(%alloc_1220 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1221 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1221 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1218[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1222 = memref.expand_shape %alloc_1221 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1223 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1223 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1220[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1224 = memref.expand_shape %alloc_1223 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1225 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1210, %expand_shape_1222 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1225 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1226 = memref.subview %alloc_1210[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1227 = memref.subview %alloc_1210[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1228 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1227 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1228 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1229 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1230 = memref.subview %alloc_1229[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1228, %subview_1230 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1231 = memref.subview %alloc_1229[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1226, %subview_1231 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1232 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1229, %expand_shape_1224 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1232 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1233 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1225, %alloc_1232 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1233 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1234 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1212, %expand_shape_1222 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1234 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1235 = memref.subview %alloc_1212[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1236 = memref.subview %alloc_1212[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1237 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1236 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1237 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1238 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1239 = memref.subview %alloc_1238[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1237, %subview_1239 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1240 = memref.subview %alloc_1238[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1235, %subview_1240 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1241 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1238, %expand_shape_1224 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1241 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1242 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1234, %alloc_1241 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1242 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1243 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1242 : memref<1x32x40x128xf32>) outs(%alloc_1243 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1244 = memref.collapse_shape %alloc_1233 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_1245 = memref.collapse_shape %alloc_1243 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_1246 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1246 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_1244, %collapse_shape_1245 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_1246 : memref<32x40x40xf32>)
    %expand_shape_1247 = memref.expand_shape %alloc_1246 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_1248 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_1248 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1249 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1247, %alloc_1248 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_1249 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1250 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1249, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_1250 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1251 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_1251 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1250 : memref<1x32x40x40xf32>) outs(%alloc_1251 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_1252 = memref.expand_shape %alloc_1251 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1253 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1250, %expand_shape_1252 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1253 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1254 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1253 : memref<1x32x40x40xf32>) outs(%alloc_1254 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1255 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1255 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1254 : memref<1x32x40x40xf32>) outs(%alloc_1255 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1256 = memref.expand_shape %alloc_1255 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1257 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1256 : memref<1x32x40x1xf32>) outs(%alloc_1257 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1258 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1254, %alloc_1257 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1258 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_1259 = memref.collapse_shape %alloc_1258 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_1260 = memref.collapse_shape %alloc_1214 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_1261 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1261 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_1259, %collapse_shape_1260 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_1261 : memref<32x40x128xf32>)
    %expand_shape_1262 = memref.expand_shape %alloc_1261 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_1263 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1262 : memref<1x32x40x128xf32>) outs(%alloc_1263 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1264 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%226 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1264 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1265 = memref.collapse_shape %alloc_1263 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_1266 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1266 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1265, %alloc_1264 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1266 : memref<40x4096xf32>)
    %expand_shape_1267 = memref.expand_shape %alloc_1266 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1268 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1188, %expand_shape_1267 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1268 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1269 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1268 : memref<1x40x4096xf32>) outs(%alloc_1269 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1270 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1270 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1269 : memref<1x40x4096xf32>) outs(%alloc_1270 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1271 = memref.expand_shape %alloc_1270 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1272 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1272 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1273 = memref.expand_shape %alloc_1272 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1274 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1273, %expand_shape_1271 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1274 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1275 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1274, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1275 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1276 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1275 : memref<1x40x1xf32>) outs(%alloc_1276 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1277 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1268, %alloc_1276 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1277 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1278 = memref.expand_shape %225 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1279 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1278, %alloc_1277 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1279 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1280 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%224 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1280 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1281 = memref.collapse_shape %alloc_1279 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1282 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1282 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1281, %alloc_1280 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1282 : memref<40x11008xf32>)
    %expand_shape_1283 = memref.expand_shape %alloc_1282 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1284 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1283 : memref<1x40x11008xf32>) outs(%alloc_1284 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_1285 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1283, %alloc_1284 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1285 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1286 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%223 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1286 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1287 = memref.collapse_shape %alloc_1279 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1288 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1288 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1287, %alloc_1286 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1288 : memref<40x11008xf32>)
    %expand_shape_1289 = memref.expand_shape %alloc_1288 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1290 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1285, %expand_shape_1289 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1290 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1291 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%222 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1291 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1292 = memref.collapse_shape %alloc_1290 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_1293 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1293 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1292, %alloc_1291 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_1293 : memref<40x4096xf32>)
    %expand_shape_1294 = memref.expand_shape %alloc_1293 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1295 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1268, %expand_shape_1294 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1295 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1296 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1295 : memref<1x40x4096xf32>) outs(%alloc_1296 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1297 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1297 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1296 : memref<1x40x4096xf32>) outs(%alloc_1297 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1298 = memref.expand_shape %alloc_1297 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1299 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1299 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1300 = memref.expand_shape %alloc_1299 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1301 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1300, %expand_shape_1298 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1301 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1302 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1301, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1302 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1303 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1302 : memref<1x40x1xf32>) outs(%alloc_1303 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1304 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1295, %alloc_1303 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1304 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1305 = memref.expand_shape %221 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1306 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1305, %alloc_1304 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1306 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1307 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%220 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1307 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1308 = memref.collapse_shape %alloc_1306 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1309 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1309 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1308, %alloc_1307 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1309 : memref<40x4096xf32>)
    %alloc_1310 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%219 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1310 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1311 = memref.collapse_shape %alloc_1306 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1312 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1312 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1311, %alloc_1310 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1312 : memref<40x4096xf32>)
    %alloc_1313 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%218 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1313 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1314 = memref.collapse_shape %alloc_1306 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1315 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1315 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1314, %alloc_1313 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1315 : memref<40x4096xf32>)
    %expand_shape_1316 = memref.expand_shape %alloc_1309 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1317 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1316 : memref<1x40x32x128xf32>) outs(%alloc_1317 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1318 = memref.expand_shape %alloc_1312 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1319 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1318 : memref<1x40x32x128xf32>) outs(%alloc_1319 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1320 = memref.expand_shape %alloc_1315 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1321 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1320 : memref<1x40x32x128xf32>) outs(%alloc_1321 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_1322 = memref.subview %217[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_1323 = memref.subview %216[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_1324 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1322 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1324 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1325 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1324 : memref<1x40x128xf32>) outs(%alloc_1325 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1326 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1323 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1326 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1327 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1326 : memref<1x40x128xf32>) outs(%alloc_1327 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1328 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1328 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1325[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1329 = memref.expand_shape %alloc_1328 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1330 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1330 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1327[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1331 = memref.expand_shape %alloc_1330 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1332 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1317, %expand_shape_1329 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1332 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1333 = memref.subview %alloc_1317[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1334 = memref.subview %alloc_1317[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1335 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1334 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1335 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1336 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1337 = memref.subview %alloc_1336[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1335, %subview_1337 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1338 = memref.subview %alloc_1336[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1333, %subview_1338 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1339 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1336, %expand_shape_1331 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1339 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1340 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1332, %alloc_1339 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1340 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1341 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1319, %expand_shape_1329 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1341 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1342 = memref.subview %alloc_1319[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1343 = memref.subview %alloc_1319[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1344 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1343 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1344 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1345 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1346 = memref.subview %alloc_1345[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1344, %subview_1346 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1347 = memref.subview %alloc_1345[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1342, %subview_1347 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1348 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1345, %expand_shape_1331 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1348 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1349 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1341, %alloc_1348 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1349 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1350 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1349 : memref<1x32x40x128xf32>) outs(%alloc_1350 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1351 = memref.collapse_shape %alloc_1340 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_1352 = memref.collapse_shape %alloc_1350 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_1353 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1353 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_1351, %collapse_shape_1352 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_1353 : memref<32x40x40xf32>)
    %expand_shape_1354 = memref.expand_shape %alloc_1353 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_1355 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_1355 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1356 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1354, %alloc_1355 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_1356 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1357 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1356, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_1357 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1358 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_1358 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1357 : memref<1x32x40x40xf32>) outs(%alloc_1358 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_1359 = memref.expand_shape %alloc_1358 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1360 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1357, %expand_shape_1359 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1360 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1361 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1360 : memref<1x32x40x40xf32>) outs(%alloc_1361 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1362 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1362 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1361 : memref<1x32x40x40xf32>) outs(%alloc_1362 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1363 = memref.expand_shape %alloc_1362 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1364 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1363 : memref<1x32x40x1xf32>) outs(%alloc_1364 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1365 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1361, %alloc_1364 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1365 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_1366 = memref.collapse_shape %alloc_1365 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_1367 = memref.collapse_shape %alloc_1321 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_1368 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1368 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_1366, %collapse_shape_1367 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_1368 : memref<32x40x128xf32>)
    %expand_shape_1369 = memref.expand_shape %alloc_1368 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_1370 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1369 : memref<1x32x40x128xf32>) outs(%alloc_1370 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1371 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%215 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1371 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1372 = memref.collapse_shape %alloc_1370 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_1373 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1373 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1372, %alloc_1371 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1373 : memref<40x4096xf32>)
    %expand_shape_1374 = memref.expand_shape %alloc_1373 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1375 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1295, %expand_shape_1374 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1375 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1376 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1375 : memref<1x40x4096xf32>) outs(%alloc_1376 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1377 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1377 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1376 : memref<1x40x4096xf32>) outs(%alloc_1377 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1378 = memref.expand_shape %alloc_1377 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1379 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1379 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1380 = memref.expand_shape %alloc_1379 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1381 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1380, %expand_shape_1378 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1381 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1382 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1381, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1382 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1383 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1382 : memref<1x40x1xf32>) outs(%alloc_1383 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1384 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1375, %alloc_1383 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1384 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1385 = memref.expand_shape %214 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1386 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1385, %alloc_1384 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1386 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1387 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%213 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1387 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1388 = memref.collapse_shape %alloc_1386 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1389 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1389 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1388, %alloc_1387 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1389 : memref<40x11008xf32>)
    %expand_shape_1390 = memref.expand_shape %alloc_1389 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1391 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1390 : memref<1x40x11008xf32>) outs(%alloc_1391 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_1392 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1390, %alloc_1391 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1392 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1393 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%212 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1393 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1394 = memref.collapse_shape %alloc_1386 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1395 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1395 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1394, %alloc_1393 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1395 : memref<40x11008xf32>)
    %expand_shape_1396 = memref.expand_shape %alloc_1395 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1397 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1392, %expand_shape_1396 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1397 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1398 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%211 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1398 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1399 = memref.collapse_shape %alloc_1397 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_1400 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1400 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1399, %alloc_1398 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_1400 : memref<40x4096xf32>)
    %expand_shape_1401 = memref.expand_shape %alloc_1400 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1402 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1375, %expand_shape_1401 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1402 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1403 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1402 : memref<1x40x4096xf32>) outs(%alloc_1403 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1404 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1404 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1403 : memref<1x40x4096xf32>) outs(%alloc_1404 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1405 = memref.expand_shape %alloc_1404 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1406 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1406 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1407 = memref.expand_shape %alloc_1406 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1408 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1407, %expand_shape_1405 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1408 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1409 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1408, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1409 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1410 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1409 : memref<1x40x1xf32>) outs(%alloc_1410 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1411 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1402, %alloc_1410 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1411 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1412 = memref.expand_shape %210 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1413 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1412, %alloc_1411 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1413 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1414 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%209 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1414 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1415 = memref.collapse_shape %alloc_1413 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1416 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1416 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1415, %alloc_1414 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1416 : memref<40x4096xf32>)
    %alloc_1417 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%208 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1417 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1418 = memref.collapse_shape %alloc_1413 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1419 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1419 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1418, %alloc_1417 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1419 : memref<40x4096xf32>)
    %alloc_1420 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%207 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1420 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1421 = memref.collapse_shape %alloc_1413 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1422 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1422 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1421, %alloc_1420 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1422 : memref<40x4096xf32>)
    %expand_shape_1423 = memref.expand_shape %alloc_1416 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1424 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1423 : memref<1x40x32x128xf32>) outs(%alloc_1424 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1425 = memref.expand_shape %alloc_1419 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1426 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1425 : memref<1x40x32x128xf32>) outs(%alloc_1426 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1427 = memref.expand_shape %alloc_1422 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1428 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1427 : memref<1x40x32x128xf32>) outs(%alloc_1428 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_1429 = memref.subview %206[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_1430 = memref.subview %205[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_1431 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1429 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1431 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1432 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1431 : memref<1x40x128xf32>) outs(%alloc_1432 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1433 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1430 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1433 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1434 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1433 : memref<1x40x128xf32>) outs(%alloc_1434 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1435 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1435 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1432[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1436 = memref.expand_shape %alloc_1435 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1437 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1437 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1434[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1438 = memref.expand_shape %alloc_1437 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1439 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1424, %expand_shape_1436 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1439 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1440 = memref.subview %alloc_1424[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1441 = memref.subview %alloc_1424[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1442 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1441 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1442 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1443 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1444 = memref.subview %alloc_1443[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1442, %subview_1444 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1445 = memref.subview %alloc_1443[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1440, %subview_1445 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1446 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1443, %expand_shape_1438 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1446 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1447 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1439, %alloc_1446 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1447 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1448 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1426, %expand_shape_1436 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1448 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1449 = memref.subview %alloc_1426[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1450 = memref.subview %alloc_1426[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1451 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1450 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1451 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1452 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1453 = memref.subview %alloc_1452[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1451, %subview_1453 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1454 = memref.subview %alloc_1452[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1449, %subview_1454 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1455 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1452, %expand_shape_1438 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1455 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1456 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1448, %alloc_1455 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1456 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1457 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1456 : memref<1x32x40x128xf32>) outs(%alloc_1457 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1458 = memref.collapse_shape %alloc_1447 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_1459 = memref.collapse_shape %alloc_1457 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_1460 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1460 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_1458, %collapse_shape_1459 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_1460 : memref<32x40x40xf32>)
    %expand_shape_1461 = memref.expand_shape %alloc_1460 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_1462 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_1462 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1463 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1461, %alloc_1462 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_1463 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1464 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1463, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_1464 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1465 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_1465 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1464 : memref<1x32x40x40xf32>) outs(%alloc_1465 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_1466 = memref.expand_shape %alloc_1465 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1467 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1464, %expand_shape_1466 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1467 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1468 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1467 : memref<1x32x40x40xf32>) outs(%alloc_1468 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1469 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1469 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1468 : memref<1x32x40x40xf32>) outs(%alloc_1469 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1470 = memref.expand_shape %alloc_1469 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1471 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1470 : memref<1x32x40x1xf32>) outs(%alloc_1471 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1472 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1468, %alloc_1471 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1472 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_1473 = memref.collapse_shape %alloc_1472 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_1474 = memref.collapse_shape %alloc_1428 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_1475 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1475 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_1473, %collapse_shape_1474 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_1475 : memref<32x40x128xf32>)
    %expand_shape_1476 = memref.expand_shape %alloc_1475 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_1477 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1476 : memref<1x32x40x128xf32>) outs(%alloc_1477 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1478 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%204 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1478 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1479 = memref.collapse_shape %alloc_1477 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_1480 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1480 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1479, %alloc_1478 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1480 : memref<40x4096xf32>)
    %expand_shape_1481 = memref.expand_shape %alloc_1480 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1482 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1402, %expand_shape_1481 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1482 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1483 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1482 : memref<1x40x4096xf32>) outs(%alloc_1483 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1484 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1484 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1483 : memref<1x40x4096xf32>) outs(%alloc_1484 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1485 = memref.expand_shape %alloc_1484 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1486 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1486 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1487 = memref.expand_shape %alloc_1486 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1488 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1487, %expand_shape_1485 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1488 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1489 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1488, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1489 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1490 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1489 : memref<1x40x1xf32>) outs(%alloc_1490 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1491 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1482, %alloc_1490 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1491 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1492 = memref.expand_shape %203 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1493 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1492, %alloc_1491 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1493 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1494 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%202 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1494 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1495 = memref.collapse_shape %alloc_1493 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1496 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1496 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1495, %alloc_1494 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1496 : memref<40x11008xf32>)
    %expand_shape_1497 = memref.expand_shape %alloc_1496 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1498 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1497 : memref<1x40x11008xf32>) outs(%alloc_1498 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_1499 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1497, %alloc_1498 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1499 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1500 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%201 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1500 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1501 = memref.collapse_shape %alloc_1493 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1502 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1502 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1501, %alloc_1500 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1502 : memref<40x11008xf32>)
    %expand_shape_1503 = memref.expand_shape %alloc_1502 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1504 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1499, %expand_shape_1503 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1504 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1505 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%200 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1505 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1506 = memref.collapse_shape %alloc_1504 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_1507 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1507 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1506, %alloc_1505 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_1507 : memref<40x4096xf32>)
    %expand_shape_1508 = memref.expand_shape %alloc_1507 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1509 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1482, %expand_shape_1508 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1509 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1510 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1509 : memref<1x40x4096xf32>) outs(%alloc_1510 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1511 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1511 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1510 : memref<1x40x4096xf32>) outs(%alloc_1511 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1512 = memref.expand_shape %alloc_1511 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1513 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1513 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1514 = memref.expand_shape %alloc_1513 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1515 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1514, %expand_shape_1512 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1515 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1516 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1515, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1516 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1517 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1516 : memref<1x40x1xf32>) outs(%alloc_1517 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1518 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1509, %alloc_1517 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1518 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1519 = memref.expand_shape %199 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1520 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1519, %alloc_1518 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1520 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1521 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%198 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1521 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1522 = memref.collapse_shape %alloc_1520 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1523 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1523 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1522, %alloc_1521 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1523 : memref<40x4096xf32>)
    %alloc_1524 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%197 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1524 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1525 = memref.collapse_shape %alloc_1520 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1526 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1526 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1525, %alloc_1524 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1526 : memref<40x4096xf32>)
    %alloc_1527 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%196 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1527 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1528 = memref.collapse_shape %alloc_1520 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1529 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1529 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1528, %alloc_1527 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1529 : memref<40x4096xf32>)
    %expand_shape_1530 = memref.expand_shape %alloc_1523 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1531 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1530 : memref<1x40x32x128xf32>) outs(%alloc_1531 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1532 = memref.expand_shape %alloc_1526 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1533 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1532 : memref<1x40x32x128xf32>) outs(%alloc_1533 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1534 = memref.expand_shape %alloc_1529 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1535 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1534 : memref<1x40x32x128xf32>) outs(%alloc_1535 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_1536 = memref.subview %195[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_1537 = memref.subview %194[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_1538 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1536 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1538 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1539 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1538 : memref<1x40x128xf32>) outs(%alloc_1539 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1540 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1537 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1540 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1541 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1540 : memref<1x40x128xf32>) outs(%alloc_1541 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1542 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1542 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1539[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1543 = memref.expand_shape %alloc_1542 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1544 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1544 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1541[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1545 = memref.expand_shape %alloc_1544 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1546 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1531, %expand_shape_1543 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1546 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1547 = memref.subview %alloc_1531[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1548 = memref.subview %alloc_1531[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1549 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1548 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1549 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1550 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1551 = memref.subview %alloc_1550[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1549, %subview_1551 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1552 = memref.subview %alloc_1550[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1547, %subview_1552 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1553 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1550, %expand_shape_1545 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1553 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1554 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1546, %alloc_1553 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1554 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1555 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1533, %expand_shape_1543 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1555 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1556 = memref.subview %alloc_1533[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1557 = memref.subview %alloc_1533[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1558 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1557 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1558 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1559 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1560 = memref.subview %alloc_1559[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1558, %subview_1560 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1561 = memref.subview %alloc_1559[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1556, %subview_1561 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1562 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1559, %expand_shape_1545 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1562 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1563 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1555, %alloc_1562 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1563 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1564 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1563 : memref<1x32x40x128xf32>) outs(%alloc_1564 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1565 = memref.collapse_shape %alloc_1554 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_1566 = memref.collapse_shape %alloc_1564 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_1567 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1567 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_1565, %collapse_shape_1566 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_1567 : memref<32x40x40xf32>)
    %expand_shape_1568 = memref.expand_shape %alloc_1567 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_1569 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_1569 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1570 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1568, %alloc_1569 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_1570 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1571 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1570, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_1571 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1572 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_1572 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1571 : memref<1x32x40x40xf32>) outs(%alloc_1572 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_1573 = memref.expand_shape %alloc_1572 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1574 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1571, %expand_shape_1573 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1574 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1575 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1574 : memref<1x32x40x40xf32>) outs(%alloc_1575 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1576 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1576 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1575 : memref<1x32x40x40xf32>) outs(%alloc_1576 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1577 = memref.expand_shape %alloc_1576 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1578 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1577 : memref<1x32x40x1xf32>) outs(%alloc_1578 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1579 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1575, %alloc_1578 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1579 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_1580 = memref.collapse_shape %alloc_1579 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_1581 = memref.collapse_shape %alloc_1535 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_1582 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1582 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_1580, %collapse_shape_1581 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_1582 : memref<32x40x128xf32>)
    %expand_shape_1583 = memref.expand_shape %alloc_1582 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_1584 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1583 : memref<1x32x40x128xf32>) outs(%alloc_1584 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1585 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%193 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1585 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1586 = memref.collapse_shape %alloc_1584 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_1587 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1587 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1586, %alloc_1585 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1587 : memref<40x4096xf32>)
    %expand_shape_1588 = memref.expand_shape %alloc_1587 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1589 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1509, %expand_shape_1588 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1589 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1590 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1589 : memref<1x40x4096xf32>) outs(%alloc_1590 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1591 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1591 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1590 : memref<1x40x4096xf32>) outs(%alloc_1591 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1592 = memref.expand_shape %alloc_1591 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1593 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1593 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1594 = memref.expand_shape %alloc_1593 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1595 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1594, %expand_shape_1592 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1595 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1596 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1595, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1596 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1597 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1596 : memref<1x40x1xf32>) outs(%alloc_1597 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1598 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1589, %alloc_1597 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1598 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1599 = memref.expand_shape %192 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1600 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1599, %alloc_1598 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1600 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1601 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%191 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1601 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1602 = memref.collapse_shape %alloc_1600 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1603 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1603 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1602, %alloc_1601 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1603 : memref<40x11008xf32>)
    %expand_shape_1604 = memref.expand_shape %alloc_1603 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1605 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1604 : memref<1x40x11008xf32>) outs(%alloc_1605 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_1606 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1604, %alloc_1605 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1606 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1607 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%190 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1607 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1608 = memref.collapse_shape %alloc_1600 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1609 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1609 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1608, %alloc_1607 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1609 : memref<40x11008xf32>)
    %expand_shape_1610 = memref.expand_shape %alloc_1609 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1611 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1606, %expand_shape_1610 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1611 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1612 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%189 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1612 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1613 = memref.collapse_shape %alloc_1611 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_1614 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1614 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1613, %alloc_1612 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_1614 : memref<40x4096xf32>)
    %expand_shape_1615 = memref.expand_shape %alloc_1614 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1616 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1589, %expand_shape_1615 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1616 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1617 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1616 : memref<1x40x4096xf32>) outs(%alloc_1617 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1618 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1618 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1617 : memref<1x40x4096xf32>) outs(%alloc_1618 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1619 = memref.expand_shape %alloc_1618 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1620 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1620 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1621 = memref.expand_shape %alloc_1620 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1622 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1621, %expand_shape_1619 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1622 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1623 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1622, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1623 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1624 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1623 : memref<1x40x1xf32>) outs(%alloc_1624 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1625 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1616, %alloc_1624 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1625 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1626 = memref.expand_shape %188 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1627 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1626, %alloc_1625 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1627 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1628 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%187 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1628 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1629 = memref.collapse_shape %alloc_1627 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1630 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1630 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1629, %alloc_1628 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1630 : memref<40x4096xf32>)
    %alloc_1631 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%186 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1631 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1632 = memref.collapse_shape %alloc_1627 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1633 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1633 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1632, %alloc_1631 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1633 : memref<40x4096xf32>)
    %alloc_1634 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%185 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1634 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1635 = memref.collapse_shape %alloc_1627 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1636 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1636 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1635, %alloc_1634 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1636 : memref<40x4096xf32>)
    %expand_shape_1637 = memref.expand_shape %alloc_1630 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1638 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1637 : memref<1x40x32x128xf32>) outs(%alloc_1638 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1639 = memref.expand_shape %alloc_1633 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1640 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1639 : memref<1x40x32x128xf32>) outs(%alloc_1640 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1641 = memref.expand_shape %alloc_1636 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1642 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1641 : memref<1x40x32x128xf32>) outs(%alloc_1642 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_1643 = memref.subview %184[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_1644 = memref.subview %183[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_1645 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1643 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1645 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1646 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1645 : memref<1x40x128xf32>) outs(%alloc_1646 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1647 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1644 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1647 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1648 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1647 : memref<1x40x128xf32>) outs(%alloc_1648 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1649 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1649 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1646[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1650 = memref.expand_shape %alloc_1649 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1651 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1651 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1648[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1652 = memref.expand_shape %alloc_1651 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1653 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1638, %expand_shape_1650 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1653 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1654 = memref.subview %alloc_1638[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1655 = memref.subview %alloc_1638[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1656 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1655 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1656 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1657 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1658 = memref.subview %alloc_1657[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1656, %subview_1658 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1659 = memref.subview %alloc_1657[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1654, %subview_1659 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1660 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1657, %expand_shape_1652 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1660 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1661 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1653, %alloc_1660 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1661 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1662 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1640, %expand_shape_1650 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1662 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1663 = memref.subview %alloc_1640[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1664 = memref.subview %alloc_1640[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1665 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1664 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1665 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1666 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1667 = memref.subview %alloc_1666[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1665, %subview_1667 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1668 = memref.subview %alloc_1666[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1663, %subview_1668 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1669 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1666, %expand_shape_1652 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1669 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1670 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1662, %alloc_1669 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1670 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1671 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1670 : memref<1x32x40x128xf32>) outs(%alloc_1671 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1672 = memref.collapse_shape %alloc_1661 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_1673 = memref.collapse_shape %alloc_1671 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_1674 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1674 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_1672, %collapse_shape_1673 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_1674 : memref<32x40x40xf32>)
    %expand_shape_1675 = memref.expand_shape %alloc_1674 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_1676 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_1676 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1677 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1675, %alloc_1676 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_1677 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1678 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1677, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_1678 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1679 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_1679 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1678 : memref<1x32x40x40xf32>) outs(%alloc_1679 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_1680 = memref.expand_shape %alloc_1679 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1681 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1678, %expand_shape_1680 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1681 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1682 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1681 : memref<1x32x40x40xf32>) outs(%alloc_1682 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1683 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1683 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1682 : memref<1x32x40x40xf32>) outs(%alloc_1683 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1684 = memref.expand_shape %alloc_1683 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1685 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1684 : memref<1x32x40x1xf32>) outs(%alloc_1685 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1686 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1682, %alloc_1685 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1686 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_1687 = memref.collapse_shape %alloc_1686 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_1688 = memref.collapse_shape %alloc_1642 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_1689 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1689 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_1687, %collapse_shape_1688 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_1689 : memref<32x40x128xf32>)
    %expand_shape_1690 = memref.expand_shape %alloc_1689 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_1691 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1690 : memref<1x32x40x128xf32>) outs(%alloc_1691 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1692 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%182 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1692 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1693 = memref.collapse_shape %alloc_1691 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_1694 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1694 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1693, %alloc_1692 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1694 : memref<40x4096xf32>)
    %expand_shape_1695 = memref.expand_shape %alloc_1694 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1696 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1616, %expand_shape_1695 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1696 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1697 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1696 : memref<1x40x4096xf32>) outs(%alloc_1697 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1698 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1698 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1697 : memref<1x40x4096xf32>) outs(%alloc_1698 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1699 = memref.expand_shape %alloc_1698 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1700 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1700 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1701 = memref.expand_shape %alloc_1700 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1702 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1701, %expand_shape_1699 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1702 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1703 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1702, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1703 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1704 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1703 : memref<1x40x1xf32>) outs(%alloc_1704 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1705 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1696, %alloc_1704 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1705 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1706 = memref.expand_shape %181 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1707 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1706, %alloc_1705 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1707 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1708 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%180 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1708 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1709 = memref.collapse_shape %alloc_1707 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1710 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1710 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1709, %alloc_1708 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1710 : memref<40x11008xf32>)
    %expand_shape_1711 = memref.expand_shape %alloc_1710 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1712 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1711 : memref<1x40x11008xf32>) outs(%alloc_1712 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_1713 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1711, %alloc_1712 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1713 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1714 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%179 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1714 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1715 = memref.collapse_shape %alloc_1707 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1716 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1716 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1715, %alloc_1714 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1716 : memref<40x11008xf32>)
    %expand_shape_1717 = memref.expand_shape %alloc_1716 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1718 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1713, %expand_shape_1717 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1718 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1719 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%178 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1719 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1720 = memref.collapse_shape %alloc_1718 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_1721 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1721 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1720, %alloc_1719 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_1721 : memref<40x4096xf32>)
    %expand_shape_1722 = memref.expand_shape %alloc_1721 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1723 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1696, %expand_shape_1722 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1723 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1724 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1723 : memref<1x40x4096xf32>) outs(%alloc_1724 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1725 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1725 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1724 : memref<1x40x4096xf32>) outs(%alloc_1725 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1726 = memref.expand_shape %alloc_1725 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1727 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1727 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1728 = memref.expand_shape %alloc_1727 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1729 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1728, %expand_shape_1726 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1729 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1730 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1729, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1730 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1731 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1730 : memref<1x40x1xf32>) outs(%alloc_1731 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1732 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1723, %alloc_1731 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1732 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1733 = memref.expand_shape %177 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1734 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1733, %alloc_1732 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1734 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1735 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%176 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1735 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1736 = memref.collapse_shape %alloc_1734 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1737 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1737 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1736, %alloc_1735 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1737 : memref<40x4096xf32>)
    %alloc_1738 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%175 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1738 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1739 = memref.collapse_shape %alloc_1734 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1740 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1740 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1739, %alloc_1738 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1740 : memref<40x4096xf32>)
    %alloc_1741 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%174 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1741 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1742 = memref.collapse_shape %alloc_1734 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1743 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1743 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1742, %alloc_1741 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1743 : memref<40x4096xf32>)
    %expand_shape_1744 = memref.expand_shape %alloc_1737 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1745 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1744 : memref<1x40x32x128xf32>) outs(%alloc_1745 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1746 = memref.expand_shape %alloc_1740 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1747 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1746 : memref<1x40x32x128xf32>) outs(%alloc_1747 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1748 = memref.expand_shape %alloc_1743 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1749 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1748 : memref<1x40x32x128xf32>) outs(%alloc_1749 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_1750 = memref.subview %173[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_1751 = memref.subview %172[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_1752 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1750 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1752 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1753 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1752 : memref<1x40x128xf32>) outs(%alloc_1753 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1754 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1751 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1754 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1755 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1754 : memref<1x40x128xf32>) outs(%alloc_1755 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1756 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1756 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1753[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1757 = memref.expand_shape %alloc_1756 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1758 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1758 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1755[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1759 = memref.expand_shape %alloc_1758 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1760 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1745, %expand_shape_1757 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1760 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1761 = memref.subview %alloc_1745[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1762 = memref.subview %alloc_1745[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1763 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1762 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1763 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1764 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1765 = memref.subview %alloc_1764[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1763, %subview_1765 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1766 = memref.subview %alloc_1764[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1761, %subview_1766 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1767 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1764, %expand_shape_1759 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1767 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1768 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1760, %alloc_1767 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1768 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1769 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1747, %expand_shape_1757 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1769 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1770 = memref.subview %alloc_1747[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1771 = memref.subview %alloc_1747[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1772 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1771 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1772 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1773 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1774 = memref.subview %alloc_1773[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1772, %subview_1774 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1775 = memref.subview %alloc_1773[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1770, %subview_1775 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1776 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1773, %expand_shape_1759 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1776 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1777 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1769, %alloc_1776 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1777 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1778 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1777 : memref<1x32x40x128xf32>) outs(%alloc_1778 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1779 = memref.collapse_shape %alloc_1768 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_1780 = memref.collapse_shape %alloc_1778 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_1781 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1781 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_1779, %collapse_shape_1780 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_1781 : memref<32x40x40xf32>)
    %expand_shape_1782 = memref.expand_shape %alloc_1781 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_1783 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_1783 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1784 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1782, %alloc_1783 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_1784 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1785 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1784, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_1785 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1786 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_1786 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1785 : memref<1x32x40x40xf32>) outs(%alloc_1786 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_1787 = memref.expand_shape %alloc_1786 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1788 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1785, %expand_shape_1787 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1788 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1789 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1788 : memref<1x32x40x40xf32>) outs(%alloc_1789 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1790 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1790 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1789 : memref<1x32x40x40xf32>) outs(%alloc_1790 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1791 = memref.expand_shape %alloc_1790 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1792 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1791 : memref<1x32x40x1xf32>) outs(%alloc_1792 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1793 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1789, %alloc_1792 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1793 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_1794 = memref.collapse_shape %alloc_1793 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_1795 = memref.collapse_shape %alloc_1749 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_1796 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1796 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_1794, %collapse_shape_1795 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_1796 : memref<32x40x128xf32>)
    %expand_shape_1797 = memref.expand_shape %alloc_1796 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_1798 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1797 : memref<1x32x40x128xf32>) outs(%alloc_1798 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1799 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%171 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1799 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1800 = memref.collapse_shape %alloc_1798 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_1801 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1801 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1800, %alloc_1799 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1801 : memref<40x4096xf32>)
    %expand_shape_1802 = memref.expand_shape %alloc_1801 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1803 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1723, %expand_shape_1802 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1803 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1804 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1803 : memref<1x40x4096xf32>) outs(%alloc_1804 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1805 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1805 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1804 : memref<1x40x4096xf32>) outs(%alloc_1805 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1806 = memref.expand_shape %alloc_1805 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1807 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1807 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1808 = memref.expand_shape %alloc_1807 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1809 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1808, %expand_shape_1806 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1809 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1810 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1809, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1810 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1811 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1810 : memref<1x40x1xf32>) outs(%alloc_1811 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1812 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1803, %alloc_1811 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1812 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1813 = memref.expand_shape %170 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1814 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1813, %alloc_1812 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1814 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1815 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%169 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1815 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1816 = memref.collapse_shape %alloc_1814 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1817 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1817 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1816, %alloc_1815 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1817 : memref<40x11008xf32>)
    %expand_shape_1818 = memref.expand_shape %alloc_1817 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1819 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1818 : memref<1x40x11008xf32>) outs(%alloc_1819 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_1820 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1818, %alloc_1819 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1820 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1821 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%168 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1821 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1822 = memref.collapse_shape %alloc_1814 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1823 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1823 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1822, %alloc_1821 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1823 : memref<40x11008xf32>)
    %expand_shape_1824 = memref.expand_shape %alloc_1823 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1825 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1820, %expand_shape_1824 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1825 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1826 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%167 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1826 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1827 = memref.collapse_shape %alloc_1825 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_1828 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1828 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1827, %alloc_1826 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_1828 : memref<40x4096xf32>)
    %expand_shape_1829 = memref.expand_shape %alloc_1828 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1830 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1803, %expand_shape_1829 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1830 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1831 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1830 : memref<1x40x4096xf32>) outs(%alloc_1831 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1832 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1832 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1831 : memref<1x40x4096xf32>) outs(%alloc_1832 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1833 = memref.expand_shape %alloc_1832 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1834 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1834 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1835 = memref.expand_shape %alloc_1834 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1836 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1835, %expand_shape_1833 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1836 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1837 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1836, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1837 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1838 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1837 : memref<1x40x1xf32>) outs(%alloc_1838 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1839 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1830, %alloc_1838 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1839 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1840 = memref.expand_shape %166 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1841 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1840, %alloc_1839 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1841 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1842 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%165 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1842 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1843 = memref.collapse_shape %alloc_1841 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1844 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1844 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1843, %alloc_1842 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1844 : memref<40x4096xf32>)
    %alloc_1845 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%164 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1845 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1846 = memref.collapse_shape %alloc_1841 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1847 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1847 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1846, %alloc_1845 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1847 : memref<40x4096xf32>)
    %alloc_1848 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%163 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1848 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1849 = memref.collapse_shape %alloc_1841 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1850 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1850 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1849, %alloc_1848 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1850 : memref<40x4096xf32>)
    %expand_shape_1851 = memref.expand_shape %alloc_1844 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1852 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1851 : memref<1x40x32x128xf32>) outs(%alloc_1852 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1853 = memref.expand_shape %alloc_1847 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1854 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1853 : memref<1x40x32x128xf32>) outs(%alloc_1854 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1855 = memref.expand_shape %alloc_1850 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1856 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1855 : memref<1x40x32x128xf32>) outs(%alloc_1856 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_1857 = memref.subview %162[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_1858 = memref.subview %161[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_1859 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1857 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1859 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1860 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1859 : memref<1x40x128xf32>) outs(%alloc_1860 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1861 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1858 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1861 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1862 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1861 : memref<1x40x128xf32>) outs(%alloc_1862 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1863 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1863 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1860[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1864 = memref.expand_shape %alloc_1863 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1865 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1865 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1862[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1866 = memref.expand_shape %alloc_1865 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1867 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1852, %expand_shape_1864 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1867 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1868 = memref.subview %alloc_1852[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1869 = memref.subview %alloc_1852[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1870 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1869 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1870 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1871 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1872 = memref.subview %alloc_1871[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1870, %subview_1872 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1873 = memref.subview %alloc_1871[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1868, %subview_1873 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1874 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1871, %expand_shape_1866 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1874 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1875 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1867, %alloc_1874 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1875 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1876 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1854, %expand_shape_1864 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1876 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1877 = memref.subview %alloc_1854[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1878 = memref.subview %alloc_1854[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1879 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1878 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1879 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1880 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1881 = memref.subview %alloc_1880[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1879, %subview_1881 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1882 = memref.subview %alloc_1880[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1877, %subview_1882 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1883 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1880, %expand_shape_1866 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1883 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1884 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1876, %alloc_1883 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1884 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1885 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1884 : memref<1x32x40x128xf32>) outs(%alloc_1885 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1886 = memref.collapse_shape %alloc_1875 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_1887 = memref.collapse_shape %alloc_1885 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_1888 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1888 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_1886, %collapse_shape_1887 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_1888 : memref<32x40x40xf32>)
    %expand_shape_1889 = memref.expand_shape %alloc_1888 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_1890 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_1890 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1891 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1889, %alloc_1890 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_1891 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1892 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1891, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_1892 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1893 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_1893 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1892 : memref<1x32x40x40xf32>) outs(%alloc_1893 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_1894 = memref.expand_shape %alloc_1893 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1895 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1892, %expand_shape_1894 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1895 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1896 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1895 : memref<1x32x40x40xf32>) outs(%alloc_1896 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1897 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1897 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1896 : memref<1x32x40x40xf32>) outs(%alloc_1897 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1898 = memref.expand_shape %alloc_1897 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_1899 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1898 : memref<1x32x40x1xf32>) outs(%alloc_1899 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1900 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1896, %alloc_1899 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_1900 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_1901 = memref.collapse_shape %alloc_1900 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_1902 = memref.collapse_shape %alloc_1856 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_1903 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1903 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_1901, %collapse_shape_1902 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_1903 : memref<32x40x128xf32>)
    %expand_shape_1904 = memref.expand_shape %alloc_1903 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_1905 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1904 : memref<1x32x40x128xf32>) outs(%alloc_1905 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1906 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%160 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1906 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1907 = memref.collapse_shape %alloc_1905 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_1908 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1908 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1907, %alloc_1906 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1908 : memref<40x4096xf32>)
    %expand_shape_1909 = memref.expand_shape %alloc_1908 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1910 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1830, %expand_shape_1909 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1910 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1911 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1910 : memref<1x40x4096xf32>) outs(%alloc_1911 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1912 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1912 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1911 : memref<1x40x4096xf32>) outs(%alloc_1912 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1913 = memref.expand_shape %alloc_1912 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1914 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1914 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1915 = memref.expand_shape %alloc_1914 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1916 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1915, %expand_shape_1913 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1916 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1917 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1916, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1917 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1918 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1917 : memref<1x40x1xf32>) outs(%alloc_1918 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1919 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1910, %alloc_1918 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1919 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1920 = memref.expand_shape %159 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1921 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1920, %alloc_1919 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1921 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1922 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%158 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1922 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1923 = memref.collapse_shape %alloc_1921 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1924 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1924 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1923, %alloc_1922 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1924 : memref<40x11008xf32>)
    %expand_shape_1925 = memref.expand_shape %alloc_1924 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1926 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1925 : memref<1x40x11008xf32>) outs(%alloc_1926 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_1927 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1925, %alloc_1926 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1927 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1928 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%157 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1928 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1929 = memref.collapse_shape %alloc_1921 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1930 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_1930 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1929, %alloc_1928 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_1930 : memref<40x11008xf32>)
    %expand_shape_1931 = memref.expand_shape %alloc_1930 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_1932 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1927, %expand_shape_1931 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_1932 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1933 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%156 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1933 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1934 = memref.collapse_shape %alloc_1932 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_1935 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1935 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1934, %alloc_1933 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_1935 : memref<40x4096xf32>)
    %expand_shape_1936 = memref.expand_shape %alloc_1935 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_1937 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1910, %expand_shape_1936 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_1937 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1938 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1937 : memref<1x40x4096xf32>) outs(%alloc_1938 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_1939 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1939 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_1938 : memref<1x40x4096xf32>) outs(%alloc_1939 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_1940 = memref.expand_shape %alloc_1939 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_1941 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_1941 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1942 = memref.expand_shape %alloc_1941 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_1943 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1942, %expand_shape_1940 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_1943 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1944 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1943, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_1944 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1945 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1944 : memref<1x40x1xf32>) outs(%alloc_1945 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1946 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1937, %alloc_1945 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_1946 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_1947 = memref.expand_shape %155 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_1948 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_1947, %alloc_1946 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_1948 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1949 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%154 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1949 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1950 = memref.collapse_shape %alloc_1948 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1951 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1951 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1950, %alloc_1949 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1951 : memref<40x4096xf32>)
    %alloc_1952 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%153 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1952 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1953 = memref.collapse_shape %alloc_1948 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1954 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1954 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1953, %alloc_1952 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1954 : memref<40x4096xf32>)
    %alloc_1955 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%152 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_1955 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1956 = memref.collapse_shape %alloc_1948 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_1957 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_1957 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_1956, %alloc_1955 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_1957 : memref<40x4096xf32>)
    %expand_shape_1958 = memref.expand_shape %alloc_1951 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1959 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1958 : memref<1x40x32x128xf32>) outs(%alloc_1959 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1960 = memref.expand_shape %alloc_1954 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1961 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1960 : memref<1x40x32x128xf32>) outs(%alloc_1961 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_1962 = memref.expand_shape %alloc_1957 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_1963 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1962 : memref<1x40x32x128xf32>) outs(%alloc_1963 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_1964 = memref.subview %151[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_1965 = memref.subview %150[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_1966 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1964 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1966 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1967 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1966 : memref<1x40x128xf32>) outs(%alloc_1967 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1968 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_1965 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_1968 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1969 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_1968 : memref<1x40x128xf32>) outs(%alloc_1969 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_1970 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1970 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1967[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1971 = memref.expand_shape %alloc_1970 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1972 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_1972 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_1969[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_1973 = memref.expand_shape %alloc_1972 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_1974 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1959, %expand_shape_1971 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1974 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1975 = memref.subview %alloc_1959[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1976 = memref.subview %alloc_1959[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1977 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1976 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1977 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1978 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1979 = memref.subview %alloc_1978[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1977, %subview_1979 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1980 = memref.subview %alloc_1978[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1975, %subview_1980 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1981 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1978, %expand_shape_1973 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1981 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1982 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1974, %alloc_1981 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1982 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1983 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1961, %expand_shape_1971 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1983 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_1984 = memref.subview %alloc_1961[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1985 = memref.subview %alloc_1961[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1986 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_1985 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_1986 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1987 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_1988 = memref.subview %alloc_1987[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_1986, %subview_1988 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_1989 = memref.subview %alloc_1987[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_1984, %subview_1989 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_1990 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1987, %expand_shape_1973 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_1990 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1991 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1983, %alloc_1990 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_1991 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1992 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1991 : memref<1x32x40x128xf32>) outs(%alloc_1992 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_1993 = memref.collapse_shape %alloc_1982 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_1994 = memref.collapse_shape %alloc_1992 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_1995 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_1995 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_1993, %collapse_shape_1994 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_1995 : memref<32x40x40xf32>)
    %expand_shape_1996 = memref.expand_shape %alloc_1995 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_1997 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_1997 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_1998 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_1996, %alloc_1997 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_1998 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_1999 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1998, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_1999 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2000 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_2000 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_1999 : memref<1x32x40x40xf32>) outs(%alloc_2000 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_2001 = memref.expand_shape %alloc_2000 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2002 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_1999, %expand_shape_2001 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2002 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2003 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2002 : memref<1x32x40x40xf32>) outs(%alloc_2003 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2004 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2004 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2003 : memref<1x32x40x40xf32>) outs(%alloc_2004 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2005 = memref.expand_shape %alloc_2004 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2006 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2005 : memref<1x32x40x1xf32>) outs(%alloc_2006 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2007 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2003, %alloc_2006 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2007 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_2008 = memref.collapse_shape %alloc_2007 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_2009 = memref.collapse_shape %alloc_1963 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_2010 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2010 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_2008, %collapse_shape_2009 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_2010 : memref<32x40x128xf32>)
    %expand_shape_2011 = memref.expand_shape %alloc_2010 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_2012 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2011 : memref<1x32x40x128xf32>) outs(%alloc_2012 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2013 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%149 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2013 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2014 = memref.collapse_shape %alloc_2012 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_2015 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2015 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2014, %alloc_2013 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2015 : memref<40x4096xf32>)
    %expand_shape_2016 = memref.expand_shape %alloc_2015 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2017 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_1937, %expand_shape_2016 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2017 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2018 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2017 : memref<1x40x4096xf32>) outs(%alloc_2018 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2019 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2019 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2018 : memref<1x40x4096xf32>) outs(%alloc_2019 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2020 = memref.expand_shape %alloc_2019 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2021 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2021 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2022 = memref.expand_shape %alloc_2021 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2023 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2022, %expand_shape_2020 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2023 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2024 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2023, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2024 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2025 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2024 : memref<1x40x1xf32>) outs(%alloc_2025 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2026 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2017, %alloc_2025 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2026 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2027 = memref.expand_shape %148 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2028 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2027, %alloc_2026 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2028 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2029 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%147 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2029 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2030 = memref.collapse_shape %alloc_2028 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2031 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2031 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2030, %alloc_2029 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2031 : memref<40x11008xf32>)
    %expand_shape_2032 = memref.expand_shape %alloc_2031 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2033 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2032 : memref<1x40x11008xf32>) outs(%alloc_2033 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_2034 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2032, %alloc_2033 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2034 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2035 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%146 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2035 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2036 = memref.collapse_shape %alloc_2028 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2037 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2037 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2036, %alloc_2035 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2037 : memref<40x11008xf32>)
    %expand_shape_2038 = memref.expand_shape %alloc_2037 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2039 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2034, %expand_shape_2038 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2039 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2040 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%145 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2040 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2041 = memref.collapse_shape %alloc_2039 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_2042 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2042 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2041, %alloc_2040 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_2042 : memref<40x4096xf32>)
    %expand_shape_2043 = memref.expand_shape %alloc_2042 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2044 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2017, %expand_shape_2043 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2044 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2045 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2044 : memref<1x40x4096xf32>) outs(%alloc_2045 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2046 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2046 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2045 : memref<1x40x4096xf32>) outs(%alloc_2046 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2047 = memref.expand_shape %alloc_2046 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2048 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2048 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2049 = memref.expand_shape %alloc_2048 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2050 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2049, %expand_shape_2047 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2050 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2051 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2050, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2051 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2052 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2051 : memref<1x40x1xf32>) outs(%alloc_2052 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2053 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2044, %alloc_2052 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2053 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2054 = memref.expand_shape %144 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2055 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2054, %alloc_2053 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2055 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2056 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%143 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2056 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2057 = memref.collapse_shape %alloc_2055 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2058 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2058 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2057, %alloc_2056 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2058 : memref<40x4096xf32>)
    %alloc_2059 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%142 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2059 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2060 = memref.collapse_shape %alloc_2055 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2061 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2061 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2060, %alloc_2059 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2061 : memref<40x4096xf32>)
    %alloc_2062 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%141 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2062 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2063 = memref.collapse_shape %alloc_2055 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2064 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2064 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2063, %alloc_2062 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2064 : memref<40x4096xf32>)
    %expand_shape_2065 = memref.expand_shape %alloc_2058 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2066 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2065 : memref<1x40x32x128xf32>) outs(%alloc_2066 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2067 = memref.expand_shape %alloc_2061 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2068 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2067 : memref<1x40x32x128xf32>) outs(%alloc_2068 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2069 = memref.expand_shape %alloc_2064 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2070 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2069 : memref<1x40x32x128xf32>) outs(%alloc_2070 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_2071 = memref.subview %140[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_2072 = memref.subview %139[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_2073 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2071 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2073 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2074 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2073 : memref<1x40x128xf32>) outs(%alloc_2074 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2075 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2072 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2075 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2076 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2075 : memref<1x40x128xf32>) outs(%alloc_2076 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2077 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2077 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2074[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2078 = memref.expand_shape %alloc_2077 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2079 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2079 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2076[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2080 = memref.expand_shape %alloc_2079 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2081 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2066, %expand_shape_2078 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2081 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2082 = memref.subview %alloc_2066[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2083 = memref.subview %alloc_2066[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2084 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2083 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2084 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2085 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2086 = memref.subview %alloc_2085[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2084, %subview_2086 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2087 = memref.subview %alloc_2085[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2082, %subview_2087 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2088 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2085, %expand_shape_2080 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2088 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2089 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2081, %alloc_2088 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2089 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2090 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2068, %expand_shape_2078 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2090 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2091 = memref.subview %alloc_2068[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2092 = memref.subview %alloc_2068[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2093 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2092 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2093 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2094 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2095 = memref.subview %alloc_2094[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2093, %subview_2095 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2096 = memref.subview %alloc_2094[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2091, %subview_2096 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2097 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2094, %expand_shape_2080 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2097 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2098 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2090, %alloc_2097 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2098 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2099 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2098 : memref<1x32x40x128xf32>) outs(%alloc_2099 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2100 = memref.collapse_shape %alloc_2089 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_2101 = memref.collapse_shape %alloc_2099 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_2102 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2102 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_2100, %collapse_shape_2101 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_2102 : memref<32x40x40xf32>)
    %expand_shape_2103 = memref.expand_shape %alloc_2102 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_2104 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_2104 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2105 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2103, %alloc_2104 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_2105 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2106 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2105, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_2106 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2107 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_2107 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2106 : memref<1x32x40x40xf32>) outs(%alloc_2107 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_2108 = memref.expand_shape %alloc_2107 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2109 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2106, %expand_shape_2108 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2109 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2110 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2109 : memref<1x32x40x40xf32>) outs(%alloc_2110 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2111 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2111 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2110 : memref<1x32x40x40xf32>) outs(%alloc_2111 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2112 = memref.expand_shape %alloc_2111 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2113 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2112 : memref<1x32x40x1xf32>) outs(%alloc_2113 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2114 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2110, %alloc_2113 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2114 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_2115 = memref.collapse_shape %alloc_2114 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_2116 = memref.collapse_shape %alloc_2070 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_2117 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2117 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_2115, %collapse_shape_2116 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_2117 : memref<32x40x128xf32>)
    %expand_shape_2118 = memref.expand_shape %alloc_2117 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_2119 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2118 : memref<1x32x40x128xf32>) outs(%alloc_2119 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2120 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%138 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2120 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2121 = memref.collapse_shape %alloc_2119 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_2122 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2122 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2121, %alloc_2120 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2122 : memref<40x4096xf32>)
    %expand_shape_2123 = memref.expand_shape %alloc_2122 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2124 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2044, %expand_shape_2123 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2124 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2125 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2124 : memref<1x40x4096xf32>) outs(%alloc_2125 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2126 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2126 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2125 : memref<1x40x4096xf32>) outs(%alloc_2126 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2127 = memref.expand_shape %alloc_2126 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2128 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2128 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2129 = memref.expand_shape %alloc_2128 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2130 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2129, %expand_shape_2127 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2130 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2131 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2130, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2131 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2132 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2131 : memref<1x40x1xf32>) outs(%alloc_2132 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2133 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2124, %alloc_2132 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2133 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2134 = memref.expand_shape %137 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2135 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2134, %alloc_2133 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2135 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2136 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%136 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2136 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2137 = memref.collapse_shape %alloc_2135 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2138 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2138 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2137, %alloc_2136 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2138 : memref<40x11008xf32>)
    %expand_shape_2139 = memref.expand_shape %alloc_2138 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2140 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2139 : memref<1x40x11008xf32>) outs(%alloc_2140 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_2141 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2139, %alloc_2140 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2141 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2142 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%135 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2142 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2143 = memref.collapse_shape %alloc_2135 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2144 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2144 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2143, %alloc_2142 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2144 : memref<40x11008xf32>)
    %expand_shape_2145 = memref.expand_shape %alloc_2144 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2146 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2141, %expand_shape_2145 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2146 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2147 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%134 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2147 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2148 = memref.collapse_shape %alloc_2146 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_2149 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2149 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2148, %alloc_2147 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_2149 : memref<40x4096xf32>)
    %expand_shape_2150 = memref.expand_shape %alloc_2149 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2151 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2124, %expand_shape_2150 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2151 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2152 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2151 : memref<1x40x4096xf32>) outs(%alloc_2152 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2153 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2153 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2152 : memref<1x40x4096xf32>) outs(%alloc_2153 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2154 = memref.expand_shape %alloc_2153 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2155 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2155 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2156 = memref.expand_shape %alloc_2155 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2157 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2156, %expand_shape_2154 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2157 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2158 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2157, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2158 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2159 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2158 : memref<1x40x1xf32>) outs(%alloc_2159 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2160 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2151, %alloc_2159 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2160 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2161 = memref.expand_shape %133 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2162 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2161, %alloc_2160 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2162 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2163 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%132 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2163 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2164 = memref.collapse_shape %alloc_2162 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2165 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2165 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2164, %alloc_2163 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2165 : memref<40x4096xf32>)
    %alloc_2166 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%131 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2166 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2167 = memref.collapse_shape %alloc_2162 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2168 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2168 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2167, %alloc_2166 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2168 : memref<40x4096xf32>)
    %alloc_2169 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%130 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2169 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2170 = memref.collapse_shape %alloc_2162 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2171 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2171 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2170, %alloc_2169 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2171 : memref<40x4096xf32>)
    %expand_shape_2172 = memref.expand_shape %alloc_2165 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2173 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2172 : memref<1x40x32x128xf32>) outs(%alloc_2173 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2174 = memref.expand_shape %alloc_2168 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2175 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2174 : memref<1x40x32x128xf32>) outs(%alloc_2175 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2176 = memref.expand_shape %alloc_2171 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2177 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2176 : memref<1x40x32x128xf32>) outs(%alloc_2177 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_2178 = memref.subview %129[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_2179 = memref.subview %128[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_2180 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2178 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2180 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2181 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2180 : memref<1x40x128xf32>) outs(%alloc_2181 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2182 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2179 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2182 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2183 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2182 : memref<1x40x128xf32>) outs(%alloc_2183 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2184 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2184 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2181[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2185 = memref.expand_shape %alloc_2184 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2186 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2186 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2183[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2187 = memref.expand_shape %alloc_2186 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2188 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2173, %expand_shape_2185 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2188 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2189 = memref.subview %alloc_2173[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2190 = memref.subview %alloc_2173[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2191 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2190 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2191 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2192 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2193 = memref.subview %alloc_2192[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2191, %subview_2193 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2194 = memref.subview %alloc_2192[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2189, %subview_2194 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2195 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2192, %expand_shape_2187 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2195 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2196 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2188, %alloc_2195 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2196 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2197 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2175, %expand_shape_2185 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2197 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2198 = memref.subview %alloc_2175[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2199 = memref.subview %alloc_2175[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2200 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2199 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2200 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2201 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2202 = memref.subview %alloc_2201[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2200, %subview_2202 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2203 = memref.subview %alloc_2201[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2198, %subview_2203 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2204 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2201, %expand_shape_2187 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2204 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2205 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2197, %alloc_2204 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2205 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2206 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2205 : memref<1x32x40x128xf32>) outs(%alloc_2206 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2207 = memref.collapse_shape %alloc_2196 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_2208 = memref.collapse_shape %alloc_2206 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_2209 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2209 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_2207, %collapse_shape_2208 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_2209 : memref<32x40x40xf32>)
    %expand_shape_2210 = memref.expand_shape %alloc_2209 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_2211 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_2211 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2212 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2210, %alloc_2211 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_2212 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2213 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2212, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_2213 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2214 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_2214 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2213 : memref<1x32x40x40xf32>) outs(%alloc_2214 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_2215 = memref.expand_shape %alloc_2214 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2216 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2213, %expand_shape_2215 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2216 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2217 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2216 : memref<1x32x40x40xf32>) outs(%alloc_2217 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2218 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2218 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2217 : memref<1x32x40x40xf32>) outs(%alloc_2218 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2219 = memref.expand_shape %alloc_2218 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2220 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2219 : memref<1x32x40x1xf32>) outs(%alloc_2220 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2221 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2217, %alloc_2220 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2221 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_2222 = memref.collapse_shape %alloc_2221 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_2223 = memref.collapse_shape %alloc_2177 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_2224 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2224 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_2222, %collapse_shape_2223 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_2224 : memref<32x40x128xf32>)
    %expand_shape_2225 = memref.expand_shape %alloc_2224 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_2226 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2225 : memref<1x32x40x128xf32>) outs(%alloc_2226 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2227 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%127 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2227 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2228 = memref.collapse_shape %alloc_2226 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_2229 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2229 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2228, %alloc_2227 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2229 : memref<40x4096xf32>)
    %expand_shape_2230 = memref.expand_shape %alloc_2229 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2231 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2151, %expand_shape_2230 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2231 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2232 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2231 : memref<1x40x4096xf32>) outs(%alloc_2232 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2233 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2233 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2232 : memref<1x40x4096xf32>) outs(%alloc_2233 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2234 = memref.expand_shape %alloc_2233 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2235 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2235 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2236 = memref.expand_shape %alloc_2235 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2237 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2236, %expand_shape_2234 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2237 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2238 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2237, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2238 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2239 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2238 : memref<1x40x1xf32>) outs(%alloc_2239 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2240 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2231, %alloc_2239 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2240 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2241 = memref.expand_shape %126 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2242 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2241, %alloc_2240 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2242 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2243 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%125 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2243 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2244 = memref.collapse_shape %alloc_2242 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2245 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2245 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2244, %alloc_2243 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2245 : memref<40x11008xf32>)
    %expand_shape_2246 = memref.expand_shape %alloc_2245 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2247 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2246 : memref<1x40x11008xf32>) outs(%alloc_2247 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_2248 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2246, %alloc_2247 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2248 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2249 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%124 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2249 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2250 = memref.collapse_shape %alloc_2242 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2251 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2251 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2250, %alloc_2249 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2251 : memref<40x11008xf32>)
    %expand_shape_2252 = memref.expand_shape %alloc_2251 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2253 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2248, %expand_shape_2252 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2253 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2254 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%123 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2254 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2255 = memref.collapse_shape %alloc_2253 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_2256 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2256 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2255, %alloc_2254 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_2256 : memref<40x4096xf32>)
    %expand_shape_2257 = memref.expand_shape %alloc_2256 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2258 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2231, %expand_shape_2257 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2258 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2259 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2258 : memref<1x40x4096xf32>) outs(%alloc_2259 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2260 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2260 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2259 : memref<1x40x4096xf32>) outs(%alloc_2260 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2261 = memref.expand_shape %alloc_2260 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2262 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2262 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2263 = memref.expand_shape %alloc_2262 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2264 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2263, %expand_shape_2261 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2264 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2265 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2264, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2265 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2266 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2265 : memref<1x40x1xf32>) outs(%alloc_2266 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2267 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2258, %alloc_2266 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2267 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2268 = memref.expand_shape %122 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2269 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2268, %alloc_2267 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2269 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2270 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%121 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2270 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2271 = memref.collapse_shape %alloc_2269 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2272 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2272 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2271, %alloc_2270 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2272 : memref<40x4096xf32>)
    %alloc_2273 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%120 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2273 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2274 = memref.collapse_shape %alloc_2269 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2275 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2275 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2274, %alloc_2273 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2275 : memref<40x4096xf32>)
    %alloc_2276 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%119 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2276 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2277 = memref.collapse_shape %alloc_2269 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2278 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2278 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2277, %alloc_2276 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2278 : memref<40x4096xf32>)
    %expand_shape_2279 = memref.expand_shape %alloc_2272 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2280 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2279 : memref<1x40x32x128xf32>) outs(%alloc_2280 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2281 = memref.expand_shape %alloc_2275 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2282 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2281 : memref<1x40x32x128xf32>) outs(%alloc_2282 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2283 = memref.expand_shape %alloc_2278 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2284 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2283 : memref<1x40x32x128xf32>) outs(%alloc_2284 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_2285 = memref.subview %118[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_2286 = memref.subview %117[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_2287 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2285 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2287 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2288 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2287 : memref<1x40x128xf32>) outs(%alloc_2288 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2289 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2286 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2289 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2290 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2289 : memref<1x40x128xf32>) outs(%alloc_2290 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2291 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2291 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2288[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2292 = memref.expand_shape %alloc_2291 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2293 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2293 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2290[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2294 = memref.expand_shape %alloc_2293 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2295 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2280, %expand_shape_2292 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2295 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2296 = memref.subview %alloc_2280[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2297 = memref.subview %alloc_2280[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2298 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2297 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2298 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2299 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2300 = memref.subview %alloc_2299[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2298, %subview_2300 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2301 = memref.subview %alloc_2299[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2296, %subview_2301 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2302 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2299, %expand_shape_2294 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2302 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2303 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2295, %alloc_2302 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2303 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2304 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2282, %expand_shape_2292 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2304 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2305 = memref.subview %alloc_2282[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2306 = memref.subview %alloc_2282[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2307 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2306 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2307 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2308 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2309 = memref.subview %alloc_2308[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2307, %subview_2309 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2310 = memref.subview %alloc_2308[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2305, %subview_2310 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2311 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2308, %expand_shape_2294 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2311 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2312 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2304, %alloc_2311 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2312 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2313 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2312 : memref<1x32x40x128xf32>) outs(%alloc_2313 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2314 = memref.collapse_shape %alloc_2303 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_2315 = memref.collapse_shape %alloc_2313 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_2316 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2316 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_2314, %collapse_shape_2315 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_2316 : memref<32x40x40xf32>)
    %expand_shape_2317 = memref.expand_shape %alloc_2316 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_2318 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_2318 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2319 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2317, %alloc_2318 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_2319 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2320 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2319, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_2320 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2321 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_2321 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2320 : memref<1x32x40x40xf32>) outs(%alloc_2321 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_2322 = memref.expand_shape %alloc_2321 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2323 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2320, %expand_shape_2322 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2323 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2324 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2323 : memref<1x32x40x40xf32>) outs(%alloc_2324 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2325 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2325 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2324 : memref<1x32x40x40xf32>) outs(%alloc_2325 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2326 = memref.expand_shape %alloc_2325 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2327 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2326 : memref<1x32x40x1xf32>) outs(%alloc_2327 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2328 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2324, %alloc_2327 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2328 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_2329 = memref.collapse_shape %alloc_2328 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_2330 = memref.collapse_shape %alloc_2284 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_2331 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2331 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_2329, %collapse_shape_2330 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_2331 : memref<32x40x128xf32>)
    %expand_shape_2332 = memref.expand_shape %alloc_2331 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_2333 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2332 : memref<1x32x40x128xf32>) outs(%alloc_2333 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2334 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%116 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2334 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2335 = memref.collapse_shape %alloc_2333 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_2336 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2336 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2335, %alloc_2334 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2336 : memref<40x4096xf32>)
    %expand_shape_2337 = memref.expand_shape %alloc_2336 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2338 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2258, %expand_shape_2337 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2338 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2339 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2338 : memref<1x40x4096xf32>) outs(%alloc_2339 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2340 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2340 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2339 : memref<1x40x4096xf32>) outs(%alloc_2340 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2341 = memref.expand_shape %alloc_2340 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2342 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2342 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2343 = memref.expand_shape %alloc_2342 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2344 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2343, %expand_shape_2341 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2344 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2345 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2344, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2345 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2346 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2345 : memref<1x40x1xf32>) outs(%alloc_2346 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2347 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2338, %alloc_2346 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2347 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2348 = memref.expand_shape %115 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2349 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2348, %alloc_2347 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2349 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2350 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%114 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2350 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2351 = memref.collapse_shape %alloc_2349 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2352 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2352 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2351, %alloc_2350 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2352 : memref<40x11008xf32>)
    %expand_shape_2353 = memref.expand_shape %alloc_2352 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2354 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2353 : memref<1x40x11008xf32>) outs(%alloc_2354 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_2355 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2353, %alloc_2354 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2355 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2356 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%113 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2356 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2357 = memref.collapse_shape %alloc_2349 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2358 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2358 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2357, %alloc_2356 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2358 : memref<40x11008xf32>)
    %expand_shape_2359 = memref.expand_shape %alloc_2358 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2360 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2355, %expand_shape_2359 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2360 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2361 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%112 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2361 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2362 = memref.collapse_shape %alloc_2360 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_2363 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2363 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2362, %alloc_2361 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_2363 : memref<40x4096xf32>)
    %expand_shape_2364 = memref.expand_shape %alloc_2363 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2365 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2338, %expand_shape_2364 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2365 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2366 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2365 : memref<1x40x4096xf32>) outs(%alloc_2366 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2367 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2367 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2366 : memref<1x40x4096xf32>) outs(%alloc_2367 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2368 = memref.expand_shape %alloc_2367 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2369 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2369 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2370 = memref.expand_shape %alloc_2369 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2371 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2370, %expand_shape_2368 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2371 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2372 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2371, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2372 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2373 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2372 : memref<1x40x1xf32>) outs(%alloc_2373 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2374 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2365, %alloc_2373 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2374 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2375 = memref.expand_shape %111 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2376 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2375, %alloc_2374 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2376 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2377 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%110 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2377 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2378 = memref.collapse_shape %alloc_2376 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2379 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2379 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2378, %alloc_2377 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2379 : memref<40x4096xf32>)
    %alloc_2380 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%109 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2380 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2381 = memref.collapse_shape %alloc_2376 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2382 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2382 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2381, %alloc_2380 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2382 : memref<40x4096xf32>)
    %alloc_2383 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%108 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2383 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2384 = memref.collapse_shape %alloc_2376 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2385 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2385 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2384, %alloc_2383 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2385 : memref<40x4096xf32>)
    %expand_shape_2386 = memref.expand_shape %alloc_2379 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2387 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2386 : memref<1x40x32x128xf32>) outs(%alloc_2387 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2388 = memref.expand_shape %alloc_2382 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2389 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2388 : memref<1x40x32x128xf32>) outs(%alloc_2389 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2390 = memref.expand_shape %alloc_2385 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2391 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2390 : memref<1x40x32x128xf32>) outs(%alloc_2391 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_2392 = memref.subview %107[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_2393 = memref.subview %106[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_2394 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2392 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2394 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2395 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2394 : memref<1x40x128xf32>) outs(%alloc_2395 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2396 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2393 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2396 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2397 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2396 : memref<1x40x128xf32>) outs(%alloc_2397 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2398 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2398 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2395[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2399 = memref.expand_shape %alloc_2398 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2400 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2400 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2397[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2401 = memref.expand_shape %alloc_2400 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2402 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2387, %expand_shape_2399 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2402 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2403 = memref.subview %alloc_2387[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2404 = memref.subview %alloc_2387[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2405 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2404 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2405 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2406 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2407 = memref.subview %alloc_2406[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2405, %subview_2407 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2408 = memref.subview %alloc_2406[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2403, %subview_2408 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2409 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2406, %expand_shape_2401 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2409 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2410 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2402, %alloc_2409 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2410 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2411 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2389, %expand_shape_2399 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2411 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2412 = memref.subview %alloc_2389[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2413 = memref.subview %alloc_2389[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2414 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2413 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2414 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2415 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2416 = memref.subview %alloc_2415[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2414, %subview_2416 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2417 = memref.subview %alloc_2415[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2412, %subview_2417 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2418 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2415, %expand_shape_2401 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2418 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2419 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2411, %alloc_2418 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2419 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2420 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2419 : memref<1x32x40x128xf32>) outs(%alloc_2420 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2421 = memref.collapse_shape %alloc_2410 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_2422 = memref.collapse_shape %alloc_2420 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_2423 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2423 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_2421, %collapse_shape_2422 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_2423 : memref<32x40x40xf32>)
    %expand_shape_2424 = memref.expand_shape %alloc_2423 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_2425 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_2425 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2426 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2424, %alloc_2425 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_2426 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2427 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2426, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_2427 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2428 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_2428 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2427 : memref<1x32x40x40xf32>) outs(%alloc_2428 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_2429 = memref.expand_shape %alloc_2428 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2430 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2427, %expand_shape_2429 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2430 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2431 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2430 : memref<1x32x40x40xf32>) outs(%alloc_2431 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2432 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2432 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2431 : memref<1x32x40x40xf32>) outs(%alloc_2432 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2433 = memref.expand_shape %alloc_2432 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2434 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2433 : memref<1x32x40x1xf32>) outs(%alloc_2434 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2435 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2431, %alloc_2434 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2435 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_2436 = memref.collapse_shape %alloc_2435 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_2437 = memref.collapse_shape %alloc_2391 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_2438 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2438 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_2436, %collapse_shape_2437 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_2438 : memref<32x40x128xf32>)
    %expand_shape_2439 = memref.expand_shape %alloc_2438 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_2440 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2439 : memref<1x32x40x128xf32>) outs(%alloc_2440 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2441 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%105 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2441 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2442 = memref.collapse_shape %alloc_2440 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_2443 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2443 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2442, %alloc_2441 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2443 : memref<40x4096xf32>)
    %expand_shape_2444 = memref.expand_shape %alloc_2443 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2445 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2365, %expand_shape_2444 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2445 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2446 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2445 : memref<1x40x4096xf32>) outs(%alloc_2446 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2447 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2447 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2446 : memref<1x40x4096xf32>) outs(%alloc_2447 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2448 = memref.expand_shape %alloc_2447 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2449 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2449 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2450 = memref.expand_shape %alloc_2449 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2451 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2450, %expand_shape_2448 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2451 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2452 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2451, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2452 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2453 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2452 : memref<1x40x1xf32>) outs(%alloc_2453 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2454 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2445, %alloc_2453 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2454 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2455 = memref.expand_shape %104 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2456 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2455, %alloc_2454 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2456 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2457 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%103 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2457 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2458 = memref.collapse_shape %alloc_2456 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2459 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2459 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2458, %alloc_2457 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2459 : memref<40x11008xf32>)
    %expand_shape_2460 = memref.expand_shape %alloc_2459 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2461 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2460 : memref<1x40x11008xf32>) outs(%alloc_2461 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_2462 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2460, %alloc_2461 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2462 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2463 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%102 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2463 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2464 = memref.collapse_shape %alloc_2456 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2465 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2465 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2464, %alloc_2463 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2465 : memref<40x11008xf32>)
    %expand_shape_2466 = memref.expand_shape %alloc_2465 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2467 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2462, %expand_shape_2466 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2467 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2468 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%101 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2468 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2469 = memref.collapse_shape %alloc_2467 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_2470 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2470 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2469, %alloc_2468 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_2470 : memref<40x4096xf32>)
    %expand_shape_2471 = memref.expand_shape %alloc_2470 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2472 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2445, %expand_shape_2471 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2472 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2473 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2472 : memref<1x40x4096xf32>) outs(%alloc_2473 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2474 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2474 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2473 : memref<1x40x4096xf32>) outs(%alloc_2474 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2475 = memref.expand_shape %alloc_2474 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2476 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2476 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2477 = memref.expand_shape %alloc_2476 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2478 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2477, %expand_shape_2475 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2478 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2479 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2478, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2479 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2480 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2479 : memref<1x40x1xf32>) outs(%alloc_2480 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2481 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2472, %alloc_2480 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2481 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2482 = memref.expand_shape %100 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2483 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2482, %alloc_2481 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2483 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2484 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%99 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2484 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2485 = memref.collapse_shape %alloc_2483 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2486 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2486 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2485, %alloc_2484 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2486 : memref<40x4096xf32>)
    %alloc_2487 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%98 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2487 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2488 = memref.collapse_shape %alloc_2483 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2489 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2489 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2488, %alloc_2487 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2489 : memref<40x4096xf32>)
    %alloc_2490 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%97 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2490 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2491 = memref.collapse_shape %alloc_2483 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2492 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2492 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2491, %alloc_2490 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2492 : memref<40x4096xf32>)
    %expand_shape_2493 = memref.expand_shape %alloc_2486 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2494 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2493 : memref<1x40x32x128xf32>) outs(%alloc_2494 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2495 = memref.expand_shape %alloc_2489 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2496 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2495 : memref<1x40x32x128xf32>) outs(%alloc_2496 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2497 = memref.expand_shape %alloc_2492 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2498 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2497 : memref<1x40x32x128xf32>) outs(%alloc_2498 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_2499 = memref.subview %96[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_2500 = memref.subview %95[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_2501 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2499 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2501 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2502 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2501 : memref<1x40x128xf32>) outs(%alloc_2502 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2503 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2500 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2503 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2504 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2503 : memref<1x40x128xf32>) outs(%alloc_2504 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2505 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2505 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2502[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2506 = memref.expand_shape %alloc_2505 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2507 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2507 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2504[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2508 = memref.expand_shape %alloc_2507 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2509 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2494, %expand_shape_2506 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2509 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2510 = memref.subview %alloc_2494[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2511 = memref.subview %alloc_2494[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2512 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2511 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2512 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2513 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2514 = memref.subview %alloc_2513[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2512, %subview_2514 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2515 = memref.subview %alloc_2513[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2510, %subview_2515 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2516 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2513, %expand_shape_2508 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2516 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2517 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2509, %alloc_2516 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2517 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2518 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2496, %expand_shape_2506 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2518 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2519 = memref.subview %alloc_2496[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2520 = memref.subview %alloc_2496[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2521 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2520 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2521 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2522 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2523 = memref.subview %alloc_2522[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2521, %subview_2523 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2524 = memref.subview %alloc_2522[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2519, %subview_2524 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2525 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2522, %expand_shape_2508 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2525 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2526 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2518, %alloc_2525 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2526 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2527 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2526 : memref<1x32x40x128xf32>) outs(%alloc_2527 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2528 = memref.collapse_shape %alloc_2517 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_2529 = memref.collapse_shape %alloc_2527 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_2530 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2530 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_2528, %collapse_shape_2529 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_2530 : memref<32x40x40xf32>)
    %expand_shape_2531 = memref.expand_shape %alloc_2530 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_2532 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_2532 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2533 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2531, %alloc_2532 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_2533 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2534 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2533, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_2534 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2535 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_2535 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2534 : memref<1x32x40x40xf32>) outs(%alloc_2535 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_2536 = memref.expand_shape %alloc_2535 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2537 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2534, %expand_shape_2536 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2537 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2538 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2537 : memref<1x32x40x40xf32>) outs(%alloc_2538 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2539 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2539 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2538 : memref<1x32x40x40xf32>) outs(%alloc_2539 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2540 = memref.expand_shape %alloc_2539 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2541 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2540 : memref<1x32x40x1xf32>) outs(%alloc_2541 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2542 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2538, %alloc_2541 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2542 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_2543 = memref.collapse_shape %alloc_2542 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_2544 = memref.collapse_shape %alloc_2498 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_2545 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2545 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_2543, %collapse_shape_2544 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_2545 : memref<32x40x128xf32>)
    %expand_shape_2546 = memref.expand_shape %alloc_2545 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_2547 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2546 : memref<1x32x40x128xf32>) outs(%alloc_2547 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2548 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%94 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2548 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2549 = memref.collapse_shape %alloc_2547 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_2550 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2550 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2549, %alloc_2548 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2550 : memref<40x4096xf32>)
    %expand_shape_2551 = memref.expand_shape %alloc_2550 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2552 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2472, %expand_shape_2551 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2552 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2553 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2552 : memref<1x40x4096xf32>) outs(%alloc_2553 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2554 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2554 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2553 : memref<1x40x4096xf32>) outs(%alloc_2554 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2555 = memref.expand_shape %alloc_2554 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2556 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2556 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2557 = memref.expand_shape %alloc_2556 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2558 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2557, %expand_shape_2555 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2558 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2559 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2558, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2559 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2560 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2559 : memref<1x40x1xf32>) outs(%alloc_2560 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2561 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2552, %alloc_2560 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2561 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2562 = memref.expand_shape %93 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2563 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2562, %alloc_2561 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2563 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2564 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%92 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2564 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2565 = memref.collapse_shape %alloc_2563 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2566 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2566 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2565, %alloc_2564 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2566 : memref<40x11008xf32>)
    %expand_shape_2567 = memref.expand_shape %alloc_2566 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2568 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2567 : memref<1x40x11008xf32>) outs(%alloc_2568 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_2569 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2567, %alloc_2568 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2569 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2570 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%91 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2570 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2571 = memref.collapse_shape %alloc_2563 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2572 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2572 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2571, %alloc_2570 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2572 : memref<40x11008xf32>)
    %expand_shape_2573 = memref.expand_shape %alloc_2572 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2574 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2569, %expand_shape_2573 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2574 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2575 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%90 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2575 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2576 = memref.collapse_shape %alloc_2574 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_2577 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2577 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2576, %alloc_2575 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_2577 : memref<40x4096xf32>)
    %expand_shape_2578 = memref.expand_shape %alloc_2577 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2579 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2552, %expand_shape_2578 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2579 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2580 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2579 : memref<1x40x4096xf32>) outs(%alloc_2580 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2581 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2581 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2580 : memref<1x40x4096xf32>) outs(%alloc_2581 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2582 = memref.expand_shape %alloc_2581 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2583 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2583 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2584 = memref.expand_shape %alloc_2583 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2585 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2584, %expand_shape_2582 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2585 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2586 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2585, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2586 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2587 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2586 : memref<1x40x1xf32>) outs(%alloc_2587 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2588 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2579, %alloc_2587 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2588 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2589 = memref.expand_shape %89 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2590 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2589, %alloc_2588 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2590 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2591 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%88 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2591 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2592 = memref.collapse_shape %alloc_2590 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2593 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2593 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2592, %alloc_2591 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2593 : memref<40x4096xf32>)
    %alloc_2594 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%87 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2594 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2595 = memref.collapse_shape %alloc_2590 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2596 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2596 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2595, %alloc_2594 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2596 : memref<40x4096xf32>)
    %alloc_2597 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%86 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2597 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2598 = memref.collapse_shape %alloc_2590 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2599 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2599 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2598, %alloc_2597 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2599 : memref<40x4096xf32>)
    %expand_shape_2600 = memref.expand_shape %alloc_2593 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2601 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2600 : memref<1x40x32x128xf32>) outs(%alloc_2601 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2602 = memref.expand_shape %alloc_2596 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2603 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2602 : memref<1x40x32x128xf32>) outs(%alloc_2603 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2604 = memref.expand_shape %alloc_2599 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2605 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2604 : memref<1x40x32x128xf32>) outs(%alloc_2605 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_2606 = memref.subview %85[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_2607 = memref.subview %84[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_2608 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2606 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2608 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2609 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2608 : memref<1x40x128xf32>) outs(%alloc_2609 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2610 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2607 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2610 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2611 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2610 : memref<1x40x128xf32>) outs(%alloc_2611 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2612 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2612 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2609[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2613 = memref.expand_shape %alloc_2612 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2614 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2614 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2611[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2615 = memref.expand_shape %alloc_2614 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2616 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2601, %expand_shape_2613 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2616 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2617 = memref.subview %alloc_2601[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2618 = memref.subview %alloc_2601[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2619 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2618 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2619 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2620 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2621 = memref.subview %alloc_2620[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2619, %subview_2621 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2622 = memref.subview %alloc_2620[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2617, %subview_2622 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2623 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2620, %expand_shape_2615 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2623 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2624 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2616, %alloc_2623 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2624 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2625 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2603, %expand_shape_2613 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2625 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2626 = memref.subview %alloc_2603[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2627 = memref.subview %alloc_2603[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2628 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2627 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2628 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2629 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2630 = memref.subview %alloc_2629[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2628, %subview_2630 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2631 = memref.subview %alloc_2629[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2626, %subview_2631 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2632 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2629, %expand_shape_2615 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2632 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2633 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2625, %alloc_2632 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2633 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2634 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2633 : memref<1x32x40x128xf32>) outs(%alloc_2634 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2635 = memref.collapse_shape %alloc_2624 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_2636 = memref.collapse_shape %alloc_2634 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_2637 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2637 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_2635, %collapse_shape_2636 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_2637 : memref<32x40x40xf32>)
    %expand_shape_2638 = memref.expand_shape %alloc_2637 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_2639 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_2639 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2640 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2638, %alloc_2639 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_2640 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2641 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2640, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_2641 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2642 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_2642 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2641 : memref<1x32x40x40xf32>) outs(%alloc_2642 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_2643 = memref.expand_shape %alloc_2642 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2644 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2641, %expand_shape_2643 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2644 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2645 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2644 : memref<1x32x40x40xf32>) outs(%alloc_2645 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2646 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2646 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2645 : memref<1x32x40x40xf32>) outs(%alloc_2646 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2647 = memref.expand_shape %alloc_2646 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2648 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2647 : memref<1x32x40x1xf32>) outs(%alloc_2648 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2649 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2645, %alloc_2648 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2649 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_2650 = memref.collapse_shape %alloc_2649 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_2651 = memref.collapse_shape %alloc_2605 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_2652 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2652 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_2650, %collapse_shape_2651 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_2652 : memref<32x40x128xf32>)
    %expand_shape_2653 = memref.expand_shape %alloc_2652 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_2654 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2653 : memref<1x32x40x128xf32>) outs(%alloc_2654 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2655 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%83 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2655 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2656 = memref.collapse_shape %alloc_2654 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_2657 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2657 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2656, %alloc_2655 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2657 : memref<40x4096xf32>)
    %expand_shape_2658 = memref.expand_shape %alloc_2657 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2659 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2579, %expand_shape_2658 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2659 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2660 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2659 : memref<1x40x4096xf32>) outs(%alloc_2660 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2661 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2661 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2660 : memref<1x40x4096xf32>) outs(%alloc_2661 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2662 = memref.expand_shape %alloc_2661 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2663 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2663 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2664 = memref.expand_shape %alloc_2663 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2665 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2664, %expand_shape_2662 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2665 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2666 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2665, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2666 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2667 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2666 : memref<1x40x1xf32>) outs(%alloc_2667 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2668 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2659, %alloc_2667 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2668 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2669 = memref.expand_shape %82 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2670 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2669, %alloc_2668 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2670 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2671 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%81 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2671 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2672 = memref.collapse_shape %alloc_2670 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2673 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2673 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2672, %alloc_2671 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2673 : memref<40x11008xf32>)
    %expand_shape_2674 = memref.expand_shape %alloc_2673 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2675 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2674 : memref<1x40x11008xf32>) outs(%alloc_2675 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_2676 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2674, %alloc_2675 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2676 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2677 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%80 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2677 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2678 = memref.collapse_shape %alloc_2670 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2679 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2679 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2678, %alloc_2677 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2679 : memref<40x11008xf32>)
    %expand_shape_2680 = memref.expand_shape %alloc_2679 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2681 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2676, %expand_shape_2680 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2681 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2682 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%79 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2682 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2683 = memref.collapse_shape %alloc_2681 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_2684 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2684 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2683, %alloc_2682 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_2684 : memref<40x4096xf32>)
    %expand_shape_2685 = memref.expand_shape %alloc_2684 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2686 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2659, %expand_shape_2685 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2686 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2687 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2686 : memref<1x40x4096xf32>) outs(%alloc_2687 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2688 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2688 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2687 : memref<1x40x4096xf32>) outs(%alloc_2688 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2689 = memref.expand_shape %alloc_2688 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2690 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2690 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2691 = memref.expand_shape %alloc_2690 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2692 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2691, %expand_shape_2689 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2692 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2693 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2692, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2693 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2694 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2693 : memref<1x40x1xf32>) outs(%alloc_2694 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2695 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2686, %alloc_2694 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2695 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2696 = memref.expand_shape %78 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2697 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2696, %alloc_2695 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2697 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2698 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%77 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2698 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2699 = memref.collapse_shape %alloc_2697 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2700 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2700 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2699, %alloc_2698 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2700 : memref<40x4096xf32>)
    %alloc_2701 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%76 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2701 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2702 = memref.collapse_shape %alloc_2697 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2703 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2703 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2702, %alloc_2701 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2703 : memref<40x4096xf32>)
    %alloc_2704 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%75 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2704 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2705 = memref.collapse_shape %alloc_2697 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2706 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2706 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2705, %alloc_2704 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2706 : memref<40x4096xf32>)
    %expand_shape_2707 = memref.expand_shape %alloc_2700 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2708 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2707 : memref<1x40x32x128xf32>) outs(%alloc_2708 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2709 = memref.expand_shape %alloc_2703 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2710 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2709 : memref<1x40x32x128xf32>) outs(%alloc_2710 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2711 = memref.expand_shape %alloc_2706 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2712 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2711 : memref<1x40x32x128xf32>) outs(%alloc_2712 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_2713 = memref.subview %74[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_2714 = memref.subview %73[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_2715 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2713 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2715 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2716 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2715 : memref<1x40x128xf32>) outs(%alloc_2716 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2717 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2714 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2717 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2718 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2717 : memref<1x40x128xf32>) outs(%alloc_2718 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2719 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2719 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2716[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2720 = memref.expand_shape %alloc_2719 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2721 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2721 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2718[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2722 = memref.expand_shape %alloc_2721 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2723 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2708, %expand_shape_2720 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2723 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2724 = memref.subview %alloc_2708[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2725 = memref.subview %alloc_2708[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2726 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2725 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2726 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2727 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2728 = memref.subview %alloc_2727[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2726, %subview_2728 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2729 = memref.subview %alloc_2727[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2724, %subview_2729 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2730 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2727, %expand_shape_2722 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2730 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2731 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2723, %alloc_2730 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2731 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2732 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2710, %expand_shape_2720 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2732 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2733 = memref.subview %alloc_2710[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2734 = memref.subview %alloc_2710[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2735 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2734 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2735 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2736 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2737 = memref.subview %alloc_2736[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2735, %subview_2737 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2738 = memref.subview %alloc_2736[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2733, %subview_2738 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2739 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2736, %expand_shape_2722 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2739 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2740 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2732, %alloc_2739 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2740 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2741 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2740 : memref<1x32x40x128xf32>) outs(%alloc_2741 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2742 = memref.collapse_shape %alloc_2731 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_2743 = memref.collapse_shape %alloc_2741 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_2744 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2744 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_2742, %collapse_shape_2743 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_2744 : memref<32x40x40xf32>)
    %expand_shape_2745 = memref.expand_shape %alloc_2744 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_2746 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_2746 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2747 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2745, %alloc_2746 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_2747 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2748 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2747, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_2748 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2749 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_2749 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2748 : memref<1x32x40x40xf32>) outs(%alloc_2749 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_2750 = memref.expand_shape %alloc_2749 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2751 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2748, %expand_shape_2750 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2751 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2752 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2751 : memref<1x32x40x40xf32>) outs(%alloc_2752 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2753 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2753 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2752 : memref<1x32x40x40xf32>) outs(%alloc_2753 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2754 = memref.expand_shape %alloc_2753 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2755 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2754 : memref<1x32x40x1xf32>) outs(%alloc_2755 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2756 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2752, %alloc_2755 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2756 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_2757 = memref.collapse_shape %alloc_2756 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_2758 = memref.collapse_shape %alloc_2712 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_2759 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2759 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_2757, %collapse_shape_2758 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_2759 : memref<32x40x128xf32>)
    %expand_shape_2760 = memref.expand_shape %alloc_2759 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_2761 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2760 : memref<1x32x40x128xf32>) outs(%alloc_2761 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2762 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%72 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2762 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2763 = memref.collapse_shape %alloc_2761 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_2764 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2764 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2763, %alloc_2762 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2764 : memref<40x4096xf32>)
    %expand_shape_2765 = memref.expand_shape %alloc_2764 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2766 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2686, %expand_shape_2765 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2766 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2767 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2766 : memref<1x40x4096xf32>) outs(%alloc_2767 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2768 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2768 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2767 : memref<1x40x4096xf32>) outs(%alloc_2768 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2769 = memref.expand_shape %alloc_2768 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2770 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2770 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2771 = memref.expand_shape %alloc_2770 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2772 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2771, %expand_shape_2769 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2772 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2773 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2772, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2773 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2774 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2773 : memref<1x40x1xf32>) outs(%alloc_2774 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2775 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2766, %alloc_2774 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2775 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2776 = memref.expand_shape %71 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2777 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2776, %alloc_2775 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2777 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2778 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%70 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2778 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2779 = memref.collapse_shape %alloc_2777 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2780 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2780 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2779, %alloc_2778 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2780 : memref<40x11008xf32>)
    %expand_shape_2781 = memref.expand_shape %alloc_2780 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2782 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2781 : memref<1x40x11008xf32>) outs(%alloc_2782 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_2783 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2781, %alloc_2782 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2783 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2784 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%69 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2784 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2785 = memref.collapse_shape %alloc_2777 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2786 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2786 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2785, %alloc_2784 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2786 : memref<40x11008xf32>)
    %expand_shape_2787 = memref.expand_shape %alloc_2786 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2788 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2783, %expand_shape_2787 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2788 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2789 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%68 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2789 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2790 = memref.collapse_shape %alloc_2788 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_2791 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2791 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2790, %alloc_2789 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_2791 : memref<40x4096xf32>)
    %expand_shape_2792 = memref.expand_shape %alloc_2791 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2793 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2766, %expand_shape_2792 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2793 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2794 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2793 : memref<1x40x4096xf32>) outs(%alloc_2794 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2795 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2795 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2794 : memref<1x40x4096xf32>) outs(%alloc_2795 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2796 = memref.expand_shape %alloc_2795 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2797 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2797 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2798 = memref.expand_shape %alloc_2797 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2799 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2798, %expand_shape_2796 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2799 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2800 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2799, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2800 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2801 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2800 : memref<1x40x1xf32>) outs(%alloc_2801 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2802 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2793, %alloc_2801 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2802 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2803 = memref.expand_shape %67 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2804 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2803, %alloc_2802 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2804 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2805 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%66 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2805 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2806 = memref.collapse_shape %alloc_2804 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2807 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2807 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2806, %alloc_2805 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2807 : memref<40x4096xf32>)
    %alloc_2808 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%65 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2808 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2809 = memref.collapse_shape %alloc_2804 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2810 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2810 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2809, %alloc_2808 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2810 : memref<40x4096xf32>)
    %alloc_2811 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%64 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2811 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2812 = memref.collapse_shape %alloc_2804 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2813 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2813 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2812, %alloc_2811 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2813 : memref<40x4096xf32>)
    %expand_shape_2814 = memref.expand_shape %alloc_2807 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2815 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2814 : memref<1x40x32x128xf32>) outs(%alloc_2815 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2816 = memref.expand_shape %alloc_2810 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2817 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2816 : memref<1x40x32x128xf32>) outs(%alloc_2817 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2818 = memref.expand_shape %alloc_2813 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2819 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2818 : memref<1x40x32x128xf32>) outs(%alloc_2819 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_2820 = memref.subview %63[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_2821 = memref.subview %62[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_2822 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2820 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2822 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2823 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2822 : memref<1x40x128xf32>) outs(%alloc_2823 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2824 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2821 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2824 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2825 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2824 : memref<1x40x128xf32>) outs(%alloc_2825 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2826 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2826 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2823[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2827 = memref.expand_shape %alloc_2826 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2828 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2828 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2825[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2829 = memref.expand_shape %alloc_2828 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2830 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2815, %expand_shape_2827 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2830 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2831 = memref.subview %alloc_2815[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2832 = memref.subview %alloc_2815[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2833 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2832 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2833 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2834 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2835 = memref.subview %alloc_2834[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2833, %subview_2835 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2836 = memref.subview %alloc_2834[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2831, %subview_2836 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2837 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2834, %expand_shape_2829 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2837 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2838 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2830, %alloc_2837 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2838 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2839 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2817, %expand_shape_2827 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2839 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2840 = memref.subview %alloc_2817[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2841 = memref.subview %alloc_2817[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2842 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2841 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2842 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2843 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2844 = memref.subview %alloc_2843[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2842, %subview_2844 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2845 = memref.subview %alloc_2843[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2840, %subview_2845 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2846 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2843, %expand_shape_2829 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2846 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2847 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2839, %alloc_2846 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2847 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2848 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2847 : memref<1x32x40x128xf32>) outs(%alloc_2848 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2849 = memref.collapse_shape %alloc_2838 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_2850 = memref.collapse_shape %alloc_2848 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_2851 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2851 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_2849, %collapse_shape_2850 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_2851 : memref<32x40x40xf32>)
    %expand_shape_2852 = memref.expand_shape %alloc_2851 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_2853 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_2853 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2854 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2852, %alloc_2853 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_2854 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2855 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2854, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_2855 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2856 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_2856 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2855 : memref<1x32x40x40xf32>) outs(%alloc_2856 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_2857 = memref.expand_shape %alloc_2856 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2858 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2855, %expand_shape_2857 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2858 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2859 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2858 : memref<1x32x40x40xf32>) outs(%alloc_2859 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2860 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2860 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2859 : memref<1x32x40x40xf32>) outs(%alloc_2860 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2861 = memref.expand_shape %alloc_2860 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2862 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2861 : memref<1x32x40x1xf32>) outs(%alloc_2862 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2863 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2859, %alloc_2862 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2863 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_2864 = memref.collapse_shape %alloc_2863 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_2865 = memref.collapse_shape %alloc_2819 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_2866 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2866 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_2864, %collapse_shape_2865 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_2866 : memref<32x40x128xf32>)
    %expand_shape_2867 = memref.expand_shape %alloc_2866 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_2868 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2867 : memref<1x32x40x128xf32>) outs(%alloc_2868 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2869 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%61 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2869 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2870 = memref.collapse_shape %alloc_2868 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_2871 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2871 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2870, %alloc_2869 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2871 : memref<40x4096xf32>)
    %expand_shape_2872 = memref.expand_shape %alloc_2871 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2873 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2793, %expand_shape_2872 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2873 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2874 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2873 : memref<1x40x4096xf32>) outs(%alloc_2874 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2875 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2875 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2874 : memref<1x40x4096xf32>) outs(%alloc_2875 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2876 = memref.expand_shape %alloc_2875 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2877 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2877 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2878 = memref.expand_shape %alloc_2877 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2879 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2878, %expand_shape_2876 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2879 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2880 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2879, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2880 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2881 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2880 : memref<1x40x1xf32>) outs(%alloc_2881 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2882 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2873, %alloc_2881 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2882 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2883 = memref.expand_shape %60 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2884 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2883, %alloc_2882 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2884 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2885 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%59 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2885 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2886 = memref.collapse_shape %alloc_2884 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2887 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2887 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2886, %alloc_2885 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2887 : memref<40x11008xf32>)
    %expand_shape_2888 = memref.expand_shape %alloc_2887 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2889 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2888 : memref<1x40x11008xf32>) outs(%alloc_2889 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_2890 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2888, %alloc_2889 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2890 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2891 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%58 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2891 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2892 = memref.collapse_shape %alloc_2884 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2893 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2893 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2892, %alloc_2891 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2893 : memref<40x11008xf32>)
    %expand_shape_2894 = memref.expand_shape %alloc_2893 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2895 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2890, %expand_shape_2894 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2895 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2896 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%57 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2896 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2897 = memref.collapse_shape %alloc_2895 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_2898 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2898 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2897, %alloc_2896 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_2898 : memref<40x4096xf32>)
    %expand_shape_2899 = memref.expand_shape %alloc_2898 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2900 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2873, %expand_shape_2899 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2900 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2901 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2900 : memref<1x40x4096xf32>) outs(%alloc_2901 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2902 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2902 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2901 : memref<1x40x4096xf32>) outs(%alloc_2902 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2903 = memref.expand_shape %alloc_2902 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2904 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2904 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2905 = memref.expand_shape %alloc_2904 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2906 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2905, %expand_shape_2903 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2906 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2907 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2906, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2907 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2908 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2907 : memref<1x40x1xf32>) outs(%alloc_2908 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2909 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2900, %alloc_2908 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2909 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2910 = memref.expand_shape %56 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2911 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2910, %alloc_2909 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2911 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2912 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%55 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2912 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2913 = memref.collapse_shape %alloc_2911 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2914 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2914 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2913, %alloc_2912 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2914 : memref<40x4096xf32>)
    %alloc_2915 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%54 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2915 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2916 = memref.collapse_shape %alloc_2911 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2917 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2917 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2916, %alloc_2915 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2917 : memref<40x4096xf32>)
    %alloc_2918 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%53 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2918 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2919 = memref.collapse_shape %alloc_2911 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2920 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2920 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2919, %alloc_2918 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2920 : memref<40x4096xf32>)
    %expand_shape_2921 = memref.expand_shape %alloc_2914 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2922 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2921 : memref<1x40x32x128xf32>) outs(%alloc_2922 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2923 = memref.expand_shape %alloc_2917 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2924 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2923 : memref<1x40x32x128xf32>) outs(%alloc_2924 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_2925 = memref.expand_shape %alloc_2920 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_2926 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2925 : memref<1x40x32x128xf32>) outs(%alloc_2926 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_2927 = memref.subview %52[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_2928 = memref.subview %51[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_2929 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2927 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2929 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2930 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2929 : memref<1x40x128xf32>) outs(%alloc_2930 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2931 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_2928 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_2931 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2932 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_2931 : memref<1x40x128xf32>) outs(%alloc_2932 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2933 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2933 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2930[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2934 = memref.expand_shape %alloc_2933 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2935 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_2935 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_2932[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_2936 = memref.expand_shape %alloc_2935 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_2937 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2922, %expand_shape_2934 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2937 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2938 = memref.subview %alloc_2922[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2939 = memref.subview %alloc_2922[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2940 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2939 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2940 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2941 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2942 = memref.subview %alloc_2941[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2940, %subview_2942 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2943 = memref.subview %alloc_2941[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2938, %subview_2943 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2944 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2941, %expand_shape_2936 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2944 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2945 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2937, %alloc_2944 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2945 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2946 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2924, %expand_shape_2934 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2946 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_2947 = memref.subview %alloc_2924[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2948 = memref.subview %alloc_2924[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2949 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_2948 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_2949 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2950 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_2951 = memref.subview %alloc_2950[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_2949, %subview_2951 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_2952 = memref.subview %alloc_2950[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_2947, %subview_2952 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_2953 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2950, %expand_shape_2936 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_2953 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2954 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2946, %alloc_2953 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_2954 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2955 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2954 : memref<1x32x40x128xf32>) outs(%alloc_2955 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2956 = memref.collapse_shape %alloc_2945 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_2957 = memref.collapse_shape %alloc_2955 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_2958 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2958 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_2956, %collapse_shape_2957 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_2958 : memref<32x40x40xf32>)
    %expand_shape_2959 = memref.expand_shape %alloc_2958 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_2960 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_2960 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2961 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2959, %alloc_2960 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_2961 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2962 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2961, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_2962 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2963 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_2963 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2962 : memref<1x32x40x40xf32>) outs(%alloc_2963 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_2964 = memref.expand_shape %alloc_2963 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2965 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2962, %expand_shape_2964 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2965 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2966 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2965 : memref<1x32x40x40xf32>) outs(%alloc_2966 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2967 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2967 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_2966 : memref<1x32x40x40xf32>) outs(%alloc_2967 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2968 = memref.expand_shape %alloc_2967 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_2969 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2968 : memref<1x32x40x1xf32>) outs(%alloc_2969 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2970 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_2966, %alloc_2969 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_2970 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_2971 = memref.collapse_shape %alloc_2970 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_2972 = memref.collapse_shape %alloc_2926 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_2973 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2973 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_2971, %collapse_shape_2972 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_2973 : memref<32x40x128xf32>)
    %expand_shape_2974 = memref.expand_shape %alloc_2973 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_2975 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_2974 : memref<1x32x40x128xf32>) outs(%alloc_2975 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_2976 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%50 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2976 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2977 = memref.collapse_shape %alloc_2975 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_2978 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_2978 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2977, %alloc_2976 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_2978 : memref<40x4096xf32>)
    %expand_shape_2979 = memref.expand_shape %alloc_2978 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_2980 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2900, %expand_shape_2979 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_2980 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2981 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2980 : memref<1x40x4096xf32>) outs(%alloc_2981 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_2982 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_2982 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_2981 : memref<1x40x4096xf32>) outs(%alloc_2982 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_2983 = memref.expand_shape %alloc_2982 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_2984 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_2984 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2985 = memref.expand_shape %alloc_2984 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_2986 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2985, %expand_shape_2983 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_2986 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2987 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2986, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_2987 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2988 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2987 : memref<1x40x1xf32>) outs(%alloc_2988 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_2989 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2980, %alloc_2988 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_2989 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_2990 = memref.expand_shape %49 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_2991 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2990, %alloc_2989 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_2991 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2992 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%48 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2992 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2993 = memref.collapse_shape %alloc_2991 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_2994 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_2994 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2993, %alloc_2992 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_2994 : memref<40x11008xf32>)
    %expand_shape_2995 = memref.expand_shape %alloc_2994 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_2996 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2995 : memref<1x40x11008xf32>) outs(%alloc_2996 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_2997 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_2995, %alloc_2996 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_2997 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_2998 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%47 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_2998 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_2999 = memref.collapse_shape %alloc_2991 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3000 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_3000 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_2999, %alloc_2998 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_3000 : memref<40x11008xf32>)
    %expand_shape_3001 = memref.expand_shape %alloc_3000 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_3002 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2997, %expand_shape_3001 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_3002 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3003 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%46 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3003 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3004 = memref.collapse_shape %alloc_3002 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_3005 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3005 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3004, %alloc_3003 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_3005 : memref<40x4096xf32>)
    %expand_shape_3006 = memref.expand_shape %alloc_3005 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_3007 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_2980, %expand_shape_3006 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_3007 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3008 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3007 : memref<1x40x4096xf32>) outs(%alloc_3008 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_3009 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3009 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_3008 : memref<1x40x4096xf32>) outs(%alloc_3009 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3010 = memref.expand_shape %alloc_3009 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_3011 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_3011 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3012 = memref.expand_shape %alloc_3011 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_3013 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3012, %expand_shape_3010 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_3013 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3014 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3013, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_3014 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3015 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3014 : memref<1x40x1xf32>) outs(%alloc_3015 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3016 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3007, %alloc_3015 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_3016 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3017 = memref.expand_shape %45 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_3018 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3017, %alloc_3016 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_3018 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3019 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%44 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3019 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3020 = memref.collapse_shape %alloc_3018 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3021 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3021 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3020, %alloc_3019 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3021 : memref<40x4096xf32>)
    %alloc_3022 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%43 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3022 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3023 = memref.collapse_shape %alloc_3018 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3024 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3024 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3023, %alloc_3022 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3024 : memref<40x4096xf32>)
    %alloc_3025 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%42 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3025 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3026 = memref.collapse_shape %alloc_3018 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3027 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3027 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3026, %alloc_3025 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3027 : memref<40x4096xf32>)
    %expand_shape_3028 = memref.expand_shape %alloc_3021 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3029 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3028 : memref<1x40x32x128xf32>) outs(%alloc_3029 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_3030 = memref.expand_shape %alloc_3024 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3031 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3030 : memref<1x40x32x128xf32>) outs(%alloc_3031 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_3032 = memref.expand_shape %alloc_3027 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3033 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3032 : memref<1x40x32x128xf32>) outs(%alloc_3033 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_3034 = memref.subview %41[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_3035 = memref.subview %40[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_3036 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_3034 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_3036 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3037 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_3036 : memref<1x40x128xf32>) outs(%alloc_3037 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3038 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_3035 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_3038 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3039 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_3038 : memref<1x40x128xf32>) outs(%alloc_3039 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3040 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_3040 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_3037[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_3041 = memref.expand_shape %alloc_3040 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_3042 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_3042 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_3039[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_3043 = memref.expand_shape %alloc_3042 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_3044 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3029, %expand_shape_3041 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3044 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_3045 = memref.subview %alloc_3029[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3046 = memref.subview %alloc_3029[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3047 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_3046 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_3047 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3048 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_3049 = memref.subview %alloc_3048[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_3047, %subview_3049 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3050 = memref.subview %alloc_3048[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_3045, %subview_3050 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3051 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3048, %expand_shape_3043 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3051 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3052 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3044, %alloc_3051 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_3052 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3053 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3031, %expand_shape_3041 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3053 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_3054 = memref.subview %alloc_3031[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3055 = memref.subview %alloc_3031[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3056 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_3055 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_3056 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3057 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_3058 = memref.subview %alloc_3057[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_3056, %subview_3058 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3059 = memref.subview %alloc_3057[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_3054, %subview_3059 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3060 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3057, %expand_shape_3043 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3060 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3061 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3053, %alloc_3060 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_3061 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3062 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3061 : memref<1x32x40x128xf32>) outs(%alloc_3062 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3063 = memref.collapse_shape %alloc_3052 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_3064 = memref.collapse_shape %alloc_3062 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_3065 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3065 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_3063, %collapse_shape_3064 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_3065 : memref<32x40x40xf32>)
    %expand_shape_3066 = memref.expand_shape %alloc_3065 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_3067 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_3067 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3068 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3066, %alloc_3067 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_3068 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3069 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3068, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_3069 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3070 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_3070 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_3069 : memref<1x32x40x40xf32>) outs(%alloc_3070 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_3071 = memref.expand_shape %alloc_3070 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_3072 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3069, %expand_shape_3071 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_3072 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3073 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3072 : memref<1x32x40x40xf32>) outs(%alloc_3073 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3074 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3074 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_3073 : memref<1x32x40x40xf32>) outs(%alloc_3074 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3075 = memref.expand_shape %alloc_3074 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_3076 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3075 : memref<1x32x40x1xf32>) outs(%alloc_3076 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3077 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3073, %alloc_3076 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_3077 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_3078 = memref.collapse_shape %alloc_3077 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_3079 = memref.collapse_shape %alloc_3033 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_3080 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3080 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_3078, %collapse_shape_3079 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_3080 : memref<32x40x128xf32>)
    %expand_shape_3081 = memref.expand_shape %alloc_3080 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_3082 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3081 : memref<1x32x40x128xf32>) outs(%alloc_3082 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3083 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%39 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3083 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3084 = memref.collapse_shape %alloc_3082 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_3085 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3085 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3084, %alloc_3083 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3085 : memref<40x4096xf32>)
    %expand_shape_3086 = memref.expand_shape %alloc_3085 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_3087 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3007, %expand_shape_3086 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_3087 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3088 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3087 : memref<1x40x4096xf32>) outs(%alloc_3088 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_3089 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3089 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_3088 : memref<1x40x4096xf32>) outs(%alloc_3089 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3090 = memref.expand_shape %alloc_3089 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_3091 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_3091 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3092 = memref.expand_shape %alloc_3091 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_3093 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3092, %expand_shape_3090 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_3093 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3094 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3093, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_3094 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3095 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3094 : memref<1x40x1xf32>) outs(%alloc_3095 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3096 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3087, %alloc_3095 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_3096 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3097 = memref.expand_shape %38 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_3098 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3097, %alloc_3096 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_3098 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3099 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%37 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3099 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3100 = memref.collapse_shape %alloc_3098 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3101 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_3101 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3100, %alloc_3099 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_3101 : memref<40x11008xf32>)
    %expand_shape_3102 = memref.expand_shape %alloc_3101 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_3103 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3102 : memref<1x40x11008xf32>) outs(%alloc_3103 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_3104 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3102, %alloc_3103 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_3104 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3105 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%36 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3105 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3106 = memref.collapse_shape %alloc_3098 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3107 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_3107 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3106, %alloc_3105 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_3107 : memref<40x11008xf32>)
    %expand_shape_3108 = memref.expand_shape %alloc_3107 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_3109 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3104, %expand_shape_3108 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_3109 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3110 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%35 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3110 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3111 = memref.collapse_shape %alloc_3109 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_3112 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3112 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3111, %alloc_3110 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_3112 : memref<40x4096xf32>)
    %expand_shape_3113 = memref.expand_shape %alloc_3112 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_3114 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3087, %expand_shape_3113 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_3114 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3115 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3114 : memref<1x40x4096xf32>) outs(%alloc_3115 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_3116 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3116 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_3115 : memref<1x40x4096xf32>) outs(%alloc_3116 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3117 = memref.expand_shape %alloc_3116 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_3118 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_3118 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3119 = memref.expand_shape %alloc_3118 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_3120 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3119, %expand_shape_3117 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_3120 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3121 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3120, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_3121 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3122 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3121 : memref<1x40x1xf32>) outs(%alloc_3122 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3123 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3114, %alloc_3122 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_3123 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3124 = memref.expand_shape %34 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_3125 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3124, %alloc_3123 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_3125 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3126 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%33 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3126 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3127 = memref.collapse_shape %alloc_3125 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3128 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3128 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3127, %alloc_3126 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3128 : memref<40x4096xf32>)
    %alloc_3129 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%32 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3129 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3130 = memref.collapse_shape %alloc_3125 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3131 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3131 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3130, %alloc_3129 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3131 : memref<40x4096xf32>)
    %alloc_3132 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%31 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3132 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3133 = memref.collapse_shape %alloc_3125 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3134 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3134 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3133, %alloc_3132 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3134 : memref<40x4096xf32>)
    %expand_shape_3135 = memref.expand_shape %alloc_3128 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3136 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3135 : memref<1x40x32x128xf32>) outs(%alloc_3136 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_3137 = memref.expand_shape %alloc_3131 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3138 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3137 : memref<1x40x32x128xf32>) outs(%alloc_3138 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_3139 = memref.expand_shape %alloc_3134 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3140 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3139 : memref<1x40x32x128xf32>) outs(%alloc_3140 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_3141 = memref.subview %30[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_3142 = memref.subview %29[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_3143 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_3141 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_3143 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3144 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_3143 : memref<1x40x128xf32>) outs(%alloc_3144 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3145 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_3142 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_3145 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3146 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_3145 : memref<1x40x128xf32>) outs(%alloc_3146 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3147 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_3147 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_3144[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_3148 = memref.expand_shape %alloc_3147 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_3149 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_3149 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_3146[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_3150 = memref.expand_shape %alloc_3149 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_3151 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3136, %expand_shape_3148 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3151 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_3152 = memref.subview %alloc_3136[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3153 = memref.subview %alloc_3136[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3154 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_3153 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_3154 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3155 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_3156 = memref.subview %alloc_3155[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_3154, %subview_3156 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3157 = memref.subview %alloc_3155[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_3152, %subview_3157 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3158 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3155, %expand_shape_3150 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3158 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3159 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3151, %alloc_3158 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_3159 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3160 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3138, %expand_shape_3148 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3160 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_3161 = memref.subview %alloc_3138[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3162 = memref.subview %alloc_3138[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3163 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_3162 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_3163 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3164 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_3165 = memref.subview %alloc_3164[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_3163, %subview_3165 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3166 = memref.subview %alloc_3164[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_3161, %subview_3166 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3167 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3164, %expand_shape_3150 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3167 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3168 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3160, %alloc_3167 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_3168 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3169 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3168 : memref<1x32x40x128xf32>) outs(%alloc_3169 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3170 = memref.collapse_shape %alloc_3159 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_3171 = memref.collapse_shape %alloc_3169 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_3172 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3172 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_3170, %collapse_shape_3171 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_3172 : memref<32x40x40xf32>)
    %expand_shape_3173 = memref.expand_shape %alloc_3172 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_3174 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_3174 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3175 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3173, %alloc_3174 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_3175 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3176 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3175, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_3176 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3177 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_3177 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_3176 : memref<1x32x40x40xf32>) outs(%alloc_3177 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_3178 = memref.expand_shape %alloc_3177 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_3179 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3176, %expand_shape_3178 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_3179 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3180 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3179 : memref<1x32x40x40xf32>) outs(%alloc_3180 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3181 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3181 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_3180 : memref<1x32x40x40xf32>) outs(%alloc_3181 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3182 = memref.expand_shape %alloc_3181 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_3183 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3182 : memref<1x32x40x1xf32>) outs(%alloc_3183 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3184 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3180, %alloc_3183 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_3184 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_3185 = memref.collapse_shape %alloc_3184 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_3186 = memref.collapse_shape %alloc_3140 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_3187 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3187 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_3185, %collapse_shape_3186 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_3187 : memref<32x40x128xf32>)
    %expand_shape_3188 = memref.expand_shape %alloc_3187 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_3189 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3188 : memref<1x32x40x128xf32>) outs(%alloc_3189 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3190 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%28 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3190 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3191 = memref.collapse_shape %alloc_3189 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_3192 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3192 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3191, %alloc_3190 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3192 : memref<40x4096xf32>)
    %expand_shape_3193 = memref.expand_shape %alloc_3192 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_3194 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3114, %expand_shape_3193 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_3194 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3195 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3194 : memref<1x40x4096xf32>) outs(%alloc_3195 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_3196 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3196 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_3195 : memref<1x40x4096xf32>) outs(%alloc_3196 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3197 = memref.expand_shape %alloc_3196 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_3198 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_3198 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3199 = memref.expand_shape %alloc_3198 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_3200 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3199, %expand_shape_3197 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_3200 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3201 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3200, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_3201 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3202 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3201 : memref<1x40x1xf32>) outs(%alloc_3202 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3203 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3194, %alloc_3202 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_3203 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3204 = memref.expand_shape %27 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_3205 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3204, %alloc_3203 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_3205 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3206 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%26 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3206 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3207 = memref.collapse_shape %alloc_3205 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3208 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_3208 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3207, %alloc_3206 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_3208 : memref<40x11008xf32>)
    %expand_shape_3209 = memref.expand_shape %alloc_3208 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_3210 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3209 : memref<1x40x11008xf32>) outs(%alloc_3210 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_3211 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3209, %alloc_3210 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_3211 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3212 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%25 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3212 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3213 = memref.collapse_shape %alloc_3205 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3214 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_3214 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3213, %alloc_3212 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_3214 : memref<40x11008xf32>)
    %expand_shape_3215 = memref.expand_shape %alloc_3214 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_3216 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3211, %expand_shape_3215 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_3216 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3217 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%24 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3217 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3218 = memref.collapse_shape %alloc_3216 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_3219 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3219 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3218, %alloc_3217 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_3219 : memref<40x4096xf32>)
    %expand_shape_3220 = memref.expand_shape %alloc_3219 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_3221 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3194, %expand_shape_3220 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_3221 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3222 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3221 : memref<1x40x4096xf32>) outs(%alloc_3222 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_3223 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3223 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_3222 : memref<1x40x4096xf32>) outs(%alloc_3223 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3224 = memref.expand_shape %alloc_3223 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_3225 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_3225 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3226 = memref.expand_shape %alloc_3225 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_3227 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3226, %expand_shape_3224 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_3227 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3228 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3227, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_3228 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3229 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3228 : memref<1x40x1xf32>) outs(%alloc_3229 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3230 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3221, %alloc_3229 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_3230 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3231 = memref.expand_shape %23 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_3232 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3231, %alloc_3230 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_3232 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3233 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%22 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3233 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3234 = memref.collapse_shape %alloc_3232 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3235 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3235 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3234, %alloc_3233 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3235 : memref<40x4096xf32>)
    %alloc_3236 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%21 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3236 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3237 = memref.collapse_shape %alloc_3232 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3238 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3238 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3237, %alloc_3236 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3238 : memref<40x4096xf32>)
    %alloc_3239 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%20 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3239 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3240 = memref.collapse_shape %alloc_3232 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3241 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3241 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3240, %alloc_3239 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3241 : memref<40x4096xf32>)
    %expand_shape_3242 = memref.expand_shape %alloc_3235 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3243 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3242 : memref<1x40x32x128xf32>) outs(%alloc_3243 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_3244 = memref.expand_shape %alloc_3238 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3245 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3244 : memref<1x40x32x128xf32>) outs(%alloc_3245 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_3246 = memref.expand_shape %alloc_3241 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3247 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3246 : memref<1x40x32x128xf32>) outs(%alloc_3247 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_3248 = memref.subview %19[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_3249 = memref.subview %18[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_3250 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_3248 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_3250 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3251 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_3250 : memref<1x40x128xf32>) outs(%alloc_3251 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3252 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_3249 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_3252 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3253 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_3252 : memref<1x40x128xf32>) outs(%alloc_3253 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3254 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_3254 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_3251[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_3255 = memref.expand_shape %alloc_3254 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_3256 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_3256 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_3253[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_3257 = memref.expand_shape %alloc_3256 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_3258 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3243, %expand_shape_3255 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3258 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_3259 = memref.subview %alloc_3243[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3260 = memref.subview %alloc_3243[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3261 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_3260 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_3261 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3262 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_3263 = memref.subview %alloc_3262[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_3261, %subview_3263 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3264 = memref.subview %alloc_3262[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_3259, %subview_3264 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3265 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3262, %expand_shape_3257 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3265 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3266 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3258, %alloc_3265 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_3266 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3267 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3245, %expand_shape_3255 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3267 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_3268 = memref.subview %alloc_3245[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3269 = memref.subview %alloc_3245[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3270 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_3269 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_3270 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3271 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_3272 = memref.subview %alloc_3271[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_3270, %subview_3272 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3273 = memref.subview %alloc_3271[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_3268, %subview_3273 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3274 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3271, %expand_shape_3257 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3274 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3275 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3267, %alloc_3274 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_3275 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3276 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3275 : memref<1x32x40x128xf32>) outs(%alloc_3276 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3277 = memref.collapse_shape %alloc_3266 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_3278 = memref.collapse_shape %alloc_3276 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_3279 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3279 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_3277, %collapse_shape_3278 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_3279 : memref<32x40x40xf32>)
    %expand_shape_3280 = memref.expand_shape %alloc_3279 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_3281 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_3281 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3282 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3280, %alloc_3281 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_3282 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3283 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3282, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_3283 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3284 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_3284 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_3283 : memref<1x32x40x40xf32>) outs(%alloc_3284 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_3285 = memref.expand_shape %alloc_3284 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_3286 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3283, %expand_shape_3285 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_3286 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3287 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3286 : memref<1x32x40x40xf32>) outs(%alloc_3287 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3288 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3288 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_3287 : memref<1x32x40x40xf32>) outs(%alloc_3288 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3289 = memref.expand_shape %alloc_3288 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_3290 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3289 : memref<1x32x40x1xf32>) outs(%alloc_3290 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3291 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3287, %alloc_3290 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_3291 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_3292 = memref.collapse_shape %alloc_3291 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_3293 = memref.collapse_shape %alloc_3247 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_3294 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3294 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_3292, %collapse_shape_3293 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_3294 : memref<32x40x128xf32>)
    %expand_shape_3295 = memref.expand_shape %alloc_3294 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_3296 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3295 : memref<1x32x40x128xf32>) outs(%alloc_3296 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3297 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%17 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3297 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3298 = memref.collapse_shape %alloc_3296 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_3299 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3299 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3298, %alloc_3297 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3299 : memref<40x4096xf32>)
    %expand_shape_3300 = memref.expand_shape %alloc_3299 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_3301 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3221, %expand_shape_3300 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_3301 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3302 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3301 : memref<1x40x4096xf32>) outs(%alloc_3302 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_3303 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3303 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_3302 : memref<1x40x4096xf32>) outs(%alloc_3303 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3304 = memref.expand_shape %alloc_3303 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_3305 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_3305 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3306 = memref.expand_shape %alloc_3305 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_3307 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3306, %expand_shape_3304 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_3307 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3308 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3307, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_3308 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3309 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3308 : memref<1x40x1xf32>) outs(%alloc_3309 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3310 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3301, %alloc_3309 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_3310 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3311 = memref.expand_shape %16 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_3312 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3311, %alloc_3310 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_3312 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3313 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%15 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3313 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3314 = memref.collapse_shape %alloc_3312 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3315 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_3315 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3314, %alloc_3313 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_3315 : memref<40x11008xf32>)
    %expand_shape_3316 = memref.expand_shape %alloc_3315 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_3317 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3316 : memref<1x40x11008xf32>) outs(%alloc_3317 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_3318 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3316, %alloc_3317 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_3318 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3319 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%14 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3319 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3320 = memref.collapse_shape %alloc_3312 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3321 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_3321 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3320, %alloc_3319 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_3321 : memref<40x11008xf32>)
    %expand_shape_3322 = memref.expand_shape %alloc_3321 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_3323 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3318, %expand_shape_3322 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_3323 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3324 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%13 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3324 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3325 = memref.collapse_shape %alloc_3323 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_3326 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3326 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3325, %alloc_3324 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_3326 : memref<40x4096xf32>)
    %expand_shape_3327 = memref.expand_shape %alloc_3326 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_3328 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3301, %expand_shape_3327 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_3328 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3329 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3328 : memref<1x40x4096xf32>) outs(%alloc_3329 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_3330 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3330 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_3329 : memref<1x40x4096xf32>) outs(%alloc_3330 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3331 = memref.expand_shape %alloc_3330 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_3332 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_3332 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3333 = memref.expand_shape %alloc_3332 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_3334 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3333, %expand_shape_3331 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_3334 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3335 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3334, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_3335 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3336 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3335 : memref<1x40x1xf32>) outs(%alloc_3336 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3337 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3328, %alloc_3336 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_3337 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3338 = memref.expand_shape %12 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_3339 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3338, %alloc_3337 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_3339 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3340 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%11 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3340 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3341 = memref.collapse_shape %alloc_3339 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3342 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3342 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3341, %alloc_3340 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3342 : memref<40x4096xf32>)
    %alloc_3343 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%10 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3343 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3344 = memref.collapse_shape %alloc_3339 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3345 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3345 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3344, %alloc_3343 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3345 : memref<40x4096xf32>)
    %alloc_3346 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%9 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3346 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3347 = memref.collapse_shape %alloc_3339 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3348 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3348 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3347, %alloc_3346 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3348 : memref<40x4096xf32>)
    %expand_shape_3349 = memref.expand_shape %alloc_3342 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3350 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3349 : memref<1x40x32x128xf32>) outs(%alloc_3350 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_3351 = memref.expand_shape %alloc_3345 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3352 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3351 : memref<1x40x32x128xf32>) outs(%alloc_3352 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %expand_shape_3353 = memref.expand_shape %alloc_3348 [[0, 1], [2, 3]] : memref<40x4096xf32> into memref<1x40x32x128xf32>
    %alloc_3354 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3353 : memref<1x40x32x128xf32>) outs(%alloc_3354 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %subview_3355 = memref.subview %8[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %subview_3356 = memref.subview %7[0, 0, 0, 0] [1, 1, 40, 128] [1, 1, 1, 1] : memref<1x1x2048x128xf32, strided<[?, ?, ?, ?], offset: ?>> to memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>
    %alloc_3357 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_3355 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_3357 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3358 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_3357 : memref<1x40x128xf32>) outs(%alloc_3358 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3359 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map17, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%subview_3356 : memref<1x1x40x128xf32, strided<[?, ?, ?, ?], offset: ?>>) outs(%alloc_3359 : memref<1x40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3360 = memref.alloc() {alignment = 64 : i64} : memref<40x128xf32>
    linalg.generic {indexing_maps = [#map18, #map1], iterator_types = ["parallel", "parallel"]} ins(%alloc_3359 : memref<1x40x128xf32>) outs(%alloc_3360 : memref<40x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3361 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_3361 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_3358[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_3362 = memref.expand_shape %alloc_3361 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_3363 = memref.alloc() {alignment = 64 : i64} : memref<1x40x128xf32>
    linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%368 : memref<1x40xi64>) outs(%alloc_3363 : memref<1x40x128xf32>) {
    ^bb0(%in: i64, %out: f32):
      %371 = arith.index_cast %in : i64 to index
      %372 = linalg.index 2 : index
      %373 = memref.load %alloc_3360[%371, %372] : memref<40x128xf32>
      linalg.yield %373 : f32
    }
    %expand_shape_3364 = memref.expand_shape %alloc_3363 [[0, 1], [2], [3]] : memref<1x40x128xf32> into memref<1x1x40x128xf32>
    %alloc_3365 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3350, %expand_shape_3362 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3365 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_3366 = memref.subview %alloc_3350[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3367 = memref.subview %alloc_3350[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3368 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_3367 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_3368 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3369 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_3370 = memref.subview %alloc_3369[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_3368, %subview_3370 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3371 = memref.subview %alloc_3369[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_3366, %subview_3371 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3372 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3369, %expand_shape_3364 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3372 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3373 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3365, %alloc_3372 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_3373 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3374 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3352, %expand_shape_3362 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3374 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %subview_3375 = memref.subview %alloc_3352[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3376 = memref.subview %alloc_3352[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3377 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x64xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%subview_3376 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>) outs(%alloc_3377 : memref<1x32x40x64xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3378 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    %subview_3379 = memref.subview %alloc_3378[0, 0, 0, 0] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    memref.copy %alloc_3377, %subview_3379 : memref<1x32x40x64xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>>
    %subview_3380 = memref.subview %alloc_3378[0, 0, 0, 64] [1, 32, 40, 64] [1, 1, 1, 1] : memref<1x32x40x128xf32> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    memref.copy %subview_3375, %subview_3380 : memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1]>> to memref<1x32x40x64xf32, strided<[163840, 5120, 128, 1], offset: 64>>
    %alloc_3381 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3378, %expand_shape_3364 : memref<1x32x40x128xf32>, memref<1x1x40x128xf32>) outs(%alloc_3381 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3382 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x128xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3374, %alloc_3381 : memref<1x32x40x128xf32>, memref<1x32x40x128xf32>) outs(%alloc_3382 : memref<1x32x40x128xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3383 = memref.alloc() {alignment = 64 : i64} : memref<1x32x128x40xf32>
    linalg.generic {indexing_maps = [#map20, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3382 : memref<1x32x40x128xf32>) outs(%alloc_3383 : memref<1x32x128x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3384 = memref.collapse_shape %alloc_3373 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %collapse_shape_3385 = memref.collapse_shape %alloc_3383 [[0, 1], [2], [3]] : memref<1x32x128x40xf32> into memref<32x128x40xf32>
    %alloc_3386 = memref.alloc() {alignment = 64 : i64} : memref<32x40x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3386 : memref<32x40x40xf32>)
    linalg.batch_matmul ins(%collapse_shape_3384, %collapse_shape_3385 : memref<32x40x128xf32>, memref<32x128x40xf32>) outs(%alloc_3386 : memref<32x40x40xf32>)
    %expand_shape_3387 = memref.expand_shape %alloc_3386 [[0, 1], [2], [3]] : memref<32x40x40xf32> into memref<1x32x40x40xf32>
    %alloc_3388 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : memref<1x32x40x40xf32>) outs(%alloc_3388 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3389 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3387, %alloc_3388 : memref<1x32x40x40xf32>, memref<1x32x40x40xf32>) outs(%alloc_3389 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3390 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map8, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3389, %alloc_13 : memref<1x32x40x40xf32>, memref<1x1x40x40xf32>) outs(%alloc_3390 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3391 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_0 : f32) outs(%alloc_3391 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_3390 : memref<1x32x40x40xf32>) outs(%alloc_3391 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.cmpf ugt, %in, %init : f32
        %372 = arith.select %371, %in, %init : f32
        %373 = arith.cmpf uno, %init, %init : f32
        %374 = arith.select %373, %init, %372 : f32
        linalg.yield %374 : f32
      }
    %expand_shape_3392 = memref.expand_shape %alloc_3391 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_3393 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3390, %expand_shape_3392 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_3393 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.subf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3394 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3393 : memref<1x32x40x40xf32>) outs(%alloc_3394 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.exp %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3395 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3395 : memref<1x32x40xf32>)
    linalg.reduce ins(%alloc_3394 : memref<1x32x40x40xf32>) outs(%alloc_3395 : memref<1x32x40xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3396 = memref.expand_shape %alloc_3395 [[0], [1], [2, 3]] : memref<1x32x40xf32> into memref<1x32x40x1xf32>
    %alloc_3397 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x1xf32>
    linalg.generic {indexing_maps = [#map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3396 : memref<1x32x40x1xf32>) outs(%alloc_3397 : memref<1x32x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3398 = memref.alloc() {alignment = 64 : i64} : memref<1x32x40x40xf32>
    linalg.generic {indexing_maps = [#map19, #map21, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%alloc_3394, %alloc_3397 : memref<1x32x40x40xf32>, memref<1x32x40x1xf32>) outs(%alloc_3398 : memref<1x32x40x40xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %collapse_shape_3399 = memref.collapse_shape %alloc_3398 [[0, 1], [2], [3]] : memref<1x32x40x40xf32> into memref<32x40x40xf32>
    %collapse_shape_3400 = memref.collapse_shape %alloc_3354 [[0, 1], [2], [3]] : memref<1x32x40x128xf32> into memref<32x40x128xf32>
    %alloc_3401 = memref.alloc() {alignment = 64 : i64} : memref<32x40x128xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3401 : memref<32x40x128xf32>)
    linalg.batch_matmul ins(%collapse_shape_3399, %collapse_shape_3400 : memref<32x40x40xf32>, memref<32x40x128xf32>) outs(%alloc_3401 : memref<32x40x128xf32>)
    %expand_shape_3402 = memref.expand_shape %alloc_3401 [[0, 1], [2], [3]] : memref<32x40x128xf32> into memref<1x32x40x128xf32>
    %alloc_3403 = memref.alloc() {alignment = 64 : i64} : memref<1x40x32x128xf32>
    linalg.generic {indexing_maps = [#map16, #map9], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expand_shape_3402 : memref<1x32x40x128xf32>) outs(%alloc_3403 : memref<1x40x32x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %alloc_3404 = memref.alloc() {alignment = 64 : i64} : memref<4096x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%6 : memref<4096x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3404 : memref<4096x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3405 = memref.collapse_shape %alloc_3403 [[0, 1], [2, 3]] : memref<1x40x32x128xf32> into memref<40x4096xf32>
    %alloc_3406 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3406 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3405, %alloc_3404 : memref<40x4096xf32>, memref<4096x4096xf32>) outs(%alloc_3406 : memref<40x4096xf32>)
    %expand_shape_3407 = memref.expand_shape %alloc_3406 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_3408 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3328, %expand_shape_3407 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_3408 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3409 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3408 : memref<1x40x4096xf32>) outs(%alloc_3409 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_3410 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3410 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_3409 : memref<1x40x4096xf32>) outs(%alloc_3410 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3411 = memref.expand_shape %alloc_3410 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_3412 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_3412 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3413 = memref.expand_shape %alloc_3412 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_3414 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3413, %expand_shape_3411 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_3414 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3415 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3414, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_3415 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3416 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3415 : memref<1x40x1xf32>) outs(%alloc_3416 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3417 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3408, %alloc_3416 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_3417 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3418 = memref.expand_shape %5 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_3419 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3418, %alloc_3417 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_3419 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3420 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%4 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3420 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3421 = memref.collapse_shape %alloc_3419 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3422 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_3422 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3421, %alloc_3420 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_3422 : memref<40x11008xf32>)
    %expand_shape_3423 = memref.expand_shape %alloc_3422 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_3424 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3423 : memref<1x40x11008xf32>) outs(%alloc_3424 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.negf %in : f32
      %372 = math.exp %371 : f32
      %373 = arith.addf %372, %cst : f32
      %374 = arith.divf %cst, %373 : f32
      linalg.yield %374 : f32
    }
    %alloc_3425 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3423, %alloc_3424 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_3425 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3426 = memref.alloc() {alignment = 64 : i64} : memref<4096x11008xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%3 : memref<11008x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3426 : memref<4096x11008xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3427 = memref.collapse_shape %alloc_3419 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3428 = memref.alloc() {alignment = 64 : i64} : memref<40x11008xf32>
    memref.copy %357, %alloc_3428 : memref<40x11008xf32> to memref<40x11008xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3427, %alloc_3426 : memref<40x4096xf32>, memref<4096x11008xf32>) outs(%alloc_3428 : memref<40x11008xf32>)
    %expand_shape_3429 = memref.expand_shape %alloc_3428 [[0, 1], [2]] : memref<40x11008xf32> into memref<1x40x11008xf32>
    %alloc_3430 = memref.alloc() {alignment = 64 : i64} : memref<1x40x11008xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3425, %expand_shape_3429 : memref<1x40x11008xf32>, memref<1x40x11008xf32>) outs(%alloc_3430 : memref<1x40x11008xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3431 = memref.alloc() {alignment = 64 : i64} : memref<11008x4096xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%2 : memref<4096x11008xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3431 : memref<11008x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3432 = memref.collapse_shape %alloc_3430 [[0, 1], [2]] : memref<1x40x11008xf32> into memref<40x11008xf32>
    %alloc_3433 = memref.alloc() {alignment = 64 : i64} : memref<40x4096xf32>
    memref.copy %359, %alloc_3433 : memref<40x4096xf32> to memref<40x4096xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3432, %alloc_3431 : memref<40x11008xf32>, memref<11008x4096xf32>) outs(%alloc_3433 : memref<40x4096xf32>)
    %expand_shape_3434 = memref.expand_shape %alloc_3433 [[0, 1], [2]] : memref<40x4096xf32> into memref<1x40x4096xf32>
    %alloc_3435 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3408, %expand_shape_3434 : memref<1x40x4096xf32>, memref<1x40x4096xf32>) outs(%alloc_3435 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3436 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map3, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3435 : memref<1x40x4096xf32>) outs(%alloc_3436 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.fpowi %in, %c2_i32 : f32, i32
      linalg.yield %371 : f32
    }
    %alloc_3437 = memref.alloc() {alignment = 64 : i64} : memref<1x40xf32>
    linalg.fill ins(%cst_1 : f32) outs(%alloc_3437 : memref<1x40xf32>)
    linalg.reduce ins(%alloc_3436 : memref<1x40x4096xf32>) outs(%alloc_3437 : memref<1x40xf32>) dimensions = [2] 
      (%in: f32, %init: f32) {
        %371 = arith.addf %in, %init : f32
        linalg.yield %371 : f32
      }
    %expand_shape_3438 = memref.expand_shape %alloc_3437 [[0], [1, 2]] : memref<1x40xf32> into memref<1x40x1xf32>
    %alloc_3439 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
    linalg.generic {indexing_maps = [#map10, #map4], iterator_types = ["parallel"]} ins(%361 : memref<1xf32>) outs(%alloc_3439 : memref<1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = arith.divf %cst, %in : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3440 = memref.expand_shape %alloc_3439 [[0, 1, 2]] : memref<1xf32> into memref<1x1x1xf32>
    %alloc_3441 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map11, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3440, %expand_shape_3438 : memref<1x1x1xf32>, memref<1x40x1xf32>) outs(%alloc_3441 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3442 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3441, %360 : memref<1x40x1xf32>, memref<1x40x1xf32>) outs(%alloc_3442 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.addf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %alloc_3443 = memref.alloc() {alignment = 64 : i64} : memref<1x40x1xf32>
    linalg.generic {indexing_maps = [#map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3442 : memref<1x40x1xf32>) outs(%alloc_3443 : memref<1x40x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %371 = math.rsqrt %in : f32
      linalg.yield %371 : f32
    }
    %alloc_3444 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map13, #map12, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%alloc_3435, %alloc_3443 : memref<1x40x4096xf32>, memref<1x40x1xf32>) outs(%alloc_3444 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %expand_shape_3445 = memref.expand_shape %1 [[0, 1, 2]] : memref<4096xf32, strided<[?], offset: ?>> into memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>
    %alloc_3446 = memref.alloc() {alignment = 64 : i64} : memref<1x40x4096xf32>
    linalg.generic {indexing_maps = [#map14, #map13, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expand_shape_3445, %alloc_3444 : memref<1x1x4096xf32, strided<[?, ?, ?], offset: ?>>, memref<1x40x4096xf32>) outs(%alloc_3446 : memref<1x40x4096xf32>) {
    ^bb0(%in: f32, %in_3451: f32, %out: f32):
      %371 = arith.mulf %in, %in_3451 : f32
      linalg.yield %371 : f32
    }
    %369 = bufferization.to_tensor %alloc_3446 : memref<1x40x4096xf32>
    %alloc_3447 = memref.alloc() {alignment = 64 : i64} : memref<4096x32000xf32>
    linalg.generic {indexing_maps = [#map15, #map1], iterator_types = ["parallel", "parallel"]} ins(%0 : memref<32000x4096xf32, strided<[?, ?], offset: ?>>) outs(%alloc_3447 : memref<4096x32000xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    }
    %collapse_shape_3448 = memref.collapse_shape %alloc_3446 [[0, 1], [2]] : memref<1x40x4096xf32> into memref<40x4096xf32>
    %alloc_3449 = memref.alloc() {alignment = 64 : i64} : memref<40x32000xf32>
    memref.copy %356, %alloc_3449 : memref<40x32000xf32> to memref<40x32000xf32>
    linalg.matmul {cast = #linalg.type_fn<cast_signed>} ins(%collapse_shape_3448, %alloc_3447 : memref<40x4096xf32>, memref<4096x32000xf32>) outs(%alloc_3449 : memref<40x32000xf32>)
    %expand_shape_3450 = memref.expand_shape %alloc_3449 [[0, 1], [2]] : memref<40x32000xf32> into memref<1x40x32000xf32>
    %370 = bufferization.to_tensor %expand_shape_3450 : memref<1x40x32000xf32>
    return %369, %370 : tensor<1x40x4096xf32>, tensor<1x40x32000xf32>
  }
}

